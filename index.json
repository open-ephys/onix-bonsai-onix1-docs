{
  "api/OpenEphys.Onix1.AnalogIODataType.html": {
    "href": "api/OpenEphys.Onix1.AnalogIODataType.html",
    "title": "Enum AnalogIODataType",
    "keywords": "AnalogIODataType Specifies the analog sample representation. Fields Field & Value Description S16 = 0 Twos-complement encoded signed 16-bit integer Volts = 1 32-bit floating point voltage."
  },
  "api/OpenEphys.Onix1.AnalogIODirection.html": {
    "href": "api/OpenEphys.Onix1.AnalogIODirection.html",
    "title": "Enum AnalogIODirection",
    "keywords": "AnalogIODirection Specifies analog channel direction. Fields Field & Value Description Input = 0 Input to breakout board. Output = 1 Output from breakout board with loopback."
  },
  "api/OpenEphys.Onix1.AnalogIOVoltageRange.html": {
    "href": "api/OpenEphys.Onix1.AnalogIOVoltageRange.html",
    "title": "Enum AnalogIOVoltageRange",
    "keywords": "AnalogIOVoltageRange Specifies the analog input ADC voltage range. Fields Field & Value Description TenVolts = 0 ±10.0 volts. TwoPointFiveVolts = 1 ±2.5 volts. FiveVolts = 2 ±5.0 volts."
  },
  "api/OpenEphys.Onix1.AnalogInput.html": {
    "href": "api/OpenEphys.Onix1.AnalogInput.html",
    "title": "Class AnalogInput",
    "keywords": "AnalogInput source Operator Produces a sequence of analog input frames from an ONIX breakout board. This data IO operator must be linked to an appropriate configuration, such as a ConfigureAnalogIO, using a shared DeviceName. Inputs & Outputs Generates a sequence of AnalogInputDataFrame. A sequence of AnalogInputDataFrame Properties Property Type Description BufferSize configuration int Gets or sets the number of samples collected for each channel that are use to create a single AnalogInputDataFrame. This property determines the number of analog samples that are buffered for each channel before data is propagated. For instance, if this value is set to 100, then 100 samples, along with corresponding clock values, will be collected from each of the input channels and packed into each AnalogInputDataFrame. Because channels are sampled at 100 kHz, this is equivalent to 1 millisecond of data from each channel. DataType configuration AnalogIODataType Gets or sets the data type used to represent analog samples. If S16 is selected, each ADC sample is represented at a signed, twos-complement encoded 16-bit integer. S16 samples can be converted to a voltage using each channels' AnalogIOVoltageRange selection. For instance, channel 0 can be converted using InputRange0. When Volts is selected, the voltage conversion is performed automatically and samples are represented as 32-bit floating point voltages. S16 = 0 Volts = 1 DeviceName configuration string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. For instance, it can be used to link configuration operators to data IO operators within a workflow. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for software communication."
  },
  "api/OpenEphys.Onix1.AnalogInputDataFrame.html": {
    "href": "api/OpenEphys.Onix1.AnalogInputDataFrame.html",
    "title": "Class AnalogInputDataFrame",
    "keywords": "AnalogInputDataFrame Buffered analog data produced by the ONIX breakout board. Properties Property Type Description AnalogData Mat Get the buffered analog data array. Clock ulong[] Gets the buffered array of Clock values. HubClock ulong[] Gets the buffered array of HubClock values."
  },
  "api/OpenEphys.Onix1.AnalogOutput.html": {
    "href": "api/OpenEphys.Onix1.AnalogOutput.html",
    "title": "Class AnalogOutput",
    "keywords": "AnalogOutput sink Operator Sends analog output data to an ONIX breakout board. This data IO operator must be linked to an appropriate configuration, such as a ConfigureAnalogIO, using a shared DeviceName. Inputs & Outputs Send an matrix of samples to all enabled analog outputs. If a matrix contains multiple samples, they will be written to hardware as quickly as communication allows. The data within each input matrix must have S16 when DataType is set to S16 or F32 when DataType is set to Volts. A sequence of 12xN sample matrices containing the analog data to write to channels 0 to 11. A sequence of 12xN sample matrices containing the analog data that were written to channels 0 to 11. Send an 12-element array of values to update all enabled analog outputs. This overload should be used when DataType is set to S16 and values should be within -32,768 to 32,767, which correspond to -10.0 to 10.0 volts. A sequence of 12x1 element arrays each containing the analog data to write to channels 0 to 11. A sequence of 12x1 element arrays each containing the analog data to write to channels 0 to 11. Send an 12-element array of values to update all enabled analog outputs. This overload should be used when DataType is set to Volts and values should be within -10.0 to 10.0 volts. A sequence of 12x1 element arrays each containing the analog data to write to channels 0 to 11. A sequence of 12x1 element arrays each containing the analog data to write to channels 0 to 11. Properties Property Type Description DataType configuration AnalogIODataType Gets or sets the data type used to represent analog samples. If S16 is selected, each DAC value is represented by a signed, twos-complement encoded 16-bit integer. In this case, the output voltage always corresponds to TenVolts. When Volts is selected, 32-bit floating point voltages between -10 and 10 volts are sent directly to the DACs. S16 = 0 Volts = 1 DeviceName configuration string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. For instance, it can be used to link configuration operators to data IO operators within a workflow. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for software communication."
  },
  "api/OpenEphys.Onix1.Bno055AxisMap.html": {
    "href": "api/OpenEphys.Onix1.Bno055AxisMap.html",
    "title": "Enum Bno055AxisMap",
    "keywords": "Bno055AxisMap Specifies the axis map of a Bno055 compared to the default orientation. the datasheet. The axis of the device can be reconfigured to the new reference axis to account for differences in its mounting position. The following values can be applied to the Bno055's AXIS_MAP_CONFIG register at address 0x41 in order to rotate the Bno055's coordinate system compared to the default orientation presented on page 24 of the Bno055 datasheet. Fields Field & Value Description XYZ = 36 Specifies X->X, Y->Y, Z->Z (chip default). XZY = 24 Specifies X->X, Y->Z, Z->Y. YXZ = 33 Specifies X->Y, Y->X, Z->Z. YZX = 9 Specifies X->Y, Y->Z, Z->X. ZXY = 18 Specifies X->Z, Y->X, Z->Y. ZYX = 6 Specifies X->Z, Y->Y, Z->X."
  },
  "api/OpenEphys.Onix1.Bno055AxisSign.html": {
    "href": "api/OpenEphys.Onix1.Bno055AxisSign.html",
    "title": "Enum Bno055AxisSign",
    "keywords": "Bno055AxisSign Specifies the axis map sign of a Bno055 IMU The axis of the device can be reconfigured to the new reference axis to account for differences in its mounting position. The following values can be applied to the Bno055's AXIS_MAP_SIGN register at address 0x42 to mirror specific axes in the Bno055's coordinate system compared to the default orientation presented on page 24 of the Bno055 datasheet. Fields Field & Value Description Default = 0 Specifies that all axes are positive (chip default). MirrorZ = 1 Specifies that Z axis should be mirrored. MirrorY = 2 Specifies that Y axis should be mirrored. MirrorX = 4 Specifies that X axis should be mirrored."
  },
  "api/OpenEphys.Onix1.Bno055CalibrationFlags.html": {
    "href": "api/OpenEphys.Onix1.Bno055CalibrationFlags.html",
    "title": "Enum Bno055CalibrationFlags",
    "keywords": "Bno055CalibrationFlags Specifies the MEMS subsystem and sensor fusion calibration status. Fields Field & Value Description None = 0 Specifies that no sub-system is calibrated. MagnetometerLow = 1 Specifies that the magnetometer is poorly calibrated. MagnetometerMed = 2 Specifies that the magnetometer is partially calibrated. MagnetometerFull = MagnetometerLow | MagnetometerMed Specifies that the magnetometer is fully calibrated. AccelerometerLow = 4 Specifies that the accelerometer is poorly calibrated. AccelerometerMed = 8 Specifies that the accelerometer is partially calibrated. AccelerometerFull = AccelerometerLow | AccelerometerMed Specifies that the accelerometer is fully calibrated. GyroscopeLow = 16 Specifies that the gyroscope is poorly calibrated. GyroscopeMed = 32 Specifies that the gyroscope is partially calibrated. GyroscopeFull = GyroscopeLow | GyroscopeMed Specifies that the gyroscope is fully calibrated. SystemLow = 64 Specifies that sensor fusion is poorly calibrated. SystemMed = 128 Specifies that sensor fusion is partially calibrated. SystemFull = SystemLow | SystemMed Specifies that sensor fusion is fully calibrated."
  },
  "api/OpenEphys.Onix1.Bno055Data.html": {
    "href": "api/OpenEphys.Onix1.Bno055Data.html",
    "title": "Class Bno055Data",
    "keywords": "Bno055Data source Operator Produces a sequence of 3D orientation measurements produced by Bno055 9-axis inertial measurement unit. This data IO operator must be linked to an appropriate configuration operator, such as a ConfigureBno055, using a shared DeviceName. Inputs & Outputs Generates a sequence of Bno055DataFrame objects, each of which contains a 3D orientation sample in various formats along with device metadata. A sequence of Bno055DataFrame objects. Properties Property Type Description DeviceName configuration string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. For instance, it can be used to link configuration operators to data IO operators within a workflow. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for software communication."
  },
  "api/OpenEphys.Onix1.Bno055DataFrame.html": {
    "href": "api/OpenEphys.Onix1.Bno055DataFrame.html",
    "title": "Class Bno055DataFrame",
    "keywords": "Bno055DataFrame 3D-orientation data produced by a Bosch Bno55 9-axis inertial measurement unit (IMU). Properties Property Type Description Acceleration Vector3 Gets the linear acceleration vector in units of m / s^2. Calibration Bno055CalibrationFlags Gets MEMS subsystem and sensor fusion calibration status. None = 0 MagnetometerLow = 1 MagnetometerMed = 2 MagnetometerFull = MagnetometerLow | MagnetometerMed AccelerometerLow = 4 AccelerometerMed = 8 AccelerometerFull = AccelerometerLow | AccelerometerMed GyroscopeLow = 16 GyroscopeMed = 32 GyroscopeFull = GyroscopeLow | GyroscopeMed SystemLow = 64 SystemMed = 128 SystemFull = SystemLow | SystemMed EulerAngle Vector3 Gets the 3D orientation in Euler angle format with units of degrees. The Tait-Bryan formalism is used: Yaw: 0 to 360 degrees. Roll: -180 to 180 degrees Pitch: -90 to 90 degrees Gravity Vector3 Gets the gravity acceleration vector in units of m / s^2. Quaternion Quaternion Gets the 3D orientation represented as a Quaternion. Temperature int Gets the chip temperature in Celsius. Clock ulong Gets the acquisition clock count. Acquisition clock count that is synchronous for all frames collected within an ONI context created using CreateContext. The acquisition clock rate is given by AcquisitionClockHz. This clock value provides a common, synchronized time base for all data collected with an single ONI context. HubClock ulong Gets the hub clock count. Local, potentially asynchronous, clock count. Aside from the synchronous Clock value, data frames also contain a local clock count produced within the oni.Hub that the data was actually produced within. For instance, a headstage may contain an onboard controller for controlling devices and arbitrating data stream that runs asynchronously from the AcquisitionClockHz. This value is therefore the most precise way to compare the sample time of data collected within a given oni.Hub. However, the delay between time of data collection and synchronous time stamping by Clock is very small (sub-microsecond) and this value can therefore be disregarded in most scenarios in favor of Clock."
  },
  "api/OpenEphys.Onix1.BreakoutButtonState.html": {
    "href": "api/OpenEphys.Onix1.BreakoutButtonState.html",
    "title": "Enum BreakoutButtonState",
    "keywords": "BreakoutButtonState Specifies the state of the ONIX breakout board's switches and buttons. Fields Field & Value Description Moon = 1 Specifies that the ☾ key is depressed. Triangle = 2 Specifies that the △ key is depressed. X = 4 Specifies that the × key is depressed. Check = 8 Specifies that the ✓ key is depressed. Circle = 16 Specifies that the ◯ key is depressed. Square = 32 Specifies that the □ key is depressed. Reserved0 = 64 Specifies that reserved bit 0 is high. Reserved1 = 128 Specifies that reserved bit 1 is high. PortDOn = 256 Specifies that port D power switch is set to on. PortCOn = 512 Specifies that port C power switch is set to on. PortBOn = 1024 Specifies that port B power switch is set to on. PortAOn = 2048 Specifies that port A power switch is set to on."
  },
  "api/OpenEphys.Onix1.BufferedDataFrame.html": {
    "href": "api/OpenEphys.Onix1.BufferedDataFrame.html",
    "title": "Class BufferedDataFrame",
    "keywords": "BufferedDataFrame An abstract class for representing buffered groups oni.Frame objects in way that suits their use in this library. Properties Property Type Description Clock ulong[] Gets the buffered array of Clock values. HubClock ulong[] Gets the buffered array of HubClock values."
  },
  "api/OpenEphys.Onix1.ConfigureAnalogIO.html": {
    "href": "api/OpenEphys.Onix1.ConfigureAnalogIO.html",
    "title": "Class ConfigureAnalogIO",
    "keywords": "TIP This is a device configuration operator. Aggregate configuration operators are recommended in lieu of device configuration operators for interfacing with Open Ephys Onix hardware. ConfigureAnalogIO sink Operator Configures an analog inputs and output device. This configuration operator can be linked to data IO operators, such as AnalogInput and AnalogOutput, using a shared DeviceName. Inputs & Outputs Configures the analog input and output device in the ONIX breakout board. This will schedule analog IO hardware configuration actions that can be applied by a StartAcquisition object prior to data collection. The sequence of ContextTask objects on which to apply the analog IO configuration. A sequence of ContextTask objects that is identical to source in which each ContextTask has been instructed to apply the analog IO configuration. Properties Property Type Description Direction0 configuration AnalogIODirection Gets or sets the direction of channel 0. Input = 0 Output = 1 Direction1 configuration AnalogIODirection Gets or sets the direction of channel 1. Input = 0 Output = 1 Direction2 configuration AnalogIODirection Gets or sets the direction of channel 2. Input = 0 Output = 1 Direction3 configuration AnalogIODirection Gets or sets the direction of channel 3. Input = 0 Output = 1 Direction4 configuration AnalogIODirection Gets or sets the direction of channel 4. Input = 0 Output = 1 Direction5 configuration AnalogIODirection Gets or sets the direction of channel 5. Input = 0 Output = 1 Direction6 configuration AnalogIODirection Gets or sets the direction of channel 6. Input = 0 Output = 1 Direction7 configuration AnalogIODirection Gets or sets the direction of channel 7. Input = 0 Output = 1 Direction8 configuration AnalogIODirection Gets or sets the direction of channel 8. Input = 0 Output = 1 Direction9 configuration AnalogIODirection Gets or sets the direction of channel 9. Input = 0 Output = 1 Direction10 configuration AnalogIODirection Gets or sets the direction of channel 10. Input = 0 Output = 1 Direction11 configuration AnalogIODirection Gets or sets the direction of channel 11. Input = 0 Output = 1 Enable configuration bool Gets or sets the device enable state. If set to true, AnalogInput will produce data. If set to false, AnalogInput will not produce data. InputRange0 configuration AnalogIOVoltageRange Gets or sets the input voltage range of channel 0. TenVolts = 0 TwoPointFiveVolts = 1 FiveVolts = 2 InputRange1 configuration AnalogIOVoltageRange Gets or sets the input voltage range of channel 1. TenVolts = 0 TwoPointFiveVolts = 1 FiveVolts = 2 InputRange2 configuration AnalogIOVoltageRange Gets or sets the input voltage range of channel 2. TenVolts = 0 TwoPointFiveVolts = 1 FiveVolts = 2 InputRange3 configuration AnalogIOVoltageRange Gets or sets the input voltage range of channel 3. TenVolts = 0 TwoPointFiveVolts = 1 FiveVolts = 2 InputRange4 configuration AnalogIOVoltageRange Gets or sets the input voltage range of channel 4. TenVolts = 0 TwoPointFiveVolts = 1 FiveVolts = 2 InputRange5 configuration AnalogIOVoltageRange Gets or sets the input voltage range of channel 5. TenVolts = 0 TwoPointFiveVolts = 1 FiveVolts = 2 InputRange6 configuration AnalogIOVoltageRange Gets or sets the input voltage range of channel 6. TenVolts = 0 TwoPointFiveVolts = 1 FiveVolts = 2 InputRange7 configuration AnalogIOVoltageRange Gets or sets the input voltage range of channel 7. TenVolts = 0 TwoPointFiveVolts = 1 FiveVolts = 2 InputRange8 configuration AnalogIOVoltageRange Gets or sets the input voltage range of channel 8. TenVolts = 0 TwoPointFiveVolts = 1 FiveVolts = 2 InputRange9 configuration AnalogIOVoltageRange Gets or sets the input voltage range of channel 9. TenVolts = 0 TwoPointFiveVolts = 1 FiveVolts = 2 InputRange10 configuration AnalogIOVoltageRange Gets or sets the input voltage range of channel 10. TenVolts = 0 TwoPointFiveVolts = 1 FiveVolts = 2 InputRange11 configuration AnalogIOVoltageRange Gets or sets the input voltage range of channel 11. TenVolts = 0 TwoPointFiveVolts = 1 FiveVolts = 2 DeviceName configuration string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. For instance, it can be used to link configuration operators to data IO operators within a workflow. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for software communication. DeviceAddress configuration uint Gets or sets the device address. This is a fully-qualified numerical hardware address of a device within the device table produced by an Open Neuro Interface (ONI) compliant acquisition system. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for hardware communication. DeviceType Type Gets or sets the device identity. This type provides a device identity to each device within the device table produced by an Open Neuro Interface (ONI) compliant acquisition system."
  },
  "api/OpenEphys.Onix1.ConfigureBno055.html": {
    "href": "api/OpenEphys.Onix1.ConfigureBno055.html",
    "title": "Class ConfigureBno055",
    "keywords": "TIP This is a device configuration operator. Aggregate configuration operators are recommended in lieu of device configuration operators for interfacing with Open Ephys Onix hardware. ConfigureBno055 sink Operator Configures a Bosch Bno055 9-axis inertial measurement unit (IMU). This configuration operator can be linked to a data IO operator, such as Bno055Data, using a shared DeviceName. Inputs & Outputs Configures a Bosch Bno055 9-axis IMU device. This will schedule configuration actions to be applied by a StartAcquisition instance prior to data acquisition. A sequence of ContextTask instances that holds configuration actions. The original sequence modified by adding additional configuration actions required to configure a Bno055 device. Properties Property Type Description Enable configuration bool Gets or sets the device enable state. If set to true, a Bno055Data instance that is linked to this configuration will produce data. If set to false, it will not produce data. DeviceName configuration string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. For instance, it can be used to link configuration operators to data IO operators within a workflow. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for software communication. DeviceAddress configuration uint Gets or sets the device address. This is a fully-qualified numerical hardware address of a device within the device table produced by an Open Neuro Interface (ONI) compliant acquisition system. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for hardware communication. DeviceType Type Gets or sets the device identity. This type provides a device identity to each device within the device table produced by an Open Neuro Interface (ONI) compliant acquisition system."
  },
  "api/OpenEphys.Onix1.ConfigureBreakoutBoard.html": {
    "href": "api/OpenEphys.Onix1.ConfigureBreakoutBoard.html",
    "title": "Class ConfigureBreakoutBoard",
    "keywords": "ConfigureBreakoutBoard sink Operator Configures an ONIX breakout board. The ONIX breakout board is a general purpose interface for neural data acquisition. It provides the following features on the headstage: 2x general purpose input ports for headstage, miniscopes, etc. 12x configurable ±10V analog input/output channels sampled/updated at 100 kHz per channel. 8x digital inputs 8x digital outputs Hardware time-stamped buttons for manual event logging Indicator LEDs with dark mode for light-sensitive applications. Inputs & Outputs Configure all devices in the device group. This will schedule configuration actions to be applied by a StartAcquisition instance prior to data acquisition. A sequence of ContextTask instances that hold configuration actions. The original sequence modified by adding additional configuration actions required to configure all the devices in the device group. Properties Configuration These are properties of the aggregate operator: Property Type Description Name configuration string Gets or sets a unique device group name. A human-readable identifier that is used as a prefix for the DeviceName of each device in the the group. Devices AnalogIO AnalogIO is a ConfigureAnalogIO operator encapsulated by the ConfigureBreakoutBoard operator with the following properties: Property Type Description Direction0 configuration AnalogIODirection Gets or sets the direction of channel 0. Input = 0 Output = 1 Direction1 configuration AnalogIODirection Gets or sets the direction of channel 1. Input = 0 Output = 1 Direction2 configuration AnalogIODirection Gets or sets the direction of channel 2. Input = 0 Output = 1 Direction3 configuration AnalogIODirection Gets or sets the direction of channel 3. Input = 0 Output = 1 Direction4 configuration AnalogIODirection Gets or sets the direction of channel 4. Input = 0 Output = 1 Direction5 configuration AnalogIODirection Gets or sets the direction of channel 5. Input = 0 Output = 1 Direction6 configuration AnalogIODirection Gets or sets the direction of channel 6. Input = 0 Output = 1 Direction7 configuration AnalogIODirection Gets or sets the direction of channel 7. Input = 0 Output = 1 Direction8 configuration AnalogIODirection Gets or sets the direction of channel 8. Input = 0 Output = 1 Direction9 configuration AnalogIODirection Gets or sets the direction of channel 9. Input = 0 Output = 1 Direction10 configuration AnalogIODirection Gets or sets the direction of channel 10. Input = 0 Output = 1 Direction11 configuration AnalogIODirection Gets or sets the direction of channel 11. Input = 0 Output = 1 Enable configuration bool Gets or sets the device enable state. If set to true, AnalogInput will produce data. If set to false, AnalogInput will not produce data. InputRange0 configuration AnalogIOVoltageRange Gets or sets the input voltage range of channel 0. TenVolts = 0 TwoPointFiveVolts = 1 FiveVolts = 2 InputRange1 configuration AnalogIOVoltageRange Gets or sets the input voltage range of channel 1. TenVolts = 0 TwoPointFiveVolts = 1 FiveVolts = 2 InputRange2 configuration AnalogIOVoltageRange Gets or sets the input voltage range of channel 2. TenVolts = 0 TwoPointFiveVolts = 1 FiveVolts = 2 InputRange3 configuration AnalogIOVoltageRange Gets or sets the input voltage range of channel 3. TenVolts = 0 TwoPointFiveVolts = 1 FiveVolts = 2 InputRange4 configuration AnalogIOVoltageRange Gets or sets the input voltage range of channel 4. TenVolts = 0 TwoPointFiveVolts = 1 FiveVolts = 2 InputRange5 configuration AnalogIOVoltageRange Gets or sets the input voltage range of channel 5. TenVolts = 0 TwoPointFiveVolts = 1 FiveVolts = 2 InputRange6 configuration AnalogIOVoltageRange Gets or sets the input voltage range of channel 6. TenVolts = 0 TwoPointFiveVolts = 1 FiveVolts = 2 InputRange7 configuration AnalogIOVoltageRange Gets or sets the input voltage range of channel 7. TenVolts = 0 TwoPointFiveVolts = 1 FiveVolts = 2 InputRange8 configuration AnalogIOVoltageRange Gets or sets the input voltage range of channel 8. TenVolts = 0 TwoPointFiveVolts = 1 FiveVolts = 2 InputRange9 configuration AnalogIOVoltageRange Gets or sets the input voltage range of channel 9. TenVolts = 0 TwoPointFiveVolts = 1 FiveVolts = 2 InputRange10 configuration AnalogIOVoltageRange Gets or sets the input voltage range of channel 10. TenVolts = 0 TwoPointFiveVolts = 1 FiveVolts = 2 InputRange11 configuration AnalogIOVoltageRange Gets or sets the input voltage range of channel 11. TenVolts = 0 TwoPointFiveVolts = 1 FiveVolts = 2 ClockOutput ClockOutput is a ConfigureOutputClock operator encapsulated by the ConfigureBreakoutBoard operator with the following properties: Property Type Description ClockGate acquisition bool Gets or sets a value specifying if the output clock is active. If set to true, the clock output will be connected to the clock output line. If set to false, the clock output line will be held low. This value can be toggled in real time to gate acquisition of external hardware. Delay configuration double Gets or sets the delay following acquisition commencement before the clock becomes active in seconds. Valid values are between 0 and and 3600 seconds. Setting to a value greater than 0 can be useful for ensuring data sources that are driven by the output clock start significantly after ONIX has begun acquisition for the purposes of ordering acquisition start times. The delay must be an integer multiple of the Acquisition Clock frequency. Therefore, the true delay cycle will be set to a value that is as close as possible to the requested setting while respecting this constraint. The value as actualized in hardware is reported by OutputClockData. DutyCycle configuration double Gets or sets the output clock duty cycle in percent. Valid values are between 10% and 90%. The output clock high and low times must each be an integer multiple of the Acquisition Clock frequency. Therefore, the true duty cycle will be set to a value that is as close as possible to the requested setting while respecting this constraint. The value as actualized in hardware is reported by OutputClockData. Frequency configuration double Gets or sets the output clock frequency in Hz. Valid values are between 0.1 Hz and 10 MHz. The output clock high and low times must each be an integer multiple of the Acquisition Clock frequency. Therefore, the true clock frequency will be set to a value that is as close as possible to the requested setting while respecting this constraint. The value as actualized in hardware is reported by OutputClockData. DigitalIO DigitalIO is a ConfigureDigitalIO operator encapsulated by the ConfigureBreakoutBoard operator with the following properties: Property Type Description Enable configuration bool Gets or sets the device enable state. If set to true, DigitalInput will produce data. If set to false, DigitalInput will not produce data. HarpInput HarpInput is a ConfigureHarpSyncInput operator encapsulated by the ConfigureBreakoutBoard operator with the following properties: Property Type Description Enable configuration bool Gets or sets a value specifying whether the Harp sync input device is enabled. Source configuration HarpSyncSource Gets or sets a value specifying the physical Harp clock input source. In standard ONIX breakout boards, the Harp mini-jack connector on the side of the breakout is configured to receive Harp clock synchronization signals. In early access versions of the ONIX breakout board, the Harp mini-jack connector is configured for output only, so a special adapter is needed to transmit the Harp clock synchronization signal to the breakout clock input zero. Breakout = 0 ClockAdapter = 1 Heartbeat Heartbeat is a ConfigureHeartbeat operator encapsulated by the ConfigureBreakoutBoard operator with the following properties: Property Type Description BeatsPerSecond acquisition uint Gets or sets the rate at which beats are produced in Hz. If set to true, a HeartbeatData instance that is linked to this configuration will produce data. If set to false, it will not produce data. Enable configuration bool Gets or sets the device enable state. If set to true, a HeartbeatData instance that is linked to this configuration will produce data. If set to false, it will not produce data. MemoryMonitor MemoryMonitor is a ConfigureMemoryMonitor operator encapsulated by the ConfigureBreakoutBoard operator with the following properties: Property Type Description Enable configuration bool Gets or sets the device enable state. If set to true, MemoryMonitorData will produce data. If set to false, MemoryMonitorData will not produce data. SamplesPerSecond configuration uint Gets or sets the frequency at which memory use is recorded in Hz."
  },
  "api/OpenEphys.Onix1.ConfigureDigitalIO.html": {
    "href": "api/OpenEphys.Onix1.ConfigureDigitalIO.html",
    "title": "Class ConfigureDigitalIO",
    "keywords": "TIP This is a device configuration operator. Aggregate configuration operators are recommended in lieu of device configuration operators for interfacing with Open Ephys Onix hardware. ConfigureDigitalIO sink Operator Configures the ONIX breakout board's digital inputs and outputs. This configuration operator can be linked to data IO operators, such as DigitalInput and DigitalOutput, using a shared DeviceName. Inputs & Outputs Configures the digital input and output device in the ONIX breakout board. This will schedule digital IO hardware configuration actions that can be applied by a StartAcquisition object prior to data collection. A sequence of ContextTask instances that hold configuration actions. The original sequence modified by adding additional configuration actions required to configure a digital IO device. Properties Property Type Description Enable configuration bool Gets or sets the device enable state. If set to true, DigitalInput will produce data. If set to false, DigitalInput will not produce data. DeviceName configuration string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. For instance, it can be used to link configuration operators to data IO operators within a workflow. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for software communication. DeviceAddress configuration uint Gets or sets the device address. This is a fully-qualified numerical hardware address of a device within the device table produced by an Open Neuro Interface (ONI) compliant acquisition system. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for hardware communication. DeviceType Type Gets or sets the device identity. This type provides a device identity to each device within the device table produced by an Open Neuro Interface (ONI) compliant acquisition system."
  },
  "api/OpenEphys.Onix1.ConfigureHarpSyncInput.html": {
    "href": "api/OpenEphys.Onix1.ConfigureHarpSyncInput.html",
    "title": "Class ConfigureHarpSyncInput",
    "keywords": "TIP This is a device configuration operator. Aggregate configuration operators are recommended in lieu of device configuration operators for interfacing with Open Ephys Onix hardware. ConfigureHarpSyncInput sink Operator Configures the ONIX breakout board's Harp sync input. This configuration operator can be linked to a data IO operator, such as HarpSyncInputData, using a shared DeviceName. Harp is a standard for asynchronous real-time data acquisition and experimental control in neuroscience. It includes a clock synchronization protocol which allows Harp devices to be connected to a shared clock line and continuously self-synchronize their clocks to a precision of tens of microseconds. This means that all experimental events are timestamped on the same clock and no post-hoc alignment of timing is necessary. The Harp clock signal is transmitted over a serial line every second. Every time the Harp sync input device in the ONIX breakout board detects a full Harp synchronization packet, a new data frame is emitted pairing the current value of the Harp clock with the local ONIX acquisition clock. Logging the sequence of all Harp synchronization packets can greatly facilitate post-hoc analysis and interpretation of timing signals. For more information see https://harp-tech.org/. Inputs & Outputs Configures a ONIX breakout board Harp sync input device. This will schedule configuration actions to be applied by a StartAcquisition instance prior to data acquisition. A sequence of ContextTask instances that hold configuration actions. The original sequence modified by adding additional configuration actions required to configure a ONIX breakout board Harp sync input device. Properties Property Type Description Enable configuration bool Gets or sets a value specifying whether the Harp sync input device is enabled. Source configuration HarpSyncSource Gets or sets a value specifying the physical Harp clock input source. In standard ONIX breakout boards, the Harp mini-jack connector on the side of the breakout is configured to receive Harp clock synchronization signals. In early access versions of the ONIX breakout board, the Harp mini-jack connector is configured for output only, so a special adapter is needed to transmit the Harp clock synchronization signal to the breakout clock input zero. Breakout = 0 ClockAdapter = 1 DeviceName configuration string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. For instance, it can be used to link configuration operators to data IO operators within a workflow. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for software communication. DeviceAddress configuration uint Gets or sets the device address. This is a fully-qualified numerical hardware address of a device within the device table produced by an Open Neuro Interface (ONI) compliant acquisition system. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for hardware communication. DeviceType Type Gets or sets the device identity. This type provides a device identity to each device within the device table produced by an Open Neuro Interface (ONI) compliant acquisition system."
  },
  "api/OpenEphys.Onix1.ConfigureHeadstage64.html": {
    "href": "api/OpenEphys.Onix1.ConfigureHeadstage64.html",
    "title": "Class ConfigureHeadstage64",
    "keywords": "ConfigureHeadstage64 sink Operator Configures an ONIX headstage-64 on the specified port. Headstage-64 is a 1.5g serialized, multifunction headstage designed to function with passive probes such as tetrode microdrives, silicon arrays, EEG/ECOG arrays, etc. It provides the following features: 64 analog ephys channels and 3 auxiliary channels sampled at 30 kHz per channel. A BNO055 9-axis IMU for real-time, 3D orientation tracking. Three TS4231 light to digital converters for real-time, 3D position tracking with HTC Vive base stations. A single electrical stimulator (current controlled, +/-15V compliance, automatic electrode discharge). Two optical stimulators (800 mA peak current per channel). Inputs & Outputs Configure all devices in the device group. This will schedule configuration actions to be applied by a StartAcquisition instance prior to data acquisition. A sequence of ContextTask instances that hold configuration actions. The original sequence modified by adding additional configuration actions required to configure all the devices in the device group. Properties Configuration These are properties of the aggregate operator: Property Type Description Port configuration PortName Gets or sets the port. The port is the physical connection to the ONIX breakout board and must be specified prior to operation. PortA = 1 PortB = 2 PortVoltage configuration double? Gets or sets the port voltage override. If defined, it will override automated voltage discovery and apply the specified voltage to the headstage. If left blank, an automated headstage detection algorithm will attempt to communicate with the headstage and apply an appropriate voltage for stable operation. Because ONIX allows any coaxial tether to be used, some of which are thin enough to result in a significant voltage drop, its may be required to manually specify the port voltage. Warning: this device requires 5.5V to 6.0V, measured at the headstage, for proper operation. Supplying higher voltages may result in damage. Name configuration string Gets or sets a unique device group name. A human-readable identifier that is used as a prefix for the DeviceName of each device in the the group. Devices Bno055 Bno055 is a ConfigureBno055 operator encapsulated by the ConfigureHeadstage64 operator with the following properties: Property Type Description Enable configuration bool Gets or sets the device enable state. If set to true, a Bno055Data instance that is linked to this configuration will produce data. If set to false, it will not produce data. ElectricalStimulator ElectricalStimulator is a ConfigureHeadstage64ElectricalStimulator operator encapsulated by the ConfigureHeadstage64 operator with the following properties: This operator does not have any configuration options. OpticalStimulator OpticalStimulator is a ConfigureHeadstage64OpticalStimulator operator encapsulated by the ConfigureHeadstage64 operator with the following properties: This operator does not have any configuration options. Rhd2164 Rhd2164 is a ConfigureRhd2164 operator encapsulated by the ConfigureHeadstage64 operator with the following properties: Property Type Description AnalogHighCutoff configuration Rhd2164AnalogHighCutoff Gets or sets the high cutoff frequency of the analog (pre-ADC) bandpass filter. High20000Hz = 0 High15000Hz = 1 High10000Hz = 2 High7500Hz = 3 High5000Hz = 4 High3000Hz = 5 High2500Hz = 6 High2000Hz = 7 High1500Hz = 8 High1000Hz = 9 High750Hz = 10 High500Hz = 11 High300Hz = 12 High250Hz = 13 High200Hz = 14 High150Hz = 15 High100Hz = 16 AnalogLowCutoff configuration Rhd2164AnalogLowCutoff Gets or sets the low cutoff frequency of the analog (pre-ADC) bandpass filter. Low500Hz = 0 Low300Hz = 1 Low250Hz = 2 Low200Hz = 3 Low150Hz = 4 Low100Hz = 5 Low75Hz = 6 Low50Hz = 7 Low30Hz = 8 Low25Hz = 9 Low20Hz = 10 Low15Hz = 11 Low10Hz = 12 Low7500mHz = 13 Low5000mHz = 14 Low3000mHz = 15 Low2500mHz = 16 Low2000mHz = 17 Low1500mHz = 18 Low1000mHz = 19 Low750mHz = 20 Low500mHz = 21 Low300mHz = 22 Low250mHz = 23 Low100mHz = 24 DspCutoff configuration Rhd2164DspCutoff Gets or sets the cutoff frequency for the digital (post-ADC) high-pass filter used for amplifier offset removal. Differential = 0 Dsp3309Hz = 1 Dsp1374Hz = 2 Dsp638Hz = 3 Dsp308Hz = 4 Dsp152Hz = 5 Dsp75Hz = 6 Dsp37Hz = 7 Dsp19Hz = 8 Dsp9336mHz = 9 Dsp4665mHz = 10 Dsp2332mHz = 11 Dsp1166mHz = 12 Dsp583mHz = 13 Dsp291mHz = 14 Dsp146mHz = 15 Off = 16 Enable configuration bool Gets or sets the device enable state. If set to true, a Rhd2164Data instance that is linked to this configuration will produce data. If set to false, it will not produce data. TS4231 TS4231 is a ConfigureTS4231V1 operator encapsulated by the ConfigureHeadstage64 operator with the following properties: Property Type Description Enable configuration bool Gets or sets the device enable state. If set to true, a TS4231V1Data instance that is linked to this configuration will produce data. If set to false, it will not produce data."
  },
  "api/OpenEphys.Onix1.ConfigureHeadstage64ElectricalStimulator.html": {
    "href": "api/OpenEphys.Onix1.ConfigureHeadstage64ElectricalStimulator.html",
    "title": "Class ConfigureHeadstage64ElectricalStimulator",
    "keywords": "TIP This is a device configuration operator. Aggregate configuration operators are recommended in lieu of device configuration operators for interfacing with Open Ephys Onix hardware. ConfigureHeadstage64ElectricalStimulator sink Operator Configures a headstage-64 onboard electrical stimulator. This configuration operator can be linked to a data IO operator, such as Headstage64ElectricalStimulatorTrigger, using a shared DeviceName. Inputs & Outputs Configure a headstage-64 onboard electrical stimulator. This will schedule configuration actions to be applied by a StartAcquisition instance prior to data acquisition. A sequence of ContextTask instances that holds configuration actions. The original sequence modified by adding additional configuration actions required to configure a headstage-64 onboard electrical stimulator. Properties Property Type Description DeviceName configuration string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. For instance, it can be used to link configuration operators to data IO operators within a workflow. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for software communication. DeviceAddress configuration uint Gets or sets the device address. This is a fully-qualified numerical hardware address of a device within the device table produced by an Open Neuro Interface (ONI) compliant acquisition system. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for hardware communication. DeviceType Type Gets or sets the device identity. This type provides a device identity to each device within the device table produced by an Open Neuro Interface (ONI) compliant acquisition system."
  },
  "api/OpenEphys.Onix1.ConfigureHeadstage64OpticalStimulator.html": {
    "href": "api/OpenEphys.Onix1.ConfigureHeadstage64OpticalStimulator.html",
    "title": "Class ConfigureHeadstage64OpticalStimulator",
    "keywords": "TIP This is a device configuration operator. Aggregate configuration operators are recommended in lieu of device configuration operators for interfacing with Open Ephys Onix hardware. ConfigureHeadstage64OpticalStimulator sink Operator Configures a headstage-64 dual-channel optical stimulator. This configuration operator can be linked to a data IO operator, such as Headstage64OpticalStimulatorTrigger, using a shared DeviceName. Inputs & Outputs Configure a headstage-64 dual-channel optical stimulator. This will schedule configuration actions to be applied by a StartAcquisition instance prior to data acquisition. A sequence of ContextTask instances that holds configuration actions. The original sequence modified by adding additional configuration actions required to configure a headstage-64 dual-channel optical stimulator. Properties Property Type Description DeviceName configuration string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. For instance, it can be used to link configuration operators to data IO operators within a workflow. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for software communication. DeviceAddress configuration uint Gets or sets the device address. This is a fully-qualified numerical hardware address of a device within the device table produced by an Open Neuro Interface (ONI) compliant acquisition system. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for hardware communication. DeviceType Type Gets or sets the device identity. This type provides a device identity to each device within the device table produced by an Open Neuro Interface (ONI) compliant acquisition system."
  },
  "api/OpenEphys.Onix1.ConfigureHeadstageNric1384.html": {
    "href": "api/OpenEphys.Onix1.ConfigureHeadstageNric1384.html",
    "title": "Class ConfigureHeadstageNric1384",
    "keywords": "ConfigureHeadstageNric1384 sink Operator Configures a Nric1384 headstage on the specified port. The Nric1384 Headstage is a 2.5g serialized, multifunction headstage built around the IMEC Nric1384 bioacquisition chip and designed to function with passive probes of the user's choosing (e.g. silicon probe arrays, high-density tetrode drives, etc). It provides the following features: 384 analog ephys channels sampled at 30 kHz per channel and exposed via an array of 12x ultra-high density Molex 203390-0323 quad-row connectors. A BNO055 9-axis IMU for real-time, 3D orientation tracking at 100 Hz. Two TS4231 light to digital converters for real-time, 3D position tracking with HTC Vive base stations. A single electrical stimulator (current controlled, +/-15V compliance, automatic electrode discharge). Inputs & Outputs Configure all devices in the device group. This will schedule configuration actions to be applied by a StartAcquisition instance prior to data acquisition. A sequence of ContextTask instances that hold configuration actions. The original sequence modified by adding additional configuration actions required to configure all the devices in the device group. Properties Configuration These are properties of the aggregate operator: Property Type Description Port configuration PortName Gets or sets the port. The port is the physical connection to the ONIX breakout board and must be specified prior to operation. PortA = 1 PortB = 2 PortVoltage configuration double? Gets or sets the port voltage. If defined, it will override automated voltage discovery and apply the specified voltage to the headstage. If left blank, an automated headstage detection algorithm will attempt to communicate with the headstage and apply an appropriate voltage for stable operation. Because ONIX allows any coaxial tether to be used, some of which are thin enough to result in a significant voltage drop, its may be required to manually specify the port voltage. Warning: This device requires 3.8V to 5.5V for proper operation. Voltages higher than 5.5V can damage the headstage. Name configuration string Gets or sets a unique device group name. A human-readable identifier that is used as a prefix for the DeviceName of each device in the the group. Devices Bno055 Bno055 is a ConfigureBno055 operator encapsulated by the ConfigureHeadstageNric1384 operator with the following properties: Property Type Description Enable configuration bool Gets or sets the device enable state. If set to true, a Bno055Data instance that is linked to this configuration will produce data. If set to false, it will not produce data. Nric1384 Nric1384 is a ConfigureNric1384 operator encapsulated by the ConfigureHeadstageNric1384 operator with the following properties: Property Type Description AdcCalibrationFile configuration string Gets or sets the path to the ADC calibration file. Each chip must be provided with an ADC calibration file that contains chip-specific hardware settings that is created by IMEC during factory calibration. These files are used to set internal bias currents, correct for ADC nonlinearities, correct ADC-zero crossing non-monotonicities, etc. Using the correct calibration file is mandatory for the chip to operate correctly. Calibration files are chip-specific and not interchangeable across chips. Calibration files must contain the serial number of the corresponding chip on their first line of text. If you have lost track of a calibration file for your chip, email IMEC at neuropixels.info@imec.be with the chip serial number to retrieve a new copy. Enable configuration bool Gets or sets the device enable state. If set to true, Nric1384Data will produce data. If set to false, Nric1384Data will not produce data. GainCalibrationFile configuration string Gets or sets the path to the gain calibration file. Each chip is linked to a gain calibration file that contains gain adjustments determined by IMEC during factory testing. Electrode voltages are scaled using these values to ensure they can be accurately compared across chips. Therefore, using the correct gain calibration file is mandatory to create standardized recordings. Calibration files are chip-specific and not interchangeable across chips. Calibration files must contain the serial number of the corresponding chip on their first line of text. If you have lost track of a calibration file for your chip, email IMEC at neuropixels.info@imec.be with the chip serial number to retrieve a new copy. LfpAmplifierGain configuration NeuropixelsV1Gain Gets or sets the amplifier gain for the LFP-band. The LFP band is from 0.5 to 500 Hz. Gain50 = 0 Gain125 = 1 Gain250 = 2 Gain500 = 3 Gain1000 = 4 Gain1500 = 5 Gain2000 = 6 Gain3000 = 7 SpikeAmplifierGain configuration NeuropixelsV1Gain Gets or sets the amplifier gain for the spike-band. The spike-band is from DC to 10 kHz if SpikeFilter is set to false, while the spike-band is from 300 Hz to 10 kHz if SpikeFilter is set to true. Gain50 = 0 Gain125 = 1 Gain250 = 2 Gain500 = 3 Gain1000 = 4 Gain1500 = 5 Gain2000 = 6 Gain3000 = 7 SpikeFilter configuration bool Gets or sets the state of the spike-band filter. If set to true, the spike-band has a 300 Hz high-pass filter which will be activated. If set to false, the high-pass filter will not to be activated."
  },
  "api/OpenEphys.Onix1.ConfigureHeadstageRhs2116.html": {
    "href": "api/OpenEphys.Onix1.ConfigureHeadstageRhs2116.html",
    "title": "Class ConfigureHeadstageRhs2116",
    "keywords": "ConfigureHeadstageRhs2116 sink Operator Configures an ONIX Rhs2116 Headstage on the specified port. The Rhs2116 Headstage is a serialized headstage with 32 bi-directional channels that are independently configurable to record electrophysiological signals or deliver electrical stimuli. The Rhs2116 Headstage can be used with passive probes (e.g. silicon arrays, EEG/ECOG arrays, etc) using a 36-Channel Omnetics EIB. It provides the following features: Two, synchronized Rhs2116 ICs for a combined 32 bidirectional ephys channels. Real-time control of stimulation sequences. Real-time control of filter settings and artifact recovery parameters. ~1 millisecond active stimulus artifact recovery. Max stimulator current: 2.55mA @ +/-7V compliance. Sample rate: 30193.2367 Hz. Stimulus active and stimulus trigger pins. On-board Lattice Crosslink FPGA for real-time data arbitration. Inputs & Outputs Configure all devices in the device group. This will schedule configuration actions to be applied by a StartAcquisition instance prior to data acquisition. A sequence of ContextTask instances that hold configuration actions. The original sequence modified by adding additional configuration actions required to configure all the devices in the device group. Properties Configuration These are properties of the aggregate operator: Property Type Description Port configuration PortName Gets or sets the port. The port is the physical connection to the ONIX breakout board and must be specified prior to operation. PortA = 1 PortB = 2 PortVoltage configuration double? Gets or sets the port voltage override. If defined, it will override automated voltage discovery and apply the specified voltage to the headstage. If left blank, an automated headstage detection algorithm will attempt to communicate with the headstage and apply an appropriate voltage for stable operation. Because ONIX allows any coaxial tether to be used, some of which are thin enough to result in a significant voltage drop, its may be required to manually specify the port voltage. Warning: this device requires 3.4V to 4.4V, measured at the headstage, for proper operation. Supplying higher voltages may result in damage. Name configuration string Gets or sets a unique device group name. A human-readable identifier that is used as a prefix for the DeviceName of each device in the the group. Devices Rhs2116Pair Rhs2116Pair is a ConfigureRhs2116Pair operator encapsulated by the ConfigureHeadstageRhs2116 operator with the following properties: Property Type Description AnalogHighCutoff acquisition Rhs2116AnalogHighCutoff Gets or sets the Rhs2116AnalogHighCutoff. Specifies the upper cutoff frequency of the pre-ADC amplifiers. High20000Hz = 0 High15000Hz = 1 High10000Hz = 2 High7500Hz = 3 High5000Hz = 4 High3000Hz = 5 High2500Hz = 6 High2000Hz = 7 High1500Hz = 8 High1000Hz = 9 High750Hz = 10 High500Hz = 11 High300Hz = 12 High250Hz = 13 High200Hz = 14 High150Hz = 15 High100Hz = 16 AnalogLowCutoff acquisition Rhs2116AnalogLowCutoff Gets or sets the Rhs2116AnalogLowCutoff. Specifies the lower cutoff frequency of the pre-ADC amplifiers. Low1000Hz = 0 Low500Hz = 1 Low300Hz = 2 Low250Hz = 3 Low200Hz = 4 Low150Hz = 5 Low100Hz = 6 Low75Hz = 7 Low50Hz = 8 Low30Hz = 9 Low25Hz = 10 Low20Hz = 11 Low15Hz = 12 Low10Hz = 13 Low7500mHz = 14 Low5000mHz = 15 Low3090mHz = 16 Low2500mHz = 17 Low2000mHz = 18 Low1500mHz = 19 Low1000mHz = 20 Low750mHz = 21 Low500mHz = 22 Low300mHz = 23 Low250mHz = 24 Low100mHz = 25 AnalogLowCutoffRecovery acquisition Rhs2116AnalogLowCutoff Gets or sets the Rhs2116AnalogLowCutoff directly after stimulation occurs. Specifies the lower cutoff frequency of the pre-ADC amplifiers during stimulus recovery. Note that this is only active for a short period of time, and reverts back to AnalogLowCutoff. Low1000Hz = 0 Low500Hz = 1 Low300Hz = 2 Low250Hz = 3 Low200Hz = 4 Low150Hz = 5 Low100Hz = 6 Low75Hz = 7 Low50Hz = 8 Low30Hz = 9 Low25Hz = 10 Low20Hz = 11 Low15Hz = 12 Low10Hz = 13 Low7500mHz = 14 Low5000mHz = 15 Low3090mHz = 16 Low2500mHz = 17 Low2000mHz = 18 Low1500mHz = 19 Low1000mHz = 20 Low750mHz = 21 Low500mHz = 22 Low300mHz = 23 Low250mHz = 24 Low100mHz = 25 DspCutoff configuration Rhs2116DspCutoff Gets or sets the Rhs2116DspCutoff value. Specifies the cutoff frequency for the DSP high-pass filter used for amplifier offset removal. Differential = 0 Dsp3309Hz = 1 Dsp1374Hz = 2 Dsp638Hz = 3 Dsp308Hz = 4 Dsp152Hz = 5 Dsp75Hz = 6 Dsp37Hz = 7 Dsp19Hz = 8 Dsp9336mHz = 9 Dsp4665mHz = 10 Dsp2332mHz = 11 Dsp1166mHz = 12 Dsp583mHz = 13 Dsp291mHz = 14 Dsp146mHz = 15 Off = 16 Enable configuration bool Gets or sets the device enable state. If set to true, Rhs2116Data will produce data. If set to false, Rhs2116Data will not produce data. StimulusTrigger StimulusTrigger is a ConfigureRhs2116Trigger operator encapsulated by the ConfigureHeadstageRhs2116 operator with the following properties: Property Type Description ProbeGroup configuration Rhs2116ProbeGroup Gets or sets the Rhs2116ProbeGroup channel configuration. StimulusSequence acquisition Rhs2116StimulusSequencePair Gets or sets the stimulus sequence. TriggerSource configuration Rhs2116TriggerSource Gets or sets the trigger source. If set to Local, respect local triggers (e.g. via GPIO or TRIGGER register) and broadcast via sync pin. If multiple chips are connected to the SYNC pin, then this device becomes a transmitter to trigger stimulation sequences on other RHS2116 Trigger devices with TRIGGERSOURCE = 0x1 (receiver). If set to External, only respect triggers received from sync pin. Local = 0 External = 1"
  },
  "api/OpenEphys.Onix1.ConfigureHeartbeat.html": {
    "href": "api/OpenEphys.Onix1.ConfigureHeartbeat.html",
    "title": "Class ConfigureHeartbeat",
    "keywords": "TIP This is a device configuration operator. Aggregate configuration operators are recommended in lieu of device configuration operators for interfacing with Open Ephys Onix hardware. ConfigureHeartbeat sink Operator Configures a heartbeat device. This configuration operator can be linked to a data IO operator, such as HeartbeatData, using a shared DeviceName. Inputs & Outputs Configures a heartbeat device. This will schedule configuration actions to be applied by a StartAcquisition instance prior to data acquisition. A sequence of ContextTask instances that holds configuration actions. The original sequence modified by adding additional configuration actions required to configure a heartbeat device./> Properties Property Type Description BeatsPerSecond acquisition uint Gets or sets the rate at which beats are produced in Hz. If set to true, a HeartbeatData instance that is linked to this configuration will produce data. If set to false, it will not produce data. Enable configuration bool Gets or sets the device enable state. If set to true, a HeartbeatData instance that is linked to this configuration will produce data. If set to false, it will not produce data. DeviceName configuration string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. For instance, it can be used to link configuration operators to data IO operators within a workflow. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for software communication. DeviceAddress configuration uint Gets or sets the device address. This is a fully-qualified numerical hardware address of a device within the device table produced by an Open Neuro Interface (ONI) compliant acquisition system. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for hardware communication. DeviceType Type Gets or sets the device identity. This type provides a device identity to each device within the device table produced by an Open Neuro Interface (ONI) compliant acquisition system."
  },
  "api/OpenEphys.Onix1.ConfigureLoadTester.html": {
    "href": "api/OpenEphys.Onix1.ConfigureLoadTester.html",
    "title": "Class ConfigureLoadTester",
    "keywords": "TIP This is a device configuration operator. Aggregate configuration operators are recommended in lieu of device configuration operators for interfacing with Open Ephys Onix hardware. ConfigureLoadTester sink Operator Configures a load tester device. This configuration operator can be linked to a data IO operator, such as LoadTesterData, using a shared DeviceName. The load tester device can be configured to produce data at user-settable size and rate to stress test various communication links and test closed-loop response latency. Inputs & Outputs Configures a load testing device. This will schedule configuration actions to be applied by a StartAcquisition instance prior to data acquisition. A sequence of ContextTask instances that hold configuration actions. The original sequence modified by adding additional configuration actions required to configure a load testing device. Properties Property Type Description Enable configuration bool Gets or sets a value specifying whether the load testing device is enabled. FramesPerSecond acquisition uint Gets or sets a value specifying the rate at which frames are produced, in Hz. ReceivedWords configuration uint Gets or sets the number of repetitions of the 16-bit unsigned integer 42 sent with each read-frame. TransmittedWords configuration uint Gets or sets the number of repetitions of the 32-bit integer 42 sent with each write frame. DeviceName configuration string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. For instance, it can be used to link configuration operators to data IO operators within a workflow. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for software communication. DeviceAddress configuration uint Gets or sets the device address. This is a fully-qualified numerical hardware address of a device within the device table produced by an Open Neuro Interface (ONI) compliant acquisition system. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for hardware communication. DeviceType Type Gets or sets the device identity. This type provides a device identity to each device within the device table produced by an Open Neuro Interface (ONI) compliant acquisition system."
  },
  "api/OpenEphys.Onix1.ConfigureMemoryMonitor.html": {
    "href": "api/OpenEphys.Onix1.ConfigureMemoryMonitor.html",
    "title": "Class ConfigureMemoryMonitor",
    "keywords": "TIP This is a device configuration operator. Aggregate configuration operators are recommended in lieu of device configuration operators for interfacing with Open Ephys Onix hardware. ConfigureMemoryMonitor sink Operator Configures a hardware memory monitor. This configuration operator can be linked to a data IO operator, such as MemoryMonitorData, using a shared DeviceName.The memory monitor produces periodic snapshots of the system's first in, first out (FIFO) data buffer. This can be useful for: Ensuring that data is being read by the host PC quickly enough to prevent real-time delays or overflows. In the case that the PC is not keeping up with data collection, FIFO memory use will increase monotonically. Tuning the value of ReadSize to optimize real-time performance. For optimal real-time performance, ReadSize should be as small as possible and the FIFO should be bypassed (memory usage should remain at 0). However, these requirements are in conflict. The memory monitor provides a way to find the minimal value of value of ReadSize that does not result in excessive FIFO data buffering. This tradeoff will depend on the bandwidth of data being acquired, the performance of the host PC, and downstream real-time processing. Inputs & Outputs Configures a memory monitor device. This will schedule configuration actions to be applied by a StartAcquisition instance prior to data acquisition. A sequence of ContextTask instances that holds configuration actions. The original sequence modified by adding additional configuration actions required to configure a memory monitor device. Properties Property Type Description Enable configuration bool Gets or sets the device enable state. If set to true, MemoryMonitorData will produce data. If set to false, MemoryMonitorData will not produce data. SamplesPerSecond configuration uint Gets or sets the frequency at which memory use is recorded in Hz. DeviceName configuration string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. For instance, it can be used to link configuration operators to data IO operators within a workflow. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for software communication. DeviceAddress configuration uint Gets or sets the device address. This is a fully-qualified numerical hardware address of a device within the device table produced by an Open Neuro Interface (ONI) compliant acquisition system. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for hardware communication. DeviceType Type Gets or sets the device identity. This type provides a device identity to each device within the device table produced by an Open Neuro Interface (ONI) compliant acquisition system."
  },
  "api/OpenEphys.Onix1.ConfigureNeuropixelsV1e.html": {
    "href": "api/OpenEphys.Onix1.ConfigureNeuropixelsV1e.html",
    "title": "Class ConfigureNeuropixelsV1e",
    "keywords": "TIP This is a device configuration operator. Aggregate configuration operators are recommended in lieu of device configuration operators for interfacing with Open Ephys Onix hardware. ConfigureNeuropixelsV1e sink Operator Configures a NeuropixelsV1 device attached to an ONIX NeuropixelsV1e headstage This configuration operator can be linked to a data IO operator, such as NeuropixelsV1eData, using a shared DeviceName. Inputs & Outputs Configures a NeuropixelsV1e device. This will schedule configuration actions to be applied by a StartAcquisition node prior to data acquisition. A sequence of ContextTask that holds all configuration actions. The original sequence with the side effect of an additional configuration action to configure a NeuropixelsV1e device. Properties Property Type Description AdcCalibrationFile configuration string Gets or sets the path to the ADC calibration file. Each probe must be provided with an ADC calibration file that contains probe-specific hardware settings that is created by IMEC during factory calibration. These files are used to set internal bias currents, correct for ADC nonlinearities, correct ADC-zero crossing non-monotonicities, etc. Using the correct calibration file is mandatory for the probe to operate correctly. Calibration files are probe-specific and not interchangeable across probes. Calibration files must contain the serial number of the corresponding probe on their first line of text. If you have lost track of a calibration file for your probe, email IMEC at neuropixels.info@imec.be with the probe serial number to retrieve a new copy. Enable configuration bool Gets or sets the device enable state. If set to true, NeuropixelsV1eData will produce data. If set to false, NeuropixelsV1eData will not produce data. EnableLed configuration bool Gets or sets the LED enable state. If true, the headstage LED will turn on during data acquisition. If false, the LED will not turn on. GainCalibrationFile configuration string Gets or sets the path to the gain calibration file. Each probe is linked to a gain calibration file that contains gain adjustments determined by IMEC during factory testing. Electrode voltages are scaled using these values to ensure they can be accurately compared across probes. Therefore, using the correct gain calibration file is mandatory to create standardized recordings. Calibration files are probe-specific and not interchangeable across probes. Calibration files must contain the serial number of the corresponding probe on their first line of text. If you have lost track of a calibration file for your probe, email IMEC at neuropixels.info@imec.be with the probe serial number to retrieve a new copy. ProbeConfiguration configuration NeuropixelsV1ProbeConfiguration Gets or sets the NeuropixelsV1 probe configuration. DeviceName configuration string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. For instance, it can be used to link configuration operators to data IO operators within a workflow. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for software communication. DeviceAddress configuration uint Gets or sets the device address. This is a fully-qualified numerical hardware address of a device within the device table produced by an Open Neuro Interface (ONI) compliant acquisition system. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for hardware communication. DeviceType Type Gets or sets the device identity. This type provides a device identity to each device within the device table produced by an Open Neuro Interface (ONI) compliant acquisition system."
  },
  "api/OpenEphys.Onix1.ConfigureNeuropixelsV1eHeadstage.html": {
    "href": "api/OpenEphys.Onix1.ConfigureNeuropixelsV1eHeadstage.html",
    "title": "Class ConfigureNeuropixelsV1eHeadstage",
    "keywords": "ConfigureNeuropixelsV1eHeadstage sink Operator Configures a NeuropixelsV1e headstage on the specified port. The NeuropixelsV1e Headstage is a 0.68g serialized, multifunction headstage designed to function with IMEC Neuropixels V1 probes. It provides the following features: Support for a single IMEC Neuropixels 1.0 probe that features: A single 1 cm long shank probe with a 70 x 24 µm shank cross-section. 960-electrode low-impedance TiN electrodes. 384 parallel, dual-band (AP, LFP), low-noise recording channels. A BNO055 9-axis IMU for real-time, 3D orientation tracking. Inputs & Outputs Configure all devices in the device group. This will schedule configuration actions to be applied by a StartAcquisition instance prior to data acquisition. A sequence of ContextTask instances that hold configuration actions. The original sequence modified by adding additional configuration actions required to configure all the devices in the device group. Properties Configuration These are properties of the aggregate operator: Property Type Description Port configuration PortName Gets or sets the port. The port is the physical connection to the ONIX breakout board and must be specified prior to operation. PortA = 1 PortB = 2 PortVoltage configuration double? Gets or sets the port voltage. If a port voltage is defined this will override the automated voltage discovery and applies the specified voltage to the headstage. To enable automated voltage discovery, leave this field empty. Warning: This device requires 3.8V to 5.0V, measured at the headstage, for proper operation. Voltages higher than 5.0V can damage the headstage. Name configuration string Gets or sets a unique device group name. A human-readable identifier that is used as a prefix for the DeviceName of each device in the the group. Devices Bno055 Bno055 is a ConfigurePolledBno055 operator encapsulated by the ConfigureNeuropixelsV1eHeadstage operator with the following properties: Property Type Description AxisMap configuration Bno055AxisMap Gets or sets the axis map that will be applied during configuration. This value can be changed to compensate for the Bno055's mounting orientation. Specifically, this value can be set to rotate the Bno055's coordinate system compared to the default orientation presented on page 24 of the Bno055 datasheet. XYZ = 36 XZY = 24 YXZ = 33 YZX = 9 ZXY = 18 ZYX = 6 AxisSign configuration Bno055AxisSign Gets or sets the axis sign that will be applied during configuration. This value can be changed to compensate for the Bno055's mounting orientation. Specifically, this value can be set to mirror specific axes in the Bno055's coordinate system compared to the default orientation presented on page 24 of the Bno055 datasheet. Default = 0 MirrorZ = 1 MirrorY = 2 MirrorX = 4 Enable configuration bool Gets or sets a value specifying whether the Bno055 device is enabled. If set to true, PolledBno055Data will produce data. If set to false, PolledBno055Data will not produce data. NeuropixelsV1e NeuropixelsV1e is a ConfigureNeuropixelsV1e operator encapsulated by the ConfigureNeuropixelsV1eHeadstage operator with the following properties: Property Type Description AdcCalibrationFile configuration string Gets or sets the path to the ADC calibration file. Each probe must be provided with an ADC calibration file that contains probe-specific hardware settings that is created by IMEC during factory calibration. These files are used to set internal bias currents, correct for ADC nonlinearities, correct ADC-zero crossing non-monotonicities, etc. Using the correct calibration file is mandatory for the probe to operate correctly. Calibration files are probe-specific and not interchangeable across probes. Calibration files must contain the serial number of the corresponding probe on their first line of text. If you have lost track of a calibration file for your probe, email IMEC at neuropixels.info@imec.be with the probe serial number to retrieve a new copy. Enable configuration bool Gets or sets the device enable state. If set to true, NeuropixelsV1eData will produce data. If set to false, NeuropixelsV1eData will not produce data. EnableLed configuration bool Gets or sets the LED enable state. If true, the headstage LED will turn on during data acquisition. If false, the LED will not turn on. GainCalibrationFile configuration string Gets or sets the path to the gain calibration file. Each probe is linked to a gain calibration file that contains gain adjustments determined by IMEC during factory testing. Electrode voltages are scaled using these values to ensure they can be accurately compared across probes. Therefore, using the correct gain calibration file is mandatory to create standardized recordings. Calibration files are probe-specific and not interchangeable across probes. Calibration files must contain the serial number of the corresponding probe on their first line of text. If you have lost track of a calibration file for your probe, email IMEC at neuropixels.info@imec.be with the probe serial number to retrieve a new copy. ProbeConfiguration configuration NeuropixelsV1ProbeConfiguration Gets or sets the NeuropixelsV1 probe configuration."
  },
  "api/OpenEphys.Onix1.ConfigureNeuropixelsV1f.html": {
    "href": "api/OpenEphys.Onix1.ConfigureNeuropixelsV1f.html",
    "title": "Class ConfigureNeuropixelsV1f",
    "keywords": "TIP This is a device configuration operator. Aggregate configuration operators are recommended in lieu of device configuration operators for interfacing with Open Ephys Onix hardware. ConfigureNeuropixelsV1f sink Operator Configures a NeuropixelsV1 device attached to an ONIX NeuropixelsV1f headstage. This configuration operator can be linked to a data IO operator, such as NeuropixelsV1fData, using a shared DeviceName. Inputs & Outputs Configures a NeuropixelsV1 device on an ONIX NeuropixelsV1f headstage. This will schedule configuration actions to be applied by a StartAcquisition node prior to data acquisition. A sequence of ContextTask that holds all configuration actions. The original sequence with the side effect of an additional configuration action to configure a NeuropixelsV1 device. Properties Property Type Description AdcCalibrationFile configuration string Gets or sets the path to the ADC calibration file. Each probe must be provided with an ADC calibration file that contains probe-specific hardware settings that is created by IMEC during factory calibration. These files are used to set internal bias currents, correct for ADC nonlinearities, correct ADC-zero crossing non-monotonicities, etc. Using the correct calibration file is mandatory for the probe to operate correctly. Calibration files are probe-specific and not interchangeable across probes. Calibration files must contain the serial number of the corresponding probe on their first line of text. If you have lost track of a calibration file for your probe, email IMEC at neuropixels.info@imec.be with the probe serial number to retrieve a new copy. Enable configuration bool Gets or sets the device enable state. If set to true, NeuropixelsV1fData will produce data. If set to false, NeuropixelsV1fData will not produce data. GainCalibrationFile configuration string Gets or sets the path to the gain calibration file. Each probe is linked to a gain calibration file that contains gain adjustments determined by IMEC during factory testing. Electrode voltages are scaled using these values to ensure they can be accurately compared across probes. Therefore, using the correct gain calibration file is mandatory to create standardized recordings. Calibration files are probe-specific and not interchangeable across probes. Calibration files must contain the serial number of the corresponding probe on their first line of text. If you have lost track of a calibration file for your probe, email IMEC at neuropixels.info@imec.be with the probe serial number to retrieve a new copy. ProbeConfiguration configuration NeuropixelsV1ProbeConfiguration Gets or sets the NeuropixelsV1 probe configuration. DeviceName configuration string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. For instance, it can be used to link configuration operators to data IO operators within a workflow. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for software communication. DeviceAddress configuration uint Gets or sets the device address. This is a fully-qualified numerical hardware address of a device within the device table produced by an Open Neuro Interface (ONI) compliant acquisition system. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for hardware communication. DeviceType Type Gets or sets the device identity. This type provides a device identity to each device within the device table produced by an Open Neuro Interface (ONI) compliant acquisition system."
  },
  "api/OpenEphys.Onix1.ConfigureNeuropixelsV1fHeadstage.html": {
    "href": "api/OpenEphys.Onix1.ConfigureNeuropixelsV1fHeadstage.html",
    "title": "Class ConfigureNeuropixelsV1fHeadstage",
    "keywords": "ConfigureNeuropixelsV1fHeadstage sink Operator Configures a NeuropixelsV1f headstage on the specified port. The NeuropixelsVf Headstage is a 1g serialized, multifunction headstage designed to function with IMEC Neuropixels V1 probes. It provides the following features: Support for up to 2x IMEC Neuropixels 1.0 probes, each of which features: A single 1 cm long shank probe with a 70 x 24 µm shank cross-section. 960-electrode low-impedance TiN electrodes. 384 parallel, dual-band (AP, LFP), low-noise recording channels. A BNO055 9-axis IMU for real-time, 3D orientation tracking, updated at 100 Hz. Three TS4231 light to digital converters for real-time, 3D position tracking with HTC Vive base stations. Inputs & Outputs Configure all devices in the device group. This will schedule configuration actions to be applied by a StartAcquisition instance prior to data acquisition. A sequence of ContextTask instances that hold configuration actions. The original sequence modified by adding additional configuration actions required to configure all the devices in the device group. Properties Configuration These are properties of the aggregate operator: Property Type Description Port configuration PortName Gets or sets the port. The port is the physical connection to the ONIX breakout board and must be specified prior to operation. PortA = 1 PortB = 2 PortVoltage configuration double? Gets or sets the port voltage. If a port voltage is defined this will override the automated voltage discovery and applies the specified voltage to the headstage. To enable automated voltage discovery, leave this field empty. Warning: This device requires 4.5V to 5.5V, measured at the headstage, for proper operation. Voltages higher than 6.0V can damage the headstage. Name configuration string Gets or sets a unique device group name. A human-readable identifier that is used as a prefix for the DeviceName of each device in the the group. Devices Bno055 Bno055 is a ConfigureBno055 operator encapsulated by the ConfigureNeuropixelsV1fHeadstage operator with the following properties: Property Type Description Enable configuration bool Gets or sets the device enable state. If set to true, a Bno055Data instance that is linked to this configuration will produce data. If set to false, it will not produce data. NeuropixelsV1A NeuropixelsV1A is a ConfigureNeuropixelsV1f operator encapsulated by the ConfigureNeuropixelsV1fHeadstage operator with the following properties: Property Type Description AdcCalibrationFile configuration string Gets or sets the path to the ADC calibration file. Each probe must be provided with an ADC calibration file that contains probe-specific hardware settings that is created by IMEC during factory calibration. These files are used to set internal bias currents, correct for ADC nonlinearities, correct ADC-zero crossing non-monotonicities, etc. Using the correct calibration file is mandatory for the probe to operate correctly. Calibration files are probe-specific and not interchangeable across probes. Calibration files must contain the serial number of the corresponding probe on their first line of text. If you have lost track of a calibration file for your probe, email IMEC at neuropixels.info@imec.be with the probe serial number to retrieve a new copy. Enable configuration bool Gets or sets the device enable state. If set to true, NeuropixelsV1fData will produce data. If set to false, NeuropixelsV1fData will not produce data. GainCalibrationFile configuration string Gets or sets the path to the gain calibration file. Each probe is linked to a gain calibration file that contains gain adjustments determined by IMEC during factory testing. Electrode voltages are scaled using these values to ensure they can be accurately compared across probes. Therefore, using the correct gain calibration file is mandatory to create standardized recordings. Calibration files are probe-specific and not interchangeable across probes. Calibration files must contain the serial number of the corresponding probe on their first line of text. If you have lost track of a calibration file for your probe, email IMEC at neuropixels.info@imec.be with the probe serial number to retrieve a new copy. ProbeConfiguration configuration NeuropixelsV1ProbeConfiguration Gets or sets the NeuropixelsV1 probe configuration. NeuropixelsV1B NeuropixelsV1B is a ConfigureNeuropixelsV1f operator encapsulated by the ConfigureNeuropixelsV1fHeadstage operator with the following properties: Property Type Description AdcCalibrationFile configuration string Gets or sets the path to the ADC calibration file. Each probe must be provided with an ADC calibration file that contains probe-specific hardware settings that is created by IMEC during factory calibration. These files are used to set internal bias currents, correct for ADC nonlinearities, correct ADC-zero crossing non-monotonicities, etc. Using the correct calibration file is mandatory for the probe to operate correctly. Calibration files are probe-specific and not interchangeable across probes. Calibration files must contain the serial number of the corresponding probe on their first line of text. If you have lost track of a calibration file for your probe, email IMEC at neuropixels.info@imec.be with the probe serial number to retrieve a new copy. Enable configuration bool Gets or sets the device enable state. If set to true, NeuropixelsV1fData will produce data. If set to false, NeuropixelsV1fData will not produce data. GainCalibrationFile configuration string Gets or sets the path to the gain calibration file. Each probe is linked to a gain calibration file that contains gain adjustments determined by IMEC during factory testing. Electrode voltages are scaled using these values to ensure they can be accurately compared across probes. Therefore, using the correct gain calibration file is mandatory to create standardized recordings. Calibration files are probe-specific and not interchangeable across probes. Calibration files must contain the serial number of the corresponding probe on their first line of text. If you have lost track of a calibration file for your probe, email IMEC at neuropixels.info@imec.be with the probe serial number to retrieve a new copy. ProbeConfiguration configuration NeuropixelsV1ProbeConfiguration Gets or sets the NeuropixelsV1 probe configuration. TS4231 TS4231 is a ConfigureTS4231V1 operator encapsulated by the ConfigureNeuropixelsV1fHeadstage operator with the following properties: Property Type Description Enable configuration bool Gets or sets the device enable state. If set to true, a TS4231V1Data instance that is linked to this configuration will produce data. If set to false, it will not produce data."
  },
  "api/OpenEphys.Onix1.ConfigureNeuropixelsV2e.html": {
    "href": "api/OpenEphys.Onix1.ConfigureNeuropixelsV2e.html",
    "title": "Class ConfigureNeuropixelsV2e",
    "keywords": "TIP This is a device configuration operator. Aggregate configuration operators are recommended in lieu of device configuration operators for interfacing with Open Ephys Onix hardware. ConfigureNeuropixelsV2e sink Operator Configures a NeuropixelsV2e device. Inputs & Outputs Configures a NeuropixelsV2e device. This will schedule configuration actions to be applied by a StartAcquisition node prior to data acquisition. A sequence of ContextTask that holds all configuration actions. The original sequence with the side effect of an additional configuration action to configure a NeuropixelsV2e device. Properties Property Type Description Enable configuration bool Gets or sets the device enable state. If set to true, NeuropixelsV2eData will produce data. If set to false, NeuropixelsV2eData will not produce data. GainCalibrationFileA configuration string Gets or sets the path to the gain calibration file for Probe A. Each probe is linked to a gain calibration file that contains gain adjustments determined by IMEC during factory testing. Electrode voltages are scaled using these values to ensure they can be accurately compared across probes. Therefore, using the correct gain calibration file is mandatory to create standardized recordings. Calibration files are probe-specific and not interchangeable across probes. Calibration files must contain the serial number of the corresponding probe on their first line of text. If you have lost track of a calibration file for your probe, email IMEC at neuropixels.info@imec.be with the probe serial number to retrieve a new copy. GainCalibrationFileB configuration string Gets or sets the path to the gain calibration file for Probe B. Each probe is linked to a gain calibration file that contains gain adjustments determined by IMEC during factory testing. Electrode voltages are scaled using these values to ensure they can be accurately compared across probes. Therefore, using the correct gain calibration file is mandatory to create standardized recordings. Calibration files are probe-specific and not interchangeable across probes. Calibration files must contain the serial number of the corresponding probe on their first line of text. If you have lost track of a calibration file for your probe, email IMEC at neuropixels.info@imec.be with the probe serial number to retrieve a new copy. ProbeConfigurationA configuration NeuropixelsV2QuadShankProbeConfiguration Gets or sets the electrode configuration for Probe A. Configuration is accomplished using a GUI to aid in channel selection and relevant configuration properties. To open a probe configuration GUI, select the ellipses next the ProbeConfigurationA variable in the property pane, or double-click ConfigureNeuropixelsV2eHeadstage to configure both probes and the ConfigurePolledBno055 simultaneously. ProbeConfigurationB configuration NeuropixelsV2QuadShankProbeConfiguration Gets or sets the electrode configuration for Probe B. Configuration is accomplished using a GUI to aid in channel selection and relevant configuration properties. To open a probe configuration GUI, select the ellipses next the ProbeConfigurationB variable in the property pane, or double-click ConfigureNeuropixelsV2eHeadstage to configure both probes and the ConfigurePolledBno055 simultaneously. DeviceName configuration string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. For instance, it can be used to link configuration operators to data IO operators within a workflow. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for software communication. DeviceAddress configuration uint Gets or sets the device address. This is a fully-qualified numerical hardware address of a device within the device table produced by an Open Neuro Interface (ONI) compliant acquisition system. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for hardware communication. DeviceType Type Gets or sets the device identity. This type provides a device identity to each device within the device table produced by an Open Neuro Interface (ONI) compliant acquisition system."
  },
  "api/OpenEphys.Onix1.ConfigureNeuropixelsV2eBeta.html": {
    "href": "api/OpenEphys.Onix1.ConfigureNeuropixelsV2eBeta.html",
    "title": "Class ConfigureNeuropixelsV2eBeta",
    "keywords": "TIP This is a device configuration operator. Aggregate configuration operators are recommended in lieu of device configuration operators for interfacing with Open Ephys Onix hardware. ConfigureNeuropixelsV2eBeta sink Operator Configures a NeuropixelsV2eBeta device. This configuration operator can be linked to a data IO operator, such as NeuropixelsV2eData, using a shared DeviceName. Inputs & Outputs Configures a NeuropixelsV2eBeta device. This will schedule configuration actions to be applied by a StartAcquisition instance prior to data acquisition. A sequence of ContextTask instances that holds configuration actions. The original sequence modified by adding additional configuration actions required to configure a NeuropixelsV2eBeta device./> Properties Property Type Description Enable configuration bool Gets or sets the device enable state. If set to true, NeuropixelsV2eBetaData will produce data. If set to false, NeuropixelsV2eBetaData will not produce data. EnableLed configuration bool Gets or sets the LED enable state. If true, the headstage LED will turn on during data acquisition. If false, the LED will not turn on. GainCalibrationFileA configuration string Gets or sets the path to the gain calibration file for Probe A. Each probe is linked to a gain calibration file that contains gain adjustments determined by IMEC during factory testing. Electrode voltages are scaled using these values to ensure they can be accurately compared across probes. Therefore, using the correct gain calibration file is mandatory to create standardized recordings. Calibration files are probe-specific and not interchangeable across probes. Calibration files must contain the serial number of the corresponding probe on their first line of text. If you have lost track of a calibration file for your probe, email IMEC at neuropixels.info@imec.be with the probe serial number to retrieve a new copy. GainCalibrationFileB configuration string Gets or sets the path to the gain calibration file for Probe B. Each probe is linked to a gain calibration file that contains gain adjustments determined by IMEC during factory testing. Electrode voltages are scaled using these values to ensure they can be accurately compared across probes. Therefore, using the correct gain calibration file is mandatory to create standardized recordings. Calibration files are probe-specific and not interchangeable across probes. Calibration files must contain the serial number of the corresponding probe on their first line of text. If you have lost track of a calibration file for your probe, email IMEC at neuropixels.info@imec.be with the probe serial number to retrieve a new copy. ProbeConfigurationA configuration NeuropixelsV2QuadShankProbeConfiguration Gets or sets the electrode configuration for Probe A. Configuration is accomplished using a GUI to aid in channel selection and relevant configuration properties. To open a probe configuration GUI, select the ellipses next the ProbeConfigurationA variable in the property pane, or double-click ConfigureNeuropixelsV2eBetaHeadstage to configure both probes and the ConfigurePolledBno055 simultaneously. ProbeConfigurationB configuration NeuropixelsV2QuadShankProbeConfiguration Gets or sets the electrode configuration for Probe B. Configuration is accomplished using a GUI to aid in channel selection and relevant configuration properties. To open a probe configuration GUI, select the ellipses next the ProbeConfigurationB variable in the property pane, or double-click ConfigureNeuropixelsV2eBetaHeadstage to configure both probes and the ConfigurePolledBno055 simultaneously. DeviceName configuration string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. For instance, it can be used to link configuration operators to data IO operators within a workflow. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for software communication. DeviceAddress configuration uint Gets or sets the device address. This is a fully-qualified numerical hardware address of a device within the device table produced by an Open Neuro Interface (ONI) compliant acquisition system. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for hardware communication. DeviceType Type Gets or sets the device identity. This type provides a device identity to each device within the device table produced by an Open Neuro Interface (ONI) compliant acquisition system."
  },
  "api/OpenEphys.Onix1.ConfigureNeuropixelsV2eBetaHeadstage.html": {
    "href": "api/OpenEphys.Onix1.ConfigureNeuropixelsV2eBetaHeadstage.html",
    "title": "Class ConfigureNeuropixelsV2eBetaHeadstage",
    "keywords": "ConfigureNeuropixelsV2eBetaHeadstage sink Operator Configures a NeuropixelsV2eBeta headstage on the specified port. The NeuropixelsV2eBeta Headstage is a 0.64g serialized, multifunction headstage designed to function with IMEC Neuropixels V2Beta probes. It provides the following features: Support for dual IMEC Neuropixels 2.0-Beta probes, each of which features: 4x silicon shanks with a 70 x 24 µm cross-section. 1280 electrodes low-impedance TiN electrodes per shank. 384 parallel, full-band (AP, LFP), low-noise recording channels. A BNO055 9-axis IMU for real-time, 3D orientation tracking. Inputs & Outputs Configure all devices in the device group. This will schedule configuration actions to be applied by a StartAcquisition instance prior to data acquisition. A sequence of ContextTask instances that hold configuration actions. The original sequence modified by adding additional configuration actions required to configure all the devices in the device group. Properties Configuration These are properties of the aggregate operator: Property Type Description Port configuration PortName Gets or sets the port. The port is the physical connection to the ONIX breakout board and must be specified prior to operation. PortA = 1 PortB = 2 PortVoltage configuration double? Gets or sets the port voltage. If a port voltage is defined this will override the automated voltage discovery and applies the specified voltage to the headstage. To enable automated voltage discovery, leave this field empty. Warning: This device requires 3.0V to 5.0V for proper operation. Voltages higher than 5.0V can damage the headstage Name configuration string Gets or sets a unique device group name. A human-readable identifier that is used as a prefix for the DeviceName of each device in the the group. Devices Bno055 Bno055 is a ConfigurePolledBno055 operator encapsulated by the ConfigureNeuropixelsV2eBetaHeadstage operator with the following properties: Property Type Description AxisMap configuration Bno055AxisMap Gets or sets the axis map that will be applied during configuration. This value can be changed to compensate for the Bno055's mounting orientation. Specifically, this value can be set to rotate the Bno055's coordinate system compared to the default orientation presented on page 24 of the Bno055 datasheet. XYZ = 36 XZY = 24 YXZ = 33 YZX = 9 ZXY = 18 ZYX = 6 AxisSign configuration Bno055AxisSign Gets or sets the axis sign that will be applied during configuration. This value can be changed to compensate for the Bno055's mounting orientation. Specifically, this value can be set to mirror specific axes in the Bno055's coordinate system compared to the default orientation presented on page 24 of the Bno055 datasheet. Default = 0 MirrorZ = 1 MirrorY = 2 MirrorX = 4 Enable configuration bool Gets or sets a value specifying whether the Bno055 device is enabled. If set to true, PolledBno055Data will produce data. If set to false, PolledBno055Data will not produce data. NeuropixelsV2eBeta NeuropixelsV2eBeta is a ConfigureNeuropixelsV2eBeta operator encapsulated by the ConfigureNeuropixelsV2eBetaHeadstage operator with the following properties: Property Type Description Enable configuration bool Gets or sets the device enable state. If set to true, NeuropixelsV2eBetaData will produce data. If set to false, NeuropixelsV2eBetaData will not produce data. EnableLed configuration bool Gets or sets the LED enable state. If true, the headstage LED will turn on during data acquisition. If false, the LED will not turn on. GainCalibrationFileA configuration string Gets or sets the path to the gain calibration file for Probe A. Each probe is linked to a gain calibration file that contains gain adjustments determined by IMEC during factory testing. Electrode voltages are scaled using these values to ensure they can be accurately compared across probes. Therefore, using the correct gain calibration file is mandatory to create standardized recordings. Calibration files are probe-specific and not interchangeable across probes. Calibration files must contain the serial number of the corresponding probe on their first line of text. If you have lost track of a calibration file for your probe, email IMEC at neuropixels.info@imec.be with the probe serial number to retrieve a new copy. GainCalibrationFileB configuration string Gets or sets the path to the gain calibration file for Probe B. Each probe is linked to a gain calibration file that contains gain adjustments determined by IMEC during factory testing. Electrode voltages are scaled using these values to ensure they can be accurately compared across probes. Therefore, using the correct gain calibration file is mandatory to create standardized recordings. Calibration files are probe-specific and not interchangeable across probes. Calibration files must contain the serial number of the corresponding probe on their first line of text. If you have lost track of a calibration file for your probe, email IMEC at neuropixels.info@imec.be with the probe serial number to retrieve a new copy. ProbeConfigurationA configuration NeuropixelsV2QuadShankProbeConfiguration Gets or sets the electrode configuration for Probe A. Configuration is accomplished using a GUI to aid in channel selection and relevant configuration properties. To open a probe configuration GUI, select the ellipses next the ProbeConfigurationA variable in the property pane, or double-click ConfigureNeuropixelsV2eBetaHeadstage to configure both probes and the ConfigurePolledBno055 simultaneously. ProbeConfigurationB configuration NeuropixelsV2QuadShankProbeConfiguration Gets or sets the electrode configuration for Probe B. Configuration is accomplished using a GUI to aid in channel selection and relevant configuration properties. To open a probe configuration GUI, select the ellipses next the ProbeConfigurationB variable in the property pane, or double-click ConfigureNeuropixelsV2eBetaHeadstage to configure both probes and the ConfigurePolledBno055 simultaneously."
  },
  "api/OpenEphys.Onix1.ConfigureNeuropixelsV2eHeadstage.html": {
    "href": "api/OpenEphys.Onix1.ConfigureNeuropixelsV2eHeadstage.html",
    "title": "Class ConfigureNeuropixelsV2eHeadstage",
    "keywords": "ConfigureNeuropixelsV2eHeadstage sink Operator Configures a NeuropixelsV2e headstage on the specified port. The NeuropixelsV2e Headstage is a 0.64g serialized, multifunction headstage designed to function with IMEC Neuropixels V2 probes. It provides the following features: Support for dual IMEC Neuropixels 2.0 probes, each of which features: Either 1x or 4x silicon shanks with a 70 x 24 µm cross-section. 1280 electrodes low-impedance TiN electrodes per shank. 384 parallel, full-band (AP, LFP), low-noise recording channels. A BNO055 9-axis IMU for real-time, 3D orientation tracking. Inputs & Outputs Configure all devices in the device group. This will schedule configuration actions to be applied by a StartAcquisition instance prior to data acquisition. A sequence of ContextTask instances that hold configuration actions. The original sequence modified by adding additional configuration actions required to configure all the devices in the device group. Properties Configuration These are properties of the aggregate operator: Property Type Description Port configuration PortName Gets or sets the port. The port is the physical connection to the ONIX breakout board and must be specified prior to operation. PortA = 1 PortB = 2 PortVoltage configuration double? Gets or sets the port voltage. If a port voltage is defined this will override the automated voltage discovery and applies the specified voltage to the headstage. To enable automated voltage discovery, leave this field empty. Warning: This device requires 3.0V to 5.5V for proper operation. Voltages higher than 5.5V can damage the headstage Name configuration string Gets or sets a unique device group name. A human-readable identifier that is used as a prefix for the DeviceName of each device in the the group. Devices Bno055 Bno055 is a ConfigurePolledBno055 operator encapsulated by the ConfigureNeuropixelsV2eHeadstage operator with the following properties: Property Type Description AxisMap configuration Bno055AxisMap Gets or sets the axis map that will be applied during configuration. This value can be changed to compensate for the Bno055's mounting orientation. Specifically, this value can be set to rotate the Bno055's coordinate system compared to the default orientation presented on page 24 of the Bno055 datasheet. XYZ = 36 XZY = 24 YXZ = 33 YZX = 9 ZXY = 18 ZYX = 6 AxisSign configuration Bno055AxisSign Gets or sets the axis sign that will be applied during configuration. This value can be changed to compensate for the Bno055's mounting orientation. Specifically, this value can be set to mirror specific axes in the Bno055's coordinate system compared to the default orientation presented on page 24 of the Bno055 datasheet. Default = 0 MirrorZ = 1 MirrorY = 2 MirrorX = 4 Enable configuration bool Gets or sets a value specifying whether the Bno055 device is enabled. If set to true, PolledBno055Data will produce data. If set to false, PolledBno055Data will not produce data. NeuropixelsV2e NeuropixelsV2e is a ConfigureNeuropixelsV2e operator encapsulated by the ConfigureNeuropixelsV2eHeadstage operator with the following properties: Property Type Description Enable configuration bool Gets or sets the device enable state. If set to true, NeuropixelsV2eData will produce data. If set to false, NeuropixelsV2eData will not produce data. GainCalibrationFileA configuration string Gets or sets the path to the gain calibration file for Probe A. Each probe is linked to a gain calibration file that contains gain adjustments determined by IMEC during factory testing. Electrode voltages are scaled using these values to ensure they can be accurately compared across probes. Therefore, using the correct gain calibration file is mandatory to create standardized recordings. Calibration files are probe-specific and not interchangeable across probes. Calibration files must contain the serial number of the corresponding probe on their first line of text. If you have lost track of a calibration file for your probe, email IMEC at neuropixels.info@imec.be with the probe serial number to retrieve a new copy. GainCalibrationFileB configuration string Gets or sets the path to the gain calibration file for Probe B. Each probe is linked to a gain calibration file that contains gain adjustments determined by IMEC during factory testing. Electrode voltages are scaled using these values to ensure they can be accurately compared across probes. Therefore, using the correct gain calibration file is mandatory to create standardized recordings. Calibration files are probe-specific and not interchangeable across probes. Calibration files must contain the serial number of the corresponding probe on their first line of text. If you have lost track of a calibration file for your probe, email IMEC at neuropixels.info@imec.be with the probe serial number to retrieve a new copy. ProbeConfigurationA configuration NeuropixelsV2QuadShankProbeConfiguration Gets or sets the electrode configuration for Probe A. Configuration is accomplished using a GUI to aid in channel selection and relevant configuration properties. To open a probe configuration GUI, select the ellipses next the ProbeConfigurationA variable in the property pane, or double-click ConfigureNeuropixelsV2eHeadstage to configure both probes and the ConfigurePolledBno055 simultaneously. ProbeConfigurationB configuration NeuropixelsV2QuadShankProbeConfiguration Gets or sets the electrode configuration for Probe B. Configuration is accomplished using a GUI to aid in channel selection and relevant configuration properties. To open a probe configuration GUI, select the ellipses next the ProbeConfigurationB variable in the property pane, or double-click ConfigureNeuropixelsV2eHeadstage to configure both probes and the ConfigurePolledBno055 simultaneously."
  },
  "api/OpenEphys.Onix1.ConfigureNric1384.html": {
    "href": "api/OpenEphys.Onix1.ConfigureNric1384.html",
    "title": "Class ConfigureNric1384",
    "keywords": "TIP This is a device configuration operator. Aggregate configuration operators are recommended in lieu of device configuration operators for interfacing with Open Ephys Onix hardware. ConfigureNric1384 sink Operator Configures a Nric1384 bioacquisition chip. Inputs & Outputs Configures a Nric1384 bioacquisition device. This will schedule configuration actions to be applied by a StartAcquisition node prior to data acquisition. A sequence of ContextTask that holds all configuration actions. The original sequence with the side effect of an additional configuration action to configure a Nric1384 device. Properties Property Type Description AdcCalibrationFile configuration string Gets or sets the path to the ADC calibration file. Each chip must be provided with an ADC calibration file that contains chip-specific hardware settings that is created by IMEC during factory calibration. These files are used to set internal bias currents, correct for ADC nonlinearities, correct ADC-zero crossing non-monotonicities, etc. Using the correct calibration file is mandatory for the chip to operate correctly. Calibration files are chip-specific and not interchangeable across chips. Calibration files must contain the serial number of the corresponding chip on their first line of text. If you have lost track of a calibration file for your chip, email IMEC at neuropixels.info@imec.be with the chip serial number to retrieve a new copy. Enable configuration bool Gets or sets the device enable state. If set to true, Nric1384Data will produce data. If set to false, Nric1384Data will not produce data. GainCalibrationFile configuration string Gets or sets the path to the gain calibration file. Each chip is linked to a gain calibration file that contains gain adjustments determined by IMEC during factory testing. Electrode voltages are scaled using these values to ensure they can be accurately compared across chips. Therefore, using the correct gain calibration file is mandatory to create standardized recordings. Calibration files are chip-specific and not interchangeable across chips. Calibration files must contain the serial number of the corresponding chip on their first line of text. If you have lost track of a calibration file for your chip, email IMEC at neuropixels.info@imec.be with the chip serial number to retrieve a new copy. LfpAmplifierGain configuration NeuropixelsV1Gain Gets or sets the amplifier gain for the LFP-band. The LFP band is from 0.5 to 500 Hz. Gain50 = 0 Gain125 = 1 Gain250 = 2 Gain500 = 3 Gain1000 = 4 Gain1500 = 5 Gain2000 = 6 Gain3000 = 7 SpikeAmplifierGain configuration NeuropixelsV1Gain Gets or sets the amplifier gain for the spike-band. The spike-band is from DC to 10 kHz if SpikeFilter is set to false, while the spike-band is from 300 Hz to 10 kHz if SpikeFilter is set to true. Gain50 = 0 Gain125 = 1 Gain250 = 2 Gain500 = 3 Gain1000 = 4 Gain1500 = 5 Gain2000 = 6 Gain3000 = 7 SpikeFilter configuration bool Gets or sets the state of the spike-band filter. If set to true, the spike-band has a 300 Hz high-pass filter which will be activated. If set to false, the high-pass filter will not to be activated. DeviceName configuration string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. For instance, it can be used to link configuration operators to data IO operators within a workflow. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for software communication. DeviceAddress configuration uint Gets or sets the device address. This is a fully-qualified numerical hardware address of a device within the device table produced by an Open Neuro Interface (ONI) compliant acquisition system. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for hardware communication. DeviceType Type Gets or sets the device identity. This type provides a device identity to each device within the device table produced by an Open Neuro Interface (ONI) compliant acquisition system."
  },
  "api/OpenEphys.Onix1.ConfigureOutputClock.html": {
    "href": "api/OpenEphys.Onix1.ConfigureOutputClock.html",
    "title": "Class ConfigureOutputClock",
    "keywords": "TIP This is a device configuration operator. Aggregate configuration operators are recommended in lieu of device configuration operators for interfacing with Open Ephys Onix hardware. ConfigureOutputClock sink Operator Configures the ONIX breakout board's output clock. The output clock provides a 3.3V logic level, 50 Ohm output impedance, frequency divided copy of the Acquisition Clock that is used to generate Clock values for all data streams within an ONIX system. This clock runs at a user defined rate, duty cycle, and start delay. It can be used to drive external hardware or can be logged by external recording systems for post-hoc synchronization with ONIX data. Inputs & Outputs Configures a clock output. This will schedule configuration actions to be applied by a StartAcquisition instance prior to data acquisition. A sequence of ContextTask instances that holds configuration actions. The original sequence modified by adding additional configuration actions required to configure a clock output device./> Properties Property Type Description ClockGate acquisition bool Gets or sets a value specifying if the output clock is active. If set to true, the clock output will be connected to the clock output line. If set to false, the clock output line will be held low. This value can be toggled in real time to gate acquisition of external hardware. Delay configuration double Gets or sets the delay following acquisition commencement before the clock becomes active in seconds. Valid values are between 0 and and 3600 seconds. Setting to a value greater than 0 can be useful for ensuring data sources that are driven by the output clock start significantly after ONIX has begun acquisition for the purposes of ordering acquisition start times. The delay must be an integer multiple of the Acquisition Clock frequency. Therefore, the true delay cycle will be set to a value that is as close as possible to the requested setting while respecting this constraint. The value as actualized in hardware is reported by OutputClockData. DutyCycle configuration double Gets or sets the output clock duty cycle in percent. Valid values are between 10% and 90%. The output clock high and low times must each be an integer multiple of the Acquisition Clock frequency. Therefore, the true duty cycle will be set to a value that is as close as possible to the requested setting while respecting this constraint. The value as actualized in hardware is reported by OutputClockData. Frequency configuration double Gets or sets the output clock frequency in Hz. Valid values are between 0.1 Hz and 10 MHz. The output clock high and low times must each be an integer multiple of the Acquisition Clock frequency. Therefore, the true clock frequency will be set to a value that is as close as possible to the requested setting while respecting this constraint. The value as actualized in hardware is reported by OutputClockData. DeviceName configuration string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. For instance, it can be used to link configuration operators to data IO operators within a workflow. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for software communication. DeviceAddress configuration uint Gets or sets the device address. This is a fully-qualified numerical hardware address of a device within the device table produced by an Open Neuro Interface (ONI) compliant acquisition system. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for hardware communication. DeviceType Type Gets or sets the device identity. This type provides a device identity to each device within the device table produced by an Open Neuro Interface (ONI) compliant acquisition system."
  },
  "api/OpenEphys.Onix1.ConfigurePolledBno055.html": {
    "href": "api/OpenEphys.Onix1.ConfigurePolledBno055.html",
    "title": "Class ConfigurePolledBno055",
    "keywords": "TIP This is a device configuration operator. Aggregate configuration operators are recommended in lieu of device configuration operators for interfacing with Open Ephys Onix hardware. ConfigurePolledBno055 sink Operator Configures a Bosch Bno055 9-axis inertial measurement unit (IMU) that is polled by the host computer. This configuration operator can be linked to a data IO operator, such as PolledBno055Data, using a shared DeviceName. Inputs & Outputs Configures a PolledBno055 device. This will schedule configuration actions to be applied by a StartAcquisition node prior to data acquisition. A sequence of ContextTask that holds all configuration actions. The original sequence with the side effect of an additional configuration action to configure a PolledBno055 device. Properties Property Type Description AxisMap configuration Bno055AxisMap Gets or sets the axis map that will be applied during configuration. This value can be changed to compensate for the Bno055's mounting orientation. Specifically, this value can be set to rotate the Bno055's coordinate system compared to the default orientation presented on page 24 of the Bno055 datasheet. XYZ = 36 XZY = 24 YXZ = 33 YZX = 9 ZXY = 18 ZYX = 6 AxisSign configuration Bno055AxisSign Gets or sets the axis sign that will be applied during configuration. This value can be changed to compensate for the Bno055's mounting orientation. Specifically, this value can be set to mirror specific axes in the Bno055's coordinate system compared to the default orientation presented on page 24 of the Bno055 datasheet. Default = 0 MirrorZ = 1 MirrorY = 2 MirrorX = 4 Enable configuration bool Gets or sets a value specifying whether the Bno055 device is enabled. If set to true, PolledBno055Data will produce data. If set to false, PolledBno055Data will not produce data. DeviceName configuration string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. For instance, it can be used to link configuration operators to data IO operators within a workflow. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for software communication. DeviceAddress configuration uint Gets or sets the device address. This is a fully-qualified numerical hardware address of a device within the device table produced by an Open Neuro Interface (ONI) compliant acquisition system. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for hardware communication. DeviceType Type Gets or sets the device identity. This type provides a device identity to each device within the device table produced by an Open Neuro Interface (ONI) compliant acquisition system."
  },
  "api/OpenEphys.Onix1.ConfigureRhd2164.html": {
    "href": "api/OpenEphys.Onix1.ConfigureRhd2164.html",
    "title": "Class ConfigureRhd2164",
    "keywords": "TIP This is a device configuration operator. Aggregate configuration operators are recommended in lieu of device configuration operators for interfacing with Open Ephys Onix hardware. ConfigureRhd2164 sink Operator Configures an Intan Rhd2164 bioamplifier chip. This configuration operator can be linked to a data IO operator, such as Rhd2164Data, using a shared DeviceName. Inputs & Outputs Configures a Rhd2164 device. This will schedule configuration actions to be applied by a StartAcquisition instance prior to data acquisition. A sequence of ContextTask instances that holds configuration actions. The original sequence modified by adding additional configuration actions required to configure a Rhd2164 device. Properties Property Type Description AnalogHighCutoff configuration Rhd2164AnalogHighCutoff Gets or sets the high cutoff frequency of the analog (pre-ADC) bandpass filter. High20000Hz = 0 High15000Hz = 1 High10000Hz = 2 High7500Hz = 3 High5000Hz = 4 High3000Hz = 5 High2500Hz = 6 High2000Hz = 7 High1500Hz = 8 High1000Hz = 9 High750Hz = 10 High500Hz = 11 High300Hz = 12 High250Hz = 13 High200Hz = 14 High150Hz = 15 High100Hz = 16 AnalogLowCutoff configuration Rhd2164AnalogLowCutoff Gets or sets the low cutoff frequency of the analog (pre-ADC) bandpass filter. Low500Hz = 0 Low300Hz = 1 Low250Hz = 2 Low200Hz = 3 Low150Hz = 4 Low100Hz = 5 Low75Hz = 6 Low50Hz = 7 Low30Hz = 8 Low25Hz = 9 Low20Hz = 10 Low15Hz = 11 Low10Hz = 12 Low7500mHz = 13 Low5000mHz = 14 Low3000mHz = 15 Low2500mHz = 16 Low2000mHz = 17 Low1500mHz = 18 Low1000mHz = 19 Low750mHz = 20 Low500mHz = 21 Low300mHz = 22 Low250mHz = 23 Low100mHz = 24 DspCutoff configuration Rhd2164DspCutoff Gets or sets the cutoff frequency for the digital (post-ADC) high-pass filter used for amplifier offset removal. Differential = 0 Dsp3309Hz = 1 Dsp1374Hz = 2 Dsp638Hz = 3 Dsp308Hz = 4 Dsp152Hz = 5 Dsp75Hz = 6 Dsp37Hz = 7 Dsp19Hz = 8 Dsp9336mHz = 9 Dsp4665mHz = 10 Dsp2332mHz = 11 Dsp1166mHz = 12 Dsp583mHz = 13 Dsp291mHz = 14 Dsp146mHz = 15 Off = 16 Enable configuration bool Gets or sets the device enable state. If set to true, a Rhd2164Data instance that is linked to this configuration will produce data. If set to false, it will not produce data. DeviceName configuration string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. For instance, it can be used to link configuration operators to data IO operators within a workflow. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for software communication. DeviceAddress configuration uint Gets or sets the device address. This is a fully-qualified numerical hardware address of a device within the device table produced by an Open Neuro Interface (ONI) compliant acquisition system. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for hardware communication. DeviceType Type Gets or sets the device identity. This type provides a device identity to each device within the device table produced by an Open Neuro Interface (ONI) compliant acquisition system."
  },
  "api/OpenEphys.Onix1.ConfigureRhs2116.html": {
    "href": "api/OpenEphys.Onix1.ConfigureRhs2116.html",
    "title": "Class ConfigureRhs2116",
    "keywords": "TIP This is a device configuration operator. Aggregate configuration operators are recommended in lieu of device configuration operators for interfacing with Open Ephys Onix hardware. ConfigureRhs2116 sink Operator Configures an Intan Rhs2116 bioamplifier and stimulator chip. This configuration operator can be linked to a data IO operator, such as Rhs2116Data, using a shared DeviceName. Inputs & Outputs Configures an Rhs2116 device. This will schedule configuration actions to be applied by a StartAcquisition node prior to data acquisition. A sequence of ContextTask that holds all configuration actions. The original sequence with the side effect of an additional configuration action to configure an Rhs2116 device. Properties Property Type Description AnalogHighCutoff acquisition Rhs2116AnalogHighCutoff Gets or sets the Rhs2116AnalogHighCutoff. Specifies the upper cutoff frequency of the pre-ADC amplifiers. High20000Hz = 0 High15000Hz = 1 High10000Hz = 2 High7500Hz = 3 High5000Hz = 4 High3000Hz = 5 High2500Hz = 6 High2000Hz = 7 High1500Hz = 8 High1000Hz = 9 High750Hz = 10 High500Hz = 11 High300Hz = 12 High250Hz = 13 High200Hz = 14 High150Hz = 15 High100Hz = 16 AnalogLowCutoff acquisition Rhs2116AnalogLowCutoff Gets or sets the Rhs2116AnalogLowCutoff. Specifies the lower cutoff frequency of the pre-ADC amplifiers. Low1000Hz = 0 Low500Hz = 1 Low300Hz = 2 Low250Hz = 3 Low200Hz = 4 Low150Hz = 5 Low100Hz = 6 Low75Hz = 7 Low50Hz = 8 Low30Hz = 9 Low25Hz = 10 Low20Hz = 11 Low15Hz = 12 Low10Hz = 13 Low7500mHz = 14 Low5000mHz = 15 Low3090mHz = 16 Low2500mHz = 17 Low2000mHz = 18 Low1500mHz = 19 Low1000mHz = 20 Low750mHz = 21 Low500mHz = 22 Low300mHz = 23 Low250mHz = 24 Low100mHz = 25 AnalogLowCutoffRecovery acquisition Rhs2116AnalogLowCutoff Gets or sets the Rhs2116AnalogLowCutoff directly after stimulation occurs. Specifies the lower cutoff frequency of the pre-ADC amplifiers during stimulus recovery. Note that this is only active for a short period of time, and reverts back to AnalogLowCutoff. Low1000Hz = 0 Low500Hz = 1 Low300Hz = 2 Low250Hz = 3 Low200Hz = 4 Low150Hz = 5 Low100Hz = 6 Low75Hz = 7 Low50Hz = 8 Low30Hz = 9 Low25Hz = 10 Low20Hz = 11 Low15Hz = 12 Low10Hz = 13 Low7500mHz = 14 Low5000mHz = 15 Low3090mHz = 16 Low2500mHz = 17 Low2000mHz = 18 Low1500mHz = 19 Low1000mHz = 20 Low750mHz = 21 Low500mHz = 22 Low300mHz = 23 Low250mHz = 24 Low100mHz = 25 DspCutoff configuration Rhs2116DspCutoff Gets or sets the Rhs2116DspCutoff value. Specifies the cutoff frequency for the DSP high-pass filter used for amplifier offset removal. Differential = 0 Dsp3309Hz = 1 Dsp1374Hz = 2 Dsp638Hz = 3 Dsp308Hz = 4 Dsp152Hz = 5 Dsp75Hz = 6 Dsp37Hz = 7 Dsp19Hz = 8 Dsp9336mHz = 9 Dsp4665mHz = 10 Dsp2332mHz = 11 Dsp1166mHz = 12 Dsp583mHz = 13 Dsp291mHz = 14 Dsp146mHz = 15 Off = 16 Enable configuration bool Gets or sets the device enable state. If set to true, Rhs2116Data will produce data. If set to false, Rhs2116Data will not produce data. RespectExternalActiveStim acquisition bool Gets or sets if external stim is respected. If true, this device will apply AnalogLowCutoffRecovery if stimulation occurs via any Rhs2116 chip the same headstage or others that are connected using StimActive pin. If false, this device will only apply AnalogLowCutoffRecovery during its own stimuli. DeviceName configuration string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. For instance, it can be used to link configuration operators to data IO operators within a workflow. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for software communication. DeviceAddress configuration uint Gets or sets the device address. This is a fully-qualified numerical hardware address of a device within the device table produced by an Open Neuro Interface (ONI) compliant acquisition system. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for hardware communication. DeviceType Type Gets or sets the device identity. This type provides a device identity to each device within the device table produced by an Open Neuro Interface (ONI) compliant acquisition system."
  },
  "api/OpenEphys.Onix1.ConfigureRhs2116Pair.html": {
    "href": "api/OpenEphys.Onix1.ConfigureRhs2116Pair.html",
    "title": "Class ConfigureRhs2116Pair",
    "keywords": "TIP This is a device configuration operator. Aggregate configuration operators are recommended in lieu of device configuration operators for interfacing with Open Ephys Onix hardware. ConfigureRhs2116Pair sink Operator Configures a synchronized pair of Intan Rhs2116 bioamplifier and stimulator chips. This configuration operator can be linked to a data IO operator, such as Rhs2116Data, using a shared DeviceName. Inputs & Outputs Configures an Rhs2116Pair device. This will schedule configuration actions to be applied by a StartAcquisition node prior to data acquisition. A sequence of ContextTask that holds all configuration actions. The original sequence with the side effect of an additional configuration action to configure an Rhs2116Pair device. Properties Property Type Description AnalogHighCutoff acquisition Rhs2116AnalogHighCutoff Gets or sets the Rhs2116AnalogHighCutoff. Specifies the upper cutoff frequency of the pre-ADC amplifiers. High20000Hz = 0 High15000Hz = 1 High10000Hz = 2 High7500Hz = 3 High5000Hz = 4 High3000Hz = 5 High2500Hz = 6 High2000Hz = 7 High1500Hz = 8 High1000Hz = 9 High750Hz = 10 High500Hz = 11 High300Hz = 12 High250Hz = 13 High200Hz = 14 High150Hz = 15 High100Hz = 16 AnalogLowCutoff acquisition Rhs2116AnalogLowCutoff Gets or sets the Rhs2116AnalogLowCutoff. Specifies the lower cutoff frequency of the pre-ADC amplifiers. Low1000Hz = 0 Low500Hz = 1 Low300Hz = 2 Low250Hz = 3 Low200Hz = 4 Low150Hz = 5 Low100Hz = 6 Low75Hz = 7 Low50Hz = 8 Low30Hz = 9 Low25Hz = 10 Low20Hz = 11 Low15Hz = 12 Low10Hz = 13 Low7500mHz = 14 Low5000mHz = 15 Low3090mHz = 16 Low2500mHz = 17 Low2000mHz = 18 Low1500mHz = 19 Low1000mHz = 20 Low750mHz = 21 Low500mHz = 22 Low300mHz = 23 Low250mHz = 24 Low100mHz = 25 AnalogLowCutoffRecovery acquisition Rhs2116AnalogLowCutoff Gets or sets the Rhs2116AnalogLowCutoff directly after stimulation occurs. Specifies the lower cutoff frequency of the pre-ADC amplifiers during stimulus recovery. Note that this is only active for a short period of time, and reverts back to AnalogLowCutoff. Low1000Hz = 0 Low500Hz = 1 Low300Hz = 2 Low250Hz = 3 Low200Hz = 4 Low150Hz = 5 Low100Hz = 6 Low75Hz = 7 Low50Hz = 8 Low30Hz = 9 Low25Hz = 10 Low20Hz = 11 Low15Hz = 12 Low10Hz = 13 Low7500mHz = 14 Low5000mHz = 15 Low3090mHz = 16 Low2500mHz = 17 Low2000mHz = 18 Low1500mHz = 19 Low1000mHz = 20 Low750mHz = 21 Low500mHz = 22 Low300mHz = 23 Low250mHz = 24 Low100mHz = 25 DspCutoff configuration Rhs2116DspCutoff Gets or sets the Rhs2116DspCutoff value. Specifies the cutoff frequency for the DSP high-pass filter used for amplifier offset removal. Differential = 0 Dsp3309Hz = 1 Dsp1374Hz = 2 Dsp638Hz = 3 Dsp308Hz = 4 Dsp152Hz = 5 Dsp75Hz = 6 Dsp37Hz = 7 Dsp19Hz = 8 Dsp9336mHz = 9 Dsp4665mHz = 10 Dsp2332mHz = 11 Dsp1166mHz = 12 Dsp583mHz = 13 Dsp291mHz = 14 Dsp146mHz = 15 Off = 16 Enable configuration bool Gets or sets the device enable state. If set to true, Rhs2116Data will produce data. If set to false, Rhs2116Data will not produce data. DeviceName configuration string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. For instance, it can be used to link configuration operators to data IO operators within a workflow. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for software communication. DeviceAddress configuration uint Gets or sets the device address. This is a fully-qualified numerical hardware address of a device within the device table produced by an Open Neuro Interface (ONI) compliant acquisition system. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for hardware communication. DeviceType Type Gets or sets the device identity. This type provides a device identity to each device within the device table produced by an Open Neuro Interface (ONI) compliant acquisition system."
  },
  "api/OpenEphys.Onix1.ConfigureRhs2116Trigger.html": {
    "href": "api/OpenEphys.Onix1.ConfigureRhs2116Trigger.html",
    "title": "Class ConfigureRhs2116Trigger",
    "keywords": "TIP This is a device configuration operator. Aggregate configuration operators are recommended in lieu of device configuration operators for interfacing with Open Ephys Onix hardware. ConfigureRhs2116Trigger sink Operator Configures an ONIX RHS 2116 Trigger device. The RHS2116 Trigger device generates triggers for Intan RHS2116 bioamplifier and stimulator chip(s) either from a remote source via external SYNC pin or locally via GPIO or TRIGGER register. This device can be used to synchronize stimulus application and recovery across chips. Inputs & Outputs Configures an RHS2116 Trigger device. This will schedule configuration actions to be applied by a StartAcquisition node prior to data acquisition. A sequence of ContextTask that holds all configuration actions. The original sequence with the side effect of an additional configuration action to configure aN RHS2116 Trigger device. Properties Property Type Description ProbeGroup configuration Rhs2116ProbeGroup Gets or sets the Rhs2116ProbeGroup channel configuration. StimulusSequence acquisition Rhs2116StimulusSequencePair Gets or sets the stimulus sequence. TriggerSource configuration Rhs2116TriggerSource Gets or sets the trigger source. If set to Local, respect local triggers (e.g. via GPIO or TRIGGER register) and broadcast via sync pin. If multiple chips are connected to the SYNC pin, then this device becomes a transmitter to trigger stimulation sequences on other RHS2116 Trigger devices with TRIGGERSOURCE = 0x1 (receiver). If set to External, only respect triggers received from sync pin. Local = 0 External = 1 DeviceName configuration string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. For instance, it can be used to link configuration operators to data IO operators within a workflow. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for software communication. DeviceAddress configuration uint Gets or sets the device address. This is a fully-qualified numerical hardware address of a device within the device table produced by an Open Neuro Interface (ONI) compliant acquisition system. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for hardware communication. DeviceType Type Gets or sets the device identity. This type provides a device identity to each device within the device table produced by an Open Neuro Interface (ONI) compliant acquisition system."
  },
  "api/OpenEphys.Onix1.ConfigureTS4231V1.html": {
    "href": "api/OpenEphys.Onix1.ConfigureTS4231V1.html",
    "title": "Class ConfigureTS4231V1",
    "keywords": "TIP This is a device configuration operator. Aggregate configuration operators are recommended in lieu of device configuration operators for interfacing with Open Ephys Onix hardware. ConfigureTS4231V1 sink Operator Configures an array of Triad Semiconductor TS4231 lighthouse receivers for 3D position tracking using a pair of SteamVR V1 base stations. This configuration operator can be linked to a data IO operator, such as TS4231V1PositionData, using a shared DeviceName to stream 3D position data from light-house receivers when SteamVR V1 base stations have been installed above the arena. Inputs & Outputs Configures a TS4231 receiver array. This will schedule configuration actions to be applied by a StartAcquisition instance prior to data acquisition. A sequence of ContextTask instances that holds configuration actions. The original sequence modified by adding additional configuration actions required to configure a TS4231 array. Properties Property Type Description Enable configuration bool Gets or sets the device enable state. If set to true, a TS4231V1Data instance that is linked to this configuration will produce data. If set to false, it will not produce data. DeviceName configuration string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. For instance, it can be used to link configuration operators to data IO operators within a workflow. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for software communication. DeviceAddress configuration uint Gets or sets the device address. This is a fully-qualified numerical hardware address of a device within the device table produced by an Open Neuro Interface (ONI) compliant acquisition system. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for hardware communication. DeviceType Type Gets or sets the device identity. This type provides a device identity to each device within the device table produced by an Open Neuro Interface (ONI) compliant acquisition system."
  },
  "api/OpenEphys.Onix1.ConfigureUclaMiniscopeV4.html": {
    "href": "api/OpenEphys.Onix1.ConfigureUclaMiniscopeV4.html",
    "title": "Class ConfigureUclaMiniscopeV4",
    "keywords": "ConfigureUclaMiniscopeV4 sink Operator Configures a UCLA Miniscope V4 on the specified port. The UCLA Miniscope V4 is a miniaturized fluorescent microscope for performing single-photon calcium imaging in freely moving animals. It has the following features: A Python-480 0.48 Megapixel CMOS image sensor. A BNO055 9-axis IMU for real-time, 3D orientation tracking. An electrowetting lens for remote focal plane adjustment. An excitation LED with adjustable brightness control and optional exposure-driven interleaving to reduce photobleaching. Inputs & Outputs Configure all devices in the device group. This will schedule configuration actions to be applied by a StartAcquisition instance prior to data acquisition. A sequence of ContextTask instances that hold configuration actions. The original sequence modified by adding additional configuration actions required to configure all the devices in the device group. Properties Configuration These are properties of the aggregate operator: Property Type Description Port configuration PortName Gets or sets the port. The port is the physical connection to the ONIX breakout board and must be specified prior to operation. PortA = 1 PortB = 2 PortVoltage configuration double? Gets or sets the port voltage override. If defined, it will override automated voltage discovery and apply the specified voltage to the miniscope. If left blank, an automated headstage detection algorithm will attempt to communicate with the miniscope and apply an appropriate voltage for stable operation. Because ONIX allows any coaxial tether to be used, some of which are thin enough to result in a significant voltage drop, its may be required to manually specify the port voltage. Warning: this device requires 4.0 to 5.0V, measured at the miniscope, for proper operation. Supplying higher voltages may result in damage. Name configuration string Gets or sets a unique device group name. A human-readable identifier that is used as a prefix for the DeviceName of each device in the the group. Devices Bno055 Bno055 is a ConfigurePolledBno055 operator encapsulated by the ConfigureUclaMiniscopeV4 operator with the following properties: Property Type Description AxisMap configuration Bno055AxisMap Gets or sets the axis map that will be applied during configuration. This value can be changed to compensate for the Bno055's mounting orientation. Specifically, this value can be set to rotate the Bno055's coordinate system compared to the default orientation presented on page 24 of the Bno055 datasheet. XYZ = 36 XZY = 24 YXZ = 33 YZX = 9 ZXY = 18 ZYX = 6 AxisSign configuration Bno055AxisSign Gets or sets the axis sign that will be applied during configuration. This value can be changed to compensate for the Bno055's mounting orientation. Specifically, this value can be set to mirror specific axes in the Bno055's coordinate system compared to the default orientation presented on page 24 of the Bno055 datasheet. Default = 0 MirrorZ = 1 MirrorY = 2 MirrorX = 4 Enable configuration bool Gets or sets a value specifying whether the Bno055 device is enabled. If set to true, PolledBno055Data will produce data. If set to false, PolledBno055Data will not produce data. Camera Camera is a ConfigureUclaMiniscopeV4Camera operator encapsulated by the ConfigureUclaMiniscopeV4 operator with the following properties: Property Type Description Enable configuration bool Gets or sets a value indicating whether the camera will produce image data. If set to true, UclaMiniscopeV4CameraData will produce image data. If set to false, UclaMiniscopeV4CameraData will not produce image data. FrameRate configuration UclaMiniscopeV4FramesPerSecond Gets or sets the camera video rate in frames per second. Fps10Hz = 0 Fps15Hz = 1 Fps20Hz = 2 Fps25Hz = 3 Fps30Hz = 4 InterleaveLed configuration bool Gets or sets a value indicating whether the excitation LED should turn on only when the camera shutter is open. If set to true, the excitation LED will turn on briefly before, and turn off briefly after, the camera begins photon collection on its photodiode array. If set to false, the excitation LED will remain on at all times. LedBrightness acquisition double Gets or sets the excitation LED brightness level (0-100%). LiquidLensVoltage acquisition double Gets or sets the liquid lens driver voltage (Volts RMS). The imaging focal plane is controlled by using a MAX14574 high-voltage liquid lens driver. This chip produces pulse-width modulated, 5 kHz alternative electric field that deforms the miniscope's liquid lens in order to change the focal plane. The strength of this field determines the degree of deformation and therefore the focal depth. The default setting of 47 Volts RMS corresponds to approximately mid-range. SensorGain acquisition UclaMiniscopeV4SensorGain Gets or sets the camera sensor's analog gain. Low = 225 Medium = 228 High = 36"
  },
  "api/OpenEphys.Onix1.ConfigureUclaMiniscopeV4Camera.html": {
    "href": "api/OpenEphys.Onix1.ConfigureUclaMiniscopeV4Camera.html",
    "title": "Class ConfigureUclaMiniscopeV4Camera",
    "keywords": "TIP This is a device configuration operator. Aggregate configuration operators are recommended in lieu of device configuration operators for interfacing with Open Ephys Onix hardware. ConfigureUclaMiniscopeV4Camera sink Operator Configures the camera on a UCLA Miniscope V4. Inputs & Outputs Configures the camera on a UCLA Miniscope V4. This will schedule configuration actions to be applied by a StartAcquisition node prior to data acquisition. A sequence of ContextTask instances that holds all configuration actions. The original sequence but with each ContextTask instance now containing configuration actions required to use the miniscope's camera. Properties Property Type Description Enable configuration bool Gets or sets a value indicating whether the camera will produce image data. If set to true, UclaMiniscopeV4CameraData will produce image data. If set to false, UclaMiniscopeV4CameraData will not produce image data. FrameRate configuration UclaMiniscopeV4FramesPerSecond Gets or sets the camera video rate in frames per second. Fps10Hz = 0 Fps15Hz = 1 Fps20Hz = 2 Fps25Hz = 3 Fps30Hz = 4 InterleaveLed configuration bool Gets or sets a value indicating whether the excitation LED should turn on only when the camera shutter is open. If set to true, the excitation LED will turn on briefly before, and turn off briefly after, the camera begins photon collection on its photodiode array. If set to false, the excitation LED will remain on at all times. LedBrightness acquisition double Gets or sets the excitation LED brightness level (0-100%). LiquidLensVoltage acquisition double Gets or sets the liquid lens driver voltage (Volts RMS). The imaging focal plane is controlled by using a MAX14574 high-voltage liquid lens driver. This chip produces pulse-width modulated, 5 kHz alternative electric field that deforms the miniscope's liquid lens in order to change the focal plane. The strength of this field determines the degree of deformation and therefore the focal depth. The default setting of 47 Volts RMS corresponds to approximately mid-range. SensorGain acquisition UclaMiniscopeV4SensorGain Gets or sets the camera sensor's analog gain. Low = 225 Medium = 228 High = 36 DeviceName configuration string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. For instance, it can be used to link configuration operators to data IO operators within a workflow. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for software communication. DeviceAddress configuration uint Gets or sets the device address. This is a fully-qualified numerical hardware address of a device within the device table produced by an Open Neuro Interface (ONI) compliant acquisition system. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for hardware communication. DeviceType Type Gets or sets the device identity. This type provides a device identity to each device within the device table produced by an Open Neuro Interface (ONI) compliant acquisition system."
  },
  "api/OpenEphys.Onix1.ContextTask.html": {
    "href": "api/OpenEphys.Onix1.ContextTask.html",
    "title": "Class ContextTask",
    "keywords": "ContextTask Encapsulates a single ONI context and orchestrates interaction with ONI-compliant hardware. The Open Neuro Interface (ONI) hardware specification and API describe a general purpose acquisition system architecture and programming interface for communication with a host PC. One requirement of ONI is that a host application must hold a \"context\" that contains handles for hardware communication, data acquisition parameters, etc. for a particular hardware controller, such as the ONIX PCIe card. ContextTask fulfills this role for this library. Additionally, once data acquisition is started by the StartAcquisition operator, ContextTask performs the following: It automatically reads and distributes data from hardware using a dedicated acquisition thread. It allows data to be written to devices that accept them. It allows reading from and writing to device registers to control their operation (e.g. Enable or AnalogHighCutoff). Additionally, this operator exposes important information about the underlying ONI hardware such as the device table, clock rates, and block read and write sizes. In summary, ContextTask forms a complete interface for all hardware interaction within the library: all physical interaction with the ONIX system passes through this class. Properties Property Type Description AcquisitionClockHz uint Gets the acquisition clock rate in Hz. This property describes the frequency of ONI controller's acquisition clock, which is used to generate the Clock counter value included in all data frames produced by Data IO operators in this library (e.g. NeuropixelsV1eData or Bno055Data). The value of this property is determined during hardware initialization. BlockReadSize int Gets the number of bytes read per cycle of the ContextTask's acquisition thread. This option allows control over a fundamental trade-off between closed-loop response time and available bandwidth. A minimal value, which is determined by MaxReadFrameSize, will provide the lowest response latency, so long as data can be cleared from hardware memory fast enough to prevent buffering. Larger values will both reduce system call frequency and reduce the number of function calls per unit time performed by Bonsai, and therefore, increase available bandwidth. Larger values may improve processing performance for high-bandwidth data sources. The optimal value depends on the host computer and hardware configuration and must be determined via testing (e.g. using MemoryMonitorData). BlockWriteSize int Gets the number of bytes that are pre-allocated for writing data to hardware. This value determines the amount of memory that is pre-allocated for calls to Write(uint, IntPtr, int), Write<T>(uint, T), and Write<T>(uint, T[]). A larger size will reduce the frequency of dynamic memory allocation system calls but increase the expense of each of those calls. The minimum size of this option is determined by MaxWriteFrameSize. The effect on real-time performance is typically not as large as that of BlockReadSize because this parameter defines a readily-available pool of memory for the creation of output data frames, but does not determine when they are written to hardware. Data is written to hardware as soon as an output frame has been created. In contrast data is read from hardware whenever more than ReadSize bytes have accumulated in the input buffer. DeviceTable Dictionary<uint, Device> Gets the device table containing the device hierarchy of the acquisition system. This dictionary provides access to the ONI Device Table, which maps a set of fully-qualified ONI Device Addresses to a corresponding set of ONI Device Descriptors. The value of this property is determined during hardware initialization. MaxReadFrameSize uint Gets the size of the largest data frame produced by any device with the acquisition system in bytes. This number describes the the size, in bytes, of the largest ONI Data Frame produced by any device within the current device table that generates data. Therefore, it also defines the lower bound for the value of BlockReadSize. The value of this property is determined during hardware initialization. MaxWriteFrameSize uint Gets the size of the largest data frame consumed by any device with the acquisition system in bytes. This number describes the the size, in bytes, of the largest ONI Data Frame consumed by any device within the current device table that accepts data. Therefore, it also defines the lower bound for the value of BlockWriteSize. The value of this property is determined during hardware initialization. SystemClockHz uint Gets the system clock rate in Hz. This property describes the frequency of the clock governing the ONI controller. The value of this property is determined during hardware initialization."
  },
  "api/OpenEphys.Onix1.CreateContext.html": {
    "href": "api/OpenEphys.Onix1.CreateContext.html",
    "title": "Class CreateContext",
    "keywords": "CreateContext source Operator Creates a ContextTask that orchestrates data acquisition for an ONIX system. ONIX is built on top of the Open Neuro Interface (ONI) hardware specification and API. One of ONI's requirements is the creation of a \"context\" that holds information needed for communication between a host computer and ONI-compliant hardware. The context holds data such as the device driver that will be used to communicate with hardware, what devices (e.g. headstages and their internal components) are currently connected, how often data should be read by the host computer, etc. CreateContext creates this required ONI context for a single ONIX system. The ONIX system that the context serves is uniquely identified within a host computer by the Driver used to communicate with hardware and the Index, which is a enumeration that is translated by the driver into a physical interface (e.g. a particular PCIe slot) within the host computer. Inputs & Outputs Generates a sequence that creates a new ContextTask object. A sequence containing a single instance of the ContextTask class. Cancelling the sequence will dispose of the created context. Properties Property Type Description Driver configuration string Gets or sets a string specifying the device driver used to communicate with hardware. Index configuration int Gets or sets the index of the host interconnect between the ONI controller and host computer. For instance, 0 could correspond to a particular PCIe slot or USB port as enumerated by the operating system and translated by an ONI device driver translator. A value of -1 will attempt to open the default index and is useful if there is only a single ONI controller managed by the specified selected Driver in the host computer."
  },
  "api/OpenEphys.Onix1.DataFrame.html": {
    "href": "api/OpenEphys.Onix1.DataFrame.html",
    "title": "Class DataFrame",
    "keywords": "DataFrame An abstract class for representing oni.Frame objects in way that suits their use in this library. Properties Property Type Description Clock ulong Gets the acquisition clock count. Acquisition clock count that is synchronous for all frames collected within an ONI context created using CreateContext. The acquisition clock rate is given by AcquisitionClockHz. This clock value provides a common, synchronized time base for all data collected with an single ONI context. HubClock ulong Gets the hub clock count. Local, potentially asynchronous, clock count. Aside from the synchronous Clock value, data frames also contain a local clock count produced within the oni.Hub that the data was actually produced within. For instance, a headstage may contain an onboard controller for controlling devices and arbitrating data stream that runs asynchronously from the AcquisitionClockHz. This value is therefore the most precise way to compare the sample time of data collected within a given oni.Hub. However, the delay between time of data collection and synchronous time stamping by Clock is very small (sub-microsecond) and this value can therefore be disregarded in most scenarios in favor of Clock."
  },
  "api/OpenEphys.Onix1.DeviceFactory.html": {
    "href": "api/OpenEphys.Onix1.DeviceFactory.html",
    "title": "Class DeviceFactory",
    "keywords": "DeviceFactory Provides an abstract base class for all device configuration operators. ONI devices usually require a specific sequence of configuration and parameterization steps before they can be interacted with. The DeviceFactory provides a modular abstraction for flexible assembly and sequencing of both single and multi- device configuration. Properties Property Type Description"
  },
  "api/OpenEphys.Onix1.DeviceNameConverter.html": {
    "href": "api/OpenEphys.Onix1.DeviceNameConverter.html",
    "title": "Class DeviceNameConverter",
    "keywords": "DeviceNameConverter Provides a type converter to convert a device name to and from other representations. It also provides a mechanism to find existing devices declared in the workflow. Properties Property Type Description"
  },
  "api/OpenEphys.Onix1.DigitalInput.html": {
    "href": "api/OpenEphys.Onix1.DigitalInput.html",
    "title": "Class DigitalInput",
    "keywords": "DigitalInput source Operator Produces a sequence of digital input data from an ONIX breakout board. This data IO operator must be linked to an appropriate configuration, such as a ConfigureDigitalIO, using a shared DeviceName. Inputs & Outputs Generates a sequence of digital input data frames, each of which contains information about breakout board's digital input state. Digital inputs are sampled at 4 MHz but a DigitalInputDataFrame is produced only when a button, switch, or digital input pin is toggled. A sequence of DigitalInputDataFrame objects. Properties Property Type Description DeviceName configuration string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. For instance, it can be used to link configuration operators to data IO operators within a workflow. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for software communication."
  },
  "api/OpenEphys.Onix1.DigitalInputDataFrame.html": {
    "href": "api/OpenEphys.Onix1.DigitalInputDataFrame.html",
    "title": "Class DigitalInputDataFrame",
    "keywords": "DigitalInputDataFrame A digital event produced by the ONIX breakout board. Properties Property Type Description Buttons BreakoutButtonState Gets the state of the breakout board's buttons and switches. Moon = 1 Triangle = 2 X = 4 Check = 8 Circle = 16 Square = 32 Reserved0 = 64 Reserved1 = 128 PortDOn = 256 PortCOn = 512 PortBOn = 1024 PortAOn = 2048 DigitalInputs DigitalPortState Gets the state of the breakout board's 8-bit digital input port. Pin0 = 1 Pin1 = 2 Pin2 = 4 Pin3 = 8 Pin4 = 16 Pin5 = 32 Pin6 = 64 Pin7 = 128 Clock ulong Gets the acquisition clock count. Acquisition clock count that is synchronous for all frames collected within an ONI context created using CreateContext. The acquisition clock rate is given by AcquisitionClockHz. This clock value provides a common, synchronized time base for all data collected with an single ONI context. HubClock ulong Gets the hub clock count. Local, potentially asynchronous, clock count. Aside from the synchronous Clock value, data frames also contain a local clock count produced within the oni.Hub that the data was actually produced within. For instance, a headstage may contain an onboard controller for controlling devices and arbitrating data stream that runs asynchronously from the AcquisitionClockHz. This value is therefore the most precise way to compare the sample time of data collected within a given oni.Hub. However, the delay between time of data collection and synchronous time stamping by Clock is very small (sub-microsecond) and this value can therefore be disregarded in most scenarios in favor of Clock."
  },
  "api/OpenEphys.Onix1.DigitalOutput.html": {
    "href": "api/OpenEphys.Onix1.DigitalOutput.html",
    "title": "Class DigitalOutput",
    "keywords": "DigitalOutput sink Operator Sends digital output data to an ONIX breakout board. This data IO operator must be linked to an appropriate configuration, such as a ConfigureDigitalIO, using a shared DeviceName. Inputs & Outputs Updates the digital output port state. A sequence of DigitalPortState values indicating the state of the breakout board's 8 digital output pins A sequence that is identical to source. Properties Property Type Description DeviceName configuration string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. For instance, it can be used to link configuration operators to data IO operators within a workflow. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for software communication."
  },
  "api/OpenEphys.Onix1.DigitalPortState.html": {
    "href": "api/OpenEphys.Onix1.DigitalPortState.html",
    "title": "Enum DigitalPortState",
    "keywords": "DigitalPortState Specifies the state of the ONIX breakout board's digital input pins. Fields Field & Value Description Pin0 = 1 Specifies that pin 0 is high. Pin1 = 2 Specifies that pin 1 is high. Pin2 = 4 Specifies that pin 2 is high. Pin3 = 8 Specifies that pin 3 is high. Pin4 = 16 Specifies that pin 4 is high. Pin5 = 32 Specifies that pin 5 is high. Pin6 = 64 Specifies that pin 6 is high. Pin7 = 128 Specifies that pin 7 is high."
  },
  "api/OpenEphys.Onix1.Electrode.html": {
    "href": "api/OpenEphys.Onix1.Electrode.html",
    "title": "Class Electrode",
    "keywords": "Electrode Abstract base class for describing a single electrode. Properties Property Type Description Channel int Gets the electrical channel that this electrode is mapped to. Index int Gets the index of the electrode (the electrode \"number\") within the context of the entire probe. IntraShankElectrodeIndex int Gets the index of the electrode within the context of Shank. Position PointF Gets the location of the electrode in two-dimensional space in arbitrary units. Shank int Gets the shank this electrode belongs to."
  },
  "api/OpenEphys.Onix1.HarpSyncInputData.html": {
    "href": "api/OpenEphys.Onix1.HarpSyncInputData.html",
    "title": "Class HarpSyncInputData",
    "keywords": "HarpSyncInputData source Operator Produces a sequence of Harp clock synchronization signals sent to the Harp input in the ONIX breakout board. This configuration operator can be linked to a data IO operator, such as HarpSyncInputData, using a shared DeviceName. Harp is a standard for asynchronous real-time data acquisition and experimental control in neuroscience. It includes a clock synchronization protocol which allows Harp devices to be connected to a shared clock line and continuously self-synchronize their clocks to a precision of tens of microseconds. This means that all experimental events are timestamped on the same clock and no post-hoc alignment of timing is necessary. The Harp clock signal is transmitted over a serial line every second. Every time the Harp sync input device in the ONIX breakout board detects a full Harp synchronization packet, a new data frame is emitted pairing the current value of the Harp clock with the local ONIX acquisition clock. Logging the sequence of all Harp synchronization packets can greatly facilitate post-hoc analysis and interpretation of timing signals. For more information see https://harp-tech.org/. Inputs & Outputs Generates a sequence of HarpSyncInputDataFrames, each of which contains information about a single Harp clock synchronization event. A sequence of HarpSyncInputDataFrames. Properties Property Type Description DeviceName configuration string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. For instance, it can be used to link configuration operators to data IO operators within a workflow. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for software communication."
  },
  "api/OpenEphys.Onix1.HarpSyncInputDataFrame.html": {
    "href": "api/OpenEphys.Onix1.HarpSyncInputDataFrame.html",
    "title": "Class HarpSyncInputDataFrame",
    "keywords": "HarpSyncInputDataFrame A Harp clock synchronization signal. Properties Property Type Description HarpTime uint Gets the Harp clock time corresponding to the local acquisition ONIX clock count. Clock ulong Gets the acquisition clock count. Acquisition clock count that is synchronous for all frames collected within an ONI context created using CreateContext. The acquisition clock rate is given by AcquisitionClockHz. This clock value provides a common, synchronized time base for all data collected with an single ONI context. HubClock ulong Gets the hub clock count. Local, potentially asynchronous, clock count. Aside from the synchronous Clock value, data frames also contain a local clock count produced within the oni.Hub that the data was actually produced within. For instance, a headstage may contain an onboard controller for controlling devices and arbitrating data stream that runs asynchronously from the AcquisitionClockHz. This value is therefore the most precise way to compare the sample time of data collected within a given oni.Hub. However, the delay between time of data collection and synchronous time stamping by Clock is very small (sub-microsecond) and this value can therefore be disregarded in most scenarios in favor of Clock."
  },
  "api/OpenEphys.Onix1.HarpSyncSource.html": {
    "href": "api/OpenEphys.Onix1.HarpSyncSource.html",
    "title": "Enum HarpSyncSource",
    "keywords": "HarpSyncSource Specifies the physical Harp clock input source. Fields Field & Value Description Breakout = 0 Specifies the Harp 3.5-mm audio jack connector on the side of the ONIX breakout board. ClockAdapter = 1 Specifies SMA clock input 0 on the ONIX breakout board. In early access versions of the ONIX breakout board, Harp 3.5-mm audio jack connector was configured for output only, so a special adapter was needed to transmit the Harp clock synchronization signal to the breakout clock input zero."
  },
  "api/OpenEphys.Onix1.Headstage64ElectricalStimulatorTrigger.html": {
    "href": "api/OpenEphys.Onix1.Headstage64ElectricalStimulatorTrigger.html",
    "title": "Class Headstage64ElectricalStimulatorTrigger",
    "keywords": "Headstage64ElectricalStimulatorTrigger sink Operator Controls a headstage-64 onboard electrical stimulus sequencer. This data IO operator must be linked to an appropriate configuration, such as a ConfigureHeadstage64ElectricalStimulator, using a shared DeviceName. Headstage-64's onboard electrical stimulator can be used to deliver current controlled micro-stimulation through a contact on the probe connector on the bottom of the headstage or the corresponding contact on a compatible electrode interface board. Inputs & Outputs Start an electrical stimulus sequence. A sequence of boolean values indicating the start of a stimulus sequence when true. A sequence of boolean values that is identical to source Properties Property Type Description BurstPulseCount acquisition uint Gets or sets the number of pulses per burst. DeviceName configuration string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. For instance, it can be used to link configuration operators to data IO operators within a workflow. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for software communication. Enable acquisition bool Gets or sets the device enable state. If set to true, then the electrical stimulator circuit will respect triggers. If set to false, triggers will be ignored. InterBurstInterval acquisition uint Gets or sets the duration of the inter-burst interval within a stimulus train in μsec. InterPhaseCurrent acquisition double Gets or sets the amplitude of the interphase current of each pulse in μA. InterPhaseInterval acquisition uint Gets or sets the duration of the interphase interval of each pulse in μsec. InterPulseInterval acquisition uint Gets or sets the duration of the inter-pulse interval within a single burst in μsec. PhaseOneCurrent acquisition double Gets or sets the amplitude of the first phase of each pulse in μA. PhaseOneDuration acquisition uint Gets or sets the duration of the first phase of each pulse in μsec. PhaseTwoCurrent acquisition double Gets or sets the amplitude of the second phase of each pulse in μA. PhaseTwoDuration acquisition uint Gets or sets the duration of the second phase of each pulse in μsec. PowerEnable acquisition bool Gets or sets the electrical stimulator's power state. If set to true, then the electrical stimulator's ±15V power supplies will be turned on. If set to false, they will be turned off. It may be desirable to power down the electrical stimulator's power supplies outside of stimulation windows to reduce power consumption and electrical noise. This property must be set to true in order for electrical stimuli to be delivered properly. It takes ~10 milliseconds for these supplies to stabilize. TrainBurstCount acquisition uint Gets or sets the number of bursts in a stimulus train. TriggerDelay acquisition uint Gets or sets a delay from receiving a trigger to the start of stimulus sequence application in μsec"
  },
  "api/OpenEphys.Onix1.Headstage64OpticalStimulatorTrigger.html": {
    "href": "api/OpenEphys.Onix1.Headstage64OpticalStimulatorTrigger.html",
    "title": "Class Headstage64OpticalStimulatorTrigger",
    "keywords": "Headstage64OpticalStimulatorTrigger sink Operator Controls a headstage-64 onboard optical stimulus sequencer. This data IO operator must be linked to an appropriate configuration, such as a ConfigureHeadstage64OpticalStimulator, using a shared DeviceName. Headstage-64's onboard optical stimulator can be used to drive current through laser diodes or LEDs connected to two contacts on the probe connector on the bottom of the headstage or the corresponding contacts on a compatible electrode interface board. Inputs & Outputs Start an optical stimulus sequence. A sequence of boolean values indicating the start of a stimulus sequence when true. A sequence of boolean values that is identical to source Properties Property Type Description BurstCurrent double Gets total direct current required during the application of a burst. This value should be kept below 50 mA to prevent excess head accumulation on the headstage. BurstsPerTrain acquisition uint Gets or sets the number of bursts in a stimulus train. ChannelOneCurrent acquisition double Gets or sets the percent of MaxCurrent that will delivered to channel 1 in each pulse. ChannelTwoCurrent acquisition double Gets or sets the percent of MaxCurrent that will delivered to channel 2 in each pulse. Delay acquisition double Gets or sets a delay from receiving a trigger to the start of stimulus sequence application in msec. DeviceName configuration string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. For instance, it can be used to link configuration operators to data IO operators within a workflow. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for software communication. Enable acquisition bool Gets or sets the device enable state. If set to true, then the optical stimulator circuit will respect triggers. If set to false, triggers will be ignored. InterBurstInterval acquisition double Gets or sets the duration of the inter-burst interval within a stimulus train in msec. MaxCurrent acquisition double Gets or sets the Maximum current per channel per pulse in mA. This value defines the maximal possible current that can be delivered to each channel. To get different amplitudes for each channel use the ChannelOneCurrent and ChannelTwoCurrent properties. PulseDuration acquisition double Gets or sets the duration of each pulse in msec. PulsesPerBurst acquisition uint Gets or sets the number of pulses per burst. PulsesPerSecond acquisition double Gets or sets the pulse period within a burst in msec."
  },
  "api/OpenEphys.Onix1.HeartbeatData.html": {
    "href": "api/OpenEphys.Onix1.HeartbeatData.html",
    "title": "Class HeartbeatData",
    "keywords": "HeartbeatData source Operator Produces a sequence of heartbeat data frames. This data IO operator must be linked to an appropriate configuration, such as a ConfigureHeartbeat, using a shared DeviceName. Inputs & Outputs Generates a sequence of HeartbeatDataFrame objects, each of which contains period signal from the acquisition system indicating that it is active. A sequence of HeartbeatDataFrame objects. Properties Property Type Description DeviceName configuration string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. For instance, it can be used to link configuration operators to data IO operators within a workflow. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for software communication."
  },
  "api/OpenEphys.Onix1.HeartbeatDataFrame.html": {
    "href": "api/OpenEphys.Onix1.HeartbeatDataFrame.html",
    "title": "Class HeartbeatDataFrame",
    "keywords": "HeartbeatDataFrame The time of a single heartbeat. Properties Property Type Description Clock ulong Gets the acquisition clock count. Acquisition clock count that is synchronous for all frames collected within an ONI context created using CreateContext. The acquisition clock rate is given by AcquisitionClockHz. This clock value provides a common, synchronized time base for all data collected with an single ONI context. HubClock ulong Gets the hub clock count. Local, potentially asynchronous, clock count. Aside from the synchronous Clock value, data frames also contain a local clock count produced within the oni.Hub that the data was actually produced within. For instance, a headstage may contain an onboard controller for controlling devices and arbitrating data stream that runs asynchronously from the AcquisitionClockHz. This value is therefore the most precise way to compare the sample time of data collected within a given oni.Hub. However, the delay between time of data collection and synchronous time stamping by Clock is very small (sub-microsecond) and this value can therefore be disregarded in most scenarios in favor of Clock."
  },
  "api/OpenEphys.Onix1.IConfigureNeuropixelsV1.html": {
    "href": "api/OpenEphys.Onix1.IConfigureNeuropixelsV1.html",
    "title": "Interface IConfigureNeuropixelsV1",
    "keywords": "Properties"
  },
  "api/OpenEphys.Onix1.IConfigureNeuropixelsV2.html": {
    "href": "api/OpenEphys.Onix1.IConfigureNeuropixelsV2.html",
    "title": "Interface IConfigureNeuropixelsV2",
    "keywords": "Properties"
  },
  "api/OpenEphys.Onix1.MemoryMonitorData.html": {
    "href": "api/OpenEphys.Onix1.MemoryMonitorData.html",
    "title": "Class MemoryMonitorData",
    "keywords": "MemoryMonitorData source Operator Produces a sequence of memory usage data frames. This data IO operator must be linked to an appropriate configuration, such as a ConfigureMemoryMonitor, using a shared DeviceName. Inputs & Outputs Generates a sequence of MemoryMonitorDataFrame objects, which contains information about the system's first-in, first-out (FIFO) hardware data buffer. A sequence of MemoryMonitorDataFrame objects. Properties Property Type Description DeviceName configuration string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. For instance, it can be used to link configuration operators to data IO operators within a workflow. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for software communication."
  },
  "api/OpenEphys.Onix1.MemoryMonitorDataFrame.html": {
    "href": "api/OpenEphys.Onix1.MemoryMonitorDataFrame.html",
    "title": "Class MemoryMonitorDataFrame",
    "keywords": "MemoryMonitorDataFrame Hardware memory use information. Properties Property Type Description BytesUsed uint Gets the number of bytes that are currently used. PercentUsed double Gets the percent of available memory that is currently used. Clock ulong Gets the acquisition clock count. Acquisition clock count that is synchronous for all frames collected within an ONI context created using CreateContext. The acquisition clock rate is given by AcquisitionClockHz. This clock value provides a common, synchronized time base for all data collected with an single ONI context. HubClock ulong Gets the hub clock count. Local, potentially asynchronous, clock count. Aside from the synchronous Clock value, data frames also contain a local clock count produced within the oni.Hub that the data was actually produced within. For instance, a headstage may contain an onboard controller for controlling devices and arbitrating data stream that runs asynchronously from the AcquisitionClockHz. This value is therefore the most precise way to compare the sample time of data collected within a given oni.Hub. However, the delay between time of data collection and synchronous time stamping by Clock is very small (sub-microsecond) and this value can therefore be disregarded in most scenarios in favor of Clock."
  },
  "api/OpenEphys.Onix1.MultiDeviceFactory.html": {
    "href": "api/OpenEphys.Onix1.MultiDeviceFactory.html",
    "title": "Class MultiDeviceFactory",
    "keywords": "MultiDeviceFactory Provides an abstract base class for configuration operators responsible for registering all devices within a logical group in the internal device manager. This class allows configuration of logical groups of devices that share some common functionality and/or require a specific sequence of interdependent configuration steps prior to acquisition. For instance, devices on a headstage can be combined with a device on the controller that is used to set the port voltage and monitor headstage communication status (e.g. ConfigureHeadstage64). Alternatively, devices that share some common functionality from the user's perspective, but share no actual interdependent configuration from the perspective of the hardware, can be grouped for ease of use (e.g. ConfigureBreakoutBoard). These device groups are the most common starting point for configuration of an ONIX system, and the MultiDeviceFactory provides a modular abstraction for flexible assembly and sequencing of device groups. Properties Property Type Description Name configuration string Gets or sets a unique device group name. A human-readable identifier that is used as a prefix for the DeviceName of each device in the the group."
  },
  "api/OpenEphys.Onix1.NeuropixelsV1Adc.html": {
    "href": "api/OpenEphys.Onix1.NeuropixelsV1Adc.html",
    "title": "Class NeuropixelsV1Adc",
    "keywords": "NeuropixelsV1Adc ADC calibration values for a NeuropixelsV1e device. Properties Property Type Description Cfix int Gets or sets a Neuropixels 1.0 Cfix calibration setting Coarse int Gets or sets a Neuropixels 1.0 Coarse calibration setting CompN int Gets or sets a Neuropixels 1.0 CompN calibration setting CompP int Gets or sets a Neuropixels 1.0 CompP calibration setting Fine int Gets or sets a Neuropixels 1.0 Fine calibration setting Offset int Gets or sets a Neuropixels 1.0 Offset calibration setting Slope int Gets or sets a Neuropixels 1.0 Slope calibration setting Threshold int Gets or sets a Neuropixels 1.0 Threshold calibration setting"
  },
  "api/OpenEphys.Onix1.NeuropixelsV1AdcCalibration.html": {
    "href": "api/OpenEphys.Onix1.NeuropixelsV1AdcCalibration.html",
    "title": "Struct NeuropixelsV1AdcCalibration",
    "keywords": "NeuropixelsV1AdcCalibration A struct to hold an array of NeuropixelsV1AdcCalibration values and the serial number needed for each ConfigureNeuropixelsV1e. Properties Property Type Description Adcs NeuropixelsV1Adc[] The ADC calibration values from a calibration file. SerialNumber ulong The serial number from a calibration file."
  },
  "api/OpenEphys.Onix1.NeuropixelsV1Bank.html": {
    "href": "api/OpenEphys.Onix1.NeuropixelsV1Bank.html",
    "title": "Enum NeuropixelsV1Bank",
    "keywords": "NeuropixelsV1Bank Specifies the bank of electrodes within each shank. Fields Field & Value Description A = 0 Specifies that Bank A is the current bank. Bank A is defined as shank index 0 to 383 along each shank. B = 1 Specifies that Bank B is the current bank. Bank B is defined as shank index 384 to 767 along each shank. C = 2 Specifies that Bank C is the current bank. Bank C is defined as shank index 768 to 960 along each shank. Note that Bank C is not a full contingent of 384 channels; to compensate for this, electrodes from Bank B (starting at shank index 576) are used to generate a full 384 channel map."
  },
  "api/OpenEphys.Onix1.NeuropixelsV1DataFrame.html": {
    "href": "api/OpenEphys.Onix1.NeuropixelsV1DataFrame.html",
    "title": "Class NeuropixelsV1DataFrame",
    "keywords": "NeuropixelsV1DataFrame Buffered data from a NeuropixelsV1 probe. Properties Property Type Description FrameCount int[] Gets the frame count value array. A 20-bit counter on the probe that increments its value for every frame produced. The value ranges from 0 to 1048575 (2^20-1), and should always increment by 1 until it wraps around back to 0. This can be used to detect dropped frames. LfpData Mat Gets the LFP band data as a Mat object. LFP data has 32 rows (channels) with columns representing the samples acquired at 2.5 kHz. Each sample is a 10-bit, offset binary value encoded as a ushort. SpikeData Mat Gets the spike-band data as a Mat object. Spike-band data has 384 rows (channels) with columns representing the samples acquired at 30 kHz. Each sample is a 10-bit, offset binary value encoded as a ushort. Clock ulong[] Gets the buffered array of Clock values. HubClock ulong[] Gets the buffered array of HubClock values."
  },
  "api/OpenEphys.Onix1.NeuropixelsV1Electrode.html": {
    "href": "api/OpenEphys.Onix1.NeuropixelsV1Electrode.html",
    "title": "Class NeuropixelsV1Electrode",
    "keywords": "NeuropixelsV1Electrode Class defining a NeuropixelsV1Electrode. Properties Property Type Description Bank NeuropixelsV1Bank The bank, or logical block of channels, this electrode belongs to A = 0 B = 1 C = 2 Index int Gets the index of the electrode (the electrode \"number\") within the context of the entire probe. Shank int Gets the shank this electrode belongs to. IntraShankElectrodeIndex int Gets the index of the electrode within the context of Shank. Channel int Gets the electrical channel that this electrode is mapped to. Position PointF Gets the location of the electrode in two-dimensional space in arbitrary units."
  },
  "api/OpenEphys.Onix1.NeuropixelsV1Gain.html": {
    "href": "api/OpenEphys.Onix1.NeuropixelsV1Gain.html",
    "title": "Enum NeuropixelsV1Gain",
    "keywords": "NeuropixelsV1Gain Specifies the gain for all electrodes Fields Field & Value Description Gain50 = 0 Specifies that the gain should be 50x. Gain125 = 1 Specifies that the gain should be 125x. Gain250 = 2 Specifies that the gain should be 250x. Gain500 = 3 Specifies that the gain should be 500x. Gain1000 = 4 Specifies that the gain should be 1000x. Gain1500 = 5 Specifies that the gain should be 1500x. Gain2000 = 6 Specifies that the gain should be 2000x. Gain3000 = 7 Specifies that the gain should be 3000x."
  },
  "api/OpenEphys.Onix1.NeuropixelsV1Helper.html": {
    "href": "api/OpenEphys.Onix1.NeuropixelsV1Helper.html",
    "title": "Class NeuropixelsV1Helper",
    "keywords": "NeuropixelsV1Helper Static helper class for NeuropixelsV1e methods. Properties Property Type Description"
  },
  "api/OpenEphys.Onix1.NeuropixelsV1Probe.html": {
    "href": "api/OpenEphys.Onix1.NeuropixelsV1Probe.html",
    "title": "Enum NeuropixelsV1Probe",
    "keywords": "NeuropixelsV1Probe Specifies the probe as A or B. Fields Field & Value Description ProbeA = 0 Specifies that this is Probe A. ProbeB = 1 Specifies that this is Probe B."
  },
  "api/OpenEphys.Onix1.NeuropixelsV1ProbeConfiguration.html": {
    "href": "api/OpenEphys.Onix1.NeuropixelsV1ProbeConfiguration.html",
    "title": "Class NeuropixelsV1ProbeConfiguration",
    "keywords": "NeuropixelsV1ProbeConfiguration Defines a configuration for NeuropixelsV1e. Properties Property Type Description ChannelConfiguration configuration NeuropixelsV1eProbeGroup Gets or sets the NeuropixelsV1eProbeGroup channel configuration for this probe. ChannelMap List<NeuropixelsV1Electrode> Gets the existing channel map listing all currently enabled electrodes. The channel map will always be 384 channels, and will return the 384 enabled electrodes. LfpAmplifierGain configuration NeuropixelsV1Gain Gets or sets the amplifier gain for the LFP-band. The LFP band is from 0.5 to 500 Hz. Gain50 = 0 Gain125 = 1 Gain250 = 2 Gain500 = 3 Gain1000 = 4 Gain1500 = 5 Gain2000 = 6 Gain3000 = 7 Reference configuration NeuropixelsV1ReferenceSource Gets or sets the reference for all electrodes. All electrodes are set to the same reference, which can be either External or Tip. Setting to External will use the external reference, while Tip sets the reference to the electrode at the tip of the probe. External = 1 Tip = 2 SpikeAmplifierGain configuration NeuropixelsV1Gain Gets or sets the amplifier gain for the spike-band. The spike-band is from DC to 10 kHz if SpikeFilter is set to false, while the spike-band is from 300 Hz to 10 kHz if SpikeFilter is set to true. Gain50 = 0 Gain125 = 1 Gain250 = 2 Gain500 = 3 Gain1000 = 4 Gain1500 = 5 Gain2000 = 6 Gain3000 = 7 SpikeFilter configuration bool Gets or sets the state of the spike-band filter. If set to true, the spike-band has a 300 Hz high-pass filter which will be activated. If set to false, the high-pass filter will not to be activated."
  },
  "api/OpenEphys.Onix1.NeuropixelsV1ReferenceSource.html": {
    "href": "api/OpenEphys.Onix1.NeuropixelsV1ReferenceSource.html",
    "title": "Enum NeuropixelsV1ReferenceSource",
    "keywords": "NeuropixelsV1ReferenceSource Specifies the reference source for all electrodes. Fields Field & Value Description External = 1 Specifies that the reference should be External. Tip = 2 Specifies that the reference should be the Tip."
  },
  "api/OpenEphys.Onix1.NeuropixelsV1eData.html": {
    "href": "api/OpenEphys.Onix1.NeuropixelsV1eData.html",
    "title": "Class NeuropixelsV1eData",
    "keywords": "NeuropixelsV1eData source Operator Produces a sequence of NeuropixelsV1DataFrames from a NeuropixelsV1e headstage. This data IO operator must be linked to an appropriate configuration, such as a ConfigureNeuropixelsV1e, using a shared DeviceName. Inputs & Outputs Generates a sequence of NeuropixelsV1DataFrame objects. A sequence of NeuropixelsV1DataFrame objects. Properties Property Type Description BufferSize configuration int Gets or sets the buffer size. Buffer size sets the number of super frames that are buffered before propagating data. A super frame consists of 384 channels from the spike-band and 32 channels from the LFP band. The buffer size must be a multiple of 12. DeviceName configuration string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. For instance, it can be used to link configuration operators to data IO operators within a workflow. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for software communication."
  },
  "api/OpenEphys.Onix1.NeuropixelsV1eGainCorrection.html": {
    "href": "api/OpenEphys.Onix1.NeuropixelsV1eGainCorrection.html",
    "title": "Struct NeuropixelsV1eGainCorrection",
    "keywords": "NeuropixelsV1eGainCorrection A struct to hold the two gain correction values (AP and LFP) and the serial number needed for each ConfigureNeuropixelsV1e. Properties Property Type Description ApGainCorrectionFactor double The gain correction for the spike-band from a gain calibration file. LfpGainCorrectionFactor double The gain correction for the LFP-band from a gain calibration file. SerialNumber ulong The serial number from a calibration file."
  },
  "api/OpenEphys.Onix1.NeuropixelsV1eProbeGroup.html": {
    "href": "api/OpenEphys.Onix1.NeuropixelsV1eProbeGroup.html",
    "title": "Class NeuropixelsV1eProbeGroup",
    "keywords": "NeuropixelsV1eProbeGroup A OpenEphys.ProbeInterface.NET.ProbeGroup class for NeuropixelsV1e. Properties Property Type Description"
  },
  "api/OpenEphys.Onix1.NeuropixelsV1fData.html": {
    "href": "api/OpenEphys.Onix1.NeuropixelsV1fData.html",
    "title": "Class NeuropixelsV1fData",
    "keywords": "NeuropixelsV1fData source Operator Produces a sequence of NeuropixelsV1DataFrames from a NeuropixelsV1f headstage. This data IO operator must be linked to an appropriate configuration, such as a ConfigureNeuropixelsV1f, using a shared DeviceName. Inputs & Outputs Generates a sequence of NeuropixelsV1DataFrame objects. A sequence of NeuropixelsV1DataFrame objects. Properties Property Type Description BufferSize int Gets or sets the buffer size. Buffer size sets the number of super frames that are buffered before propagating data. A super frame consists of 384 channels from the spike-band and 32 channels from the LFP band. The buffer size must be a multiple of 12. DeviceName configuration string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. For instance, it can be used to link configuration operators to data IO operators within a workflow. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for software communication."
  },
  "api/OpenEphys.Onix1.NeuropixelsV2GainCorrection.html": {
    "href": "api/OpenEphys.Onix1.NeuropixelsV2GainCorrection.html",
    "title": "Struct NeuropixelsV2GainCorrection",
    "keywords": "NeuropixelsV2GainCorrection A struct to hold the gain correction value and the serial number from a Neuropixels 2.0 gain calibration file. Properties Property Type Description GainCorrectionFactor double The gain correction from a gain calibration file. SerialNumber ulong The serial number from a calibration file."
  },
  "api/OpenEphys.Onix1.NeuropixelsV2Helper.html": {
    "href": "api/OpenEphys.Onix1.NeuropixelsV2Helper.html",
    "title": "Class NeuropixelsV2Helper",
    "keywords": "NeuropixelsV2Helper Static helper class for NeuropixelsV2 methods. Properties Property Type Description"
  },
  "api/OpenEphys.Onix1.NeuropixelsV2Probe.html": {
    "href": "api/OpenEphys.Onix1.NeuropixelsV2Probe.html",
    "title": "Enum NeuropixelsV2Probe",
    "keywords": "NeuropixelsV2Probe Specifies the probe as A or B. Fields Field & Value Description ProbeA = 0 Specifies that this is Probe A. ProbeB = 1 Specifies that this is Probe B."
  },
  "api/OpenEphys.Onix1.NeuropixelsV2QuadShankBank.html": {
    "href": "api/OpenEphys.Onix1.NeuropixelsV2QuadShankBank.html",
    "title": "Enum NeuropixelsV2QuadShankBank",
    "keywords": "NeuropixelsV2QuadShankBank Specifies the bank of electrodes within each shank. Fields Field & Value Description A = 0 Specifies that Bank A is the current bank. Bank A is defined as shank index 0 to 383 along each shank. B = 1 Specifies that Bank B is the current bank. Bank B is defined as shank index 384 to 767 along each shank. C = 2 Specifies that Bank C is the current bank. Bank C is defined as shank index 768 to 1151 along each shank. D = 3 Specifies that Bank D is the current bank. Bank D is defined as shank index 1152 to 1279 along each shank. Note that Bank D is not a full contingent of 384 channels; to compensate for this, electrodes from Bank C (starting at shank index 896) are used to generate a full 384 channel map."
  },
  "api/OpenEphys.Onix1.NeuropixelsV2QuadShankElectrode.html": {
    "href": "api/OpenEphys.Onix1.NeuropixelsV2QuadShankElectrode.html",
    "title": "Class NeuropixelsV2QuadShankElectrode",
    "keywords": "NeuropixelsV2QuadShankElectrode Class defining a NeuropixelsV2QuadShankElectrode. Properties Property Type Description Bank NeuropixelsV2QuadShankBank Gets the bank, or logical block of channels, this electrode belongs to. A = 0 B = 1 C = 2 D = 3 Block int Gets the block this electrode belongs to. BlockIndex int Gets the index within the block this electrode belongs to. Index int Gets the index of the electrode (the electrode \"number\") within the context of the entire probe. Shank int Gets the shank this electrode belongs to. IntraShankElectrodeIndex int Gets the index of the electrode within the context of Shank. Channel int Gets the electrical channel that this electrode is mapped to. Position PointF Gets the location of the electrode in two-dimensional space in arbitrary units."
  },
  "api/OpenEphys.Onix1.NeuropixelsV2QuadShankProbeConfiguration.html": {
    "href": "api/OpenEphys.Onix1.NeuropixelsV2QuadShankProbeConfiguration.html",
    "title": "Class NeuropixelsV2QuadShankProbeConfiguration",
    "keywords": "NeuropixelsV2QuadShankProbeConfiguration Defines a configuration for quad-shank, Neuropixels 2.0 and 2.0-beta probes. Properties Property Type Description ChannelConfiguration configuration NeuropixelsV2eProbeGroup Gets the NeuropixelsV2eProbeGroup channel configuration for this probe. ChannelMap List<NeuropixelsV2QuadShankElectrode> Gets the existing channel map listing all currently enabled electrodes. The channel map will always be 384 channels, and will return the 384 enabled electrodes. Probe NeuropixelsV2Probe Gets or sets the NeuropixelsV2Probe for this probe. ProbeA = 0 ProbeB = 1 Reference NeuropixelsV2QuadShankReference Gets or sets the reference for all electrodes. All electrodes are set to the same reference, which can be External or any of the tip references (Tip1, Tip2, etc.). Setting to External will use the external reference, while Tip1 sets the reference to the electrode at the tip of the first shank. External = 0 Tip1 = 1 Tip2 = 2 Tip3 = 3 Tip4 = 4"
  },
  "api/OpenEphys.Onix1.NeuropixelsV2QuadShankReference.html": {
    "href": "api/OpenEphys.Onix1.NeuropixelsV2QuadShankReference.html",
    "title": "Enum NeuropixelsV2QuadShankReference",
    "keywords": "NeuropixelsV2QuadShankReference Specifies the reference for a quad-shank probe. Fields Field & Value Description External = 0 Specifies that the External reference will be used. Tip1 = 1 Specifies that the tip reference of shank 1 will be used. Tip2 = 2 Specifies that the tip reference of shank 2 will be used. Tip3 = 3 Specifies that the tip reference of shank 3 will be used. Tip4 = 4 Specifies that the tip reference of shank 4 will be used."
  },
  "api/OpenEphys.Onix1.NeuropixelsV2eBetaData.html": {
    "href": "api/OpenEphys.Onix1.NeuropixelsV2eBetaData.html",
    "title": "Class NeuropixelsV2eBetaData",
    "keywords": "NeuropixelsV2eBetaData source Operator Produces a sequence of NeuropixelsV2eBetaDataFrame objects from a NeuropixelsV2eBeta headstage. This data IO operator must be linked to an appropriate configuration, such as a ConfigureNeuropixelsV2eBeta, using a shared DeviceName. Inputs & Outputs Generates a sequence of NeuropixelsV2eDataFrame objects. A sequence of NeuropixelsV2eDataFrame objects. Properties Property Type Description BufferSize configuration int Gets or sets the buffer size. Buffer size sets the number of frames that are buffered before propagating data. DeviceName configuration string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. For instance, it can be used to link configuration operators to data IO operators within a workflow. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for software communication. ProbeIndex configuration NeuropixelsV2Probe Gets or sets the probe index. ProbeA = 0 ProbeB = 1"
  },
  "api/OpenEphys.Onix1.NeuropixelsV2eBetaDataFrame.html": {
    "href": "api/OpenEphys.Onix1.NeuropixelsV2eBetaDataFrame.html",
    "title": "Class NeuropixelsV2eBetaDataFrame",
    "keywords": "NeuropixelsV2eBetaDataFrame Buffered data from a NeuropixelsV2e device. Properties Property Type Description AmplifierData Mat Gets the amplifier data array. FrameCount int[] Gets the frame count array. Frame count is a 20-bit counter on the probe that increments its value for every frame produced. The value ranges from 0 to 1048575 (2^20-1), and should always increment by 1 until it wraps around back to 0. This can be used to detect dropped frames. Clock ulong[] Gets the buffered array of Clock values. HubClock ulong[] Gets the buffered array of HubClock values."
  },
  "api/OpenEphys.Onix1.NeuropixelsV2eData.html": {
    "href": "api/OpenEphys.Onix1.NeuropixelsV2eData.html",
    "title": "Class NeuropixelsV2eData",
    "keywords": "NeuropixelsV2eData source Operator Produces a sequence of NeuropixelsV2eDataFrame objects from a NeuropixelsV2e headstage. This data IO operator must be linked to an appropriate configuration, such as a ConfigureNeuropixelsV2e, using a shared DeviceName. Inputs & Outputs Generates a sequence of NeuropixelsV2eDataFrames. A sequence of NeuropixelsV2eDataFrames. Properties Property Type Description BufferSize configuration int Gets or sets the buffer size. This property determines the number of samples that are collected from each of the 384 ephys channels before data is propagated. For instance, if this value is set to 30, then 384x30 samples, along with 30 corresponding clock values, will be collected and packed into each NeuropixelsV2eDataFrame. Because channels are sampled at 30 kHz, this is equivalent to 1 millisecond of data from each channel. DeviceName configuration string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. For instance, it can be used to link configuration operators to data IO operators within a workflow. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for software communication. ProbeIndex configuration NeuropixelsV2Probe Gets or sets the probe index. ProbeA = 0 ProbeB = 1"
  },
  "api/OpenEphys.Onix1.NeuropixelsV2eDataFrame.html": {
    "href": "api/OpenEphys.Onix1.NeuropixelsV2eDataFrame.html",
    "title": "Class NeuropixelsV2eDataFrame",
    "keywords": "NeuropixelsV2eDataFrame Buffered data from a NeuropixelsV2e device. Properties Property Type Description AmplifierData Mat Gets the amplifier data array. Clock ulong[] Gets the buffered array of Clock values. HubClock ulong[] Gets the buffered array of HubClock values."
  },
  "api/OpenEphys.Onix1.NeuropixelsV2eProbeGroup.html": {
    "href": "api/OpenEphys.Onix1.NeuropixelsV2eProbeGroup.html",
    "title": "Class NeuropixelsV2eProbeGroup",
    "keywords": "NeuropixelsV2eProbeGroup A OpenEphys.ProbeInterface.NET.ProbeGroup class for NeuropixelsV2e. Properties Property Type Description"
  },
  "api/OpenEphys.Onix1.Nric1384Data.html": {
    "href": "api/OpenEphys.Onix1.Nric1384Data.html",
    "title": "Class Nric1384Data",
    "keywords": "Nric1384Data source Operator Produces a sequence of Nric1384DataFrame objects from a Nric1384 bioacquisition device. Inputs & Outputs Generates a sequence of Nric1384DataFrame objects. A sequence of Nric1384DataFrame objects. Properties Property Type Description BufferSize configuration int Gets or sets the buffer size. Buffer size sets the number of super frames that are buffered before propagating data. A super frame consists of 384 channels from the spike-band and 32 channels from the LFP band. The buffer size must be a multiple of 12. DeviceName configuration string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. For instance, it can be used to link configuration operators to data IO operators within a workflow. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for software communication."
  },
  "api/OpenEphys.Onix1.Nric1384DataFrame.html": {
    "href": "api/OpenEphys.Onix1.Nric1384DataFrame.html",
    "title": "Class Nric1384DataFrame",
    "keywords": "Nric1384DataFrame Buffered data from a Nric1384 bioacquisition device. Properties Property Type Description FrameCount int[] Gets the frame count value array. A 20-bit counter on the chip that increments its value for every frame produced. The value ranges from 0 to 1048575 (2^20-1), and should always increment by 13 (one count is taken per super-frame and there are 13 frames in a super frame) until it wraps around back to 0. This can be used to detect dropped frames. LfpData Mat Gets the LFP band data as a Mat object. LFP data has 32 rows (channels) with columns representing the samples acquired at 2.5 kHz. Each sample is a 10-bit, offset binary value encoded as a ushort. SpikeData Mat Gets the spike-band data as a Mat object. Spike-band data has 384 rows (channels) with columns representing the samples acquired at 30 kHz. Each sample is a 10-bit, offset binary value encoded as a ushort. Clock ulong[] Gets the buffered array of Clock values. HubClock ulong[] Gets the buffered array of HubClock values."
  },
  "api/OpenEphys.Onix1.OutputClockData.html": {
    "href": "api/OpenEphys.Onix1.OutputClockData.html",
    "title": "Class OutputClockData",
    "keywords": "OutputClockData source Operator Produces a sequence with a single element containing the output clock's exact hardware parameters for each subscription. This data IO operator must be linked to an appropriate configuration, such as a ConfigureOutputClock, using a shared DeviceName. Inputs & Outputs Generates a sequence containing a single OutputClockParameters structure. A sequence containing a single OutputClockParameters Properties Property Type Description DeviceName configuration string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. For instance, it can be used to link configuration operators to data IO operators within a workflow. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for software communication."
  },
  "api/OpenEphys.Onix1.OutputClockParameters.html": {
    "href": "api/OpenEphys.Onix1.OutputClockParameters.html",
    "title": "Struct OutputClockParameters",
    "keywords": "OutputClockParameters Hardware-verified output clock parameters. Properties Property Type Description Delay double Gets the exact clock delay as actualized by the clock synthesizer in seconds. DelayTicks uint Gets the exact clock delay as actualized by the clock synthesizer in units of ticks of the Acquisition Clock. DutyCycle double Gets the exact clock duty cycle as actualized by the clock synthesizer in percent. Frequency double Gets the exact clock frequency as actualized by the clock synthesizer in Hz. HighTicks uint Gets the exact clock high time per period as actualized by the clock synthesizer in units of ticks of the Acquisition Clock. LowTicks uint Gets the exact clock low time per period as actualized by the clock synthesizer in units of ticks of the Acquisition Clock. PeriodTicks uint Gets the exact clock period as actualized by the clock synthesizer in units of ticks of the Acquisition Clock."
  },
  "api/OpenEphys.Onix1.PolledBno055Data.html": {
    "href": "api/OpenEphys.Onix1.PolledBno055Data.html",
    "title": "Class PolledBno055Data",
    "keywords": "PolledBno055Data source Operator Produces a sequence of Bno055DataFrames from Bosch Bno055 9-axis inertial measurement unit (IMU) by polling it from the host computer. This data IO operator must be linked to an appropriate configuration, such as a ConfigurePolledBno055, using a shared DeviceName. Inputs & Outputs Use a ~100 Hz internal timer to generate a sequence of Bno055DataFrames. An internal timer will be used to poll the Bno055 in order to generate a sequence of Bno055DataFrames at approximately 100 Hz. This rate may be limited by hardware communication speeds (see PolledRegisters). A sequence of Bno055DataFrames. Generates a sequence of Bno055DataFrames that is driven by an input sequence. This will attempt to produce a sequence of Bno055DataFrames that is updated whenever an item in the source sequence is received. This rate may be limited by the hardware communication speeds (see PolledRegisters) and has a maximum meaningful rate of 100 Hz, which is the update rate of the sensor fusion algorithm on the Bno055 itself. A sequence to drive sampling. A sequence of Bno055DataFrames. Properties Property Type Description DeviceName configuration string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. For instance, it can be used to link configuration operators to data IO operators within a workflow. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for software communication. PolledRegisters configuration PolledBno055Registers Gets or sets which data registers should be collected from the Bno055. The rate that data is sampled is limited by communication with the Bno055 by the host PC (rather than a dedicated controller on the headstage). If the user wishes to maximize the sampling rate of particular measurements, they can select which should be sampled using this property. For instance, specifying \"Quaternion, Calibration\" means that only the quaternion and sensor calibration status registers will be polled and the rest of the members of Bno055DataFrame, with the exception of Clock and HubClock, will be set to 0. EulerAngle = 1 Quaternion = 2 Acceleration = 4 Gravity = 8 Temperature = 16 Calibration = 32 All = EulerAngle | Quaternion | Acceleration | Gravity | Temperature | Calibration"
  },
  "api/OpenEphys.Onix1.PolledBno055Registers.html": {
    "href": "api/OpenEphys.Onix1.PolledBno055Registers.html",
    "title": "Enum PolledBno055Registers",
    "keywords": "PolledBno055Registers Specifies which data registers will be read from the Bno055 during each polling cycle. Fields Field & Value Description EulerAngle = 1 Specifies that the Euler angles will be polled. Quaternion = 2 Specifies that the quaternion will be polled. Acceleration = 4 Specifies that the linear acceleration will be polled. Gravity = 8 Specifies that the gravity vector will be polled. Temperature = 16 Specifies that the temperature measurement will be polled. Calibration = 32 Specifies that the sensor calibration status will be polled. All = EulerAngle | Quaternion | Acceleration | Gravity | Temperature | Calibration Specifies that all sensor measurements and calibration status will be polled."
  },
  "api/OpenEphys.Onix1.PortName.html": {
    "href": "api/OpenEphys.Onix1.PortName.html",
    "title": "Enum PortName",
    "keywords": "PortName Specifies the physical port that a headstage is plugged into. ONIX uses a common protocol to communicate with a variety of devices using the same physical connection. For this reason lots of different headstage types can be plugged into a headstage port. Fields Field & Value Description PortA = 1 Specifies Port A. PortB = 2 Specifies Port B."
  },
  "api/OpenEphys.Onix1.PortStatus.html": {
    "href": "api/OpenEphys.Onix1.PortStatus.html",
    "title": "Class PortStatus",
    "keywords": "PortStatus source Operator Produces a sequence of port status information frames. This data IO operator must be linked to an appropriate headstage or miniscope configuration (e.g. ConfigureNeuropixelsV2eBeta) using a shared DeviceName. Inputs & Outputs Generates a sequence of PortStatusFrame objects, which contains information about the the a headstage port communication status. A PortStatusFrame will be produced only in exceptional circumstances. For instance, when the headstage becomes disconnected, a packet fails a CRC check, etc. A sequence of PortStatusFrame objects. Properties Property Type Description DeviceName string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. For instance, it can be used to link configuration operators to data IO operators within a workflow. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for software communication."
  },
  "api/OpenEphys.Onix1.PortStatusCode.html": {
    "href": "api/OpenEphys.Onix1.PortStatusCode.html",
    "title": "Enum PortStatusCode",
    "keywords": "PortStatusCode Specifies the headstage port status codes. Fields Field & Value Description SerdesLock = 1 Specifies the SERDES forward channel lock status. SerdesParityPass = 2 Specifies the SERDES on-chip parity check status. CrcError = 256 Specifies a cyclic redundancy check failure during data transmission. TooManyDevices = 512 Specifies that too many devices were indicated in the hub device table. InitializationError = 1024 Specifies a hub initialization error. BadPacketFormat = 2048 Specifies the receipt of a badly formatted data packet. InitializationCrcError = 4096 Specifies the a cyclic redundancy check failure during hub initialization."
  },
  "api/OpenEphys.Onix1.PortStatusFrame.html": {
    "href": "api/OpenEphys.Onix1.PortStatusFrame.html",
    "title": "Class PortStatusFrame",
    "keywords": "PortStatusFrame Port status information. Properties Property Type Description StatusCode PortStatusCode Gets the port status code. SerdesLock = 1 SerdesParityPass = 2 CrcError = 256 TooManyDevices = 512 InitializationError = 1024 BadPacketFormat = 2048 InitializationCrcError = 4096 Clock ulong Gets the acquisition clock count. Acquisition clock count that is synchronous for all frames collected within an ONI context created using CreateContext. The acquisition clock rate is given by AcquisitionClockHz. This clock value provides a common, synchronized time base for all data collected with an single ONI context. HubClock ulong Gets the hub clock count. Local, potentially asynchronous, clock count. Aside from the synchronous Clock value, data frames also contain a local clock count produced within the oni.Hub that the data was actually produced within. For instance, a headstage may contain an onboard controller for controlling devices and arbitrating data stream that runs asynchronously from the AcquisitionClockHz. This value is therefore the most precise way to compare the sample time of data collected within a given oni.Hub. However, the delay between time of data collection and synchronous time stamping by Clock is very small (sub-microsecond) and this value can therefore be disregarded in most scenarios in favor of Clock."
  },
  "api/OpenEphys.Onix1.Rhd2164AnalogHighCutoff.html": {
    "href": "api/OpenEphys.Onix1.Rhd2164AnalogHighCutoff.html",
    "title": "Enum Rhd2164AnalogHighCutoff",
    "keywords": "Rhd2164AnalogHighCutoff Specifies the upper cutoff frequency of the Rhd2164 analog (pre-ADC) bandpass filter. Fields Field & Value Description High20000Hz = 0 Specifies 20 kHz. High15000Hz = 1 Specifies 15 kHz. High10000Hz = 2 Specifies 10 kHz. High7500Hz = 3 Specifies 7.5 kHz. High5000Hz = 4 Specifies 5 kHz. High3000Hz = 5 Specifies 3 kHz. High2500Hz = 6 Specifies 2.5 kHz. High2000Hz = 7 Specifies 2 kHz. High1500Hz = 8 Specifies 1.5 kHz. High1000Hz = 9 Specifies 1 kHz. High750Hz = 10 Specifies 750 Hz. High500Hz = 11 Specifies 500 Hz. High300Hz = 12 Specifies 300 Hz. High250Hz = 13 Specifies 250 Hz. High200Hz = 14 Specifies 200 Hz. High150Hz = 15 Specifies 150 Hz. High100Hz = 16 Specifies 100 Hz."
  },
  "api/OpenEphys.Onix1.Rhd2164AnalogLowCutoff.html": {
    "href": "api/OpenEphys.Onix1.Rhd2164AnalogLowCutoff.html",
    "title": "Enum Rhd2164AnalogLowCutoff",
    "keywords": "Rhd2164AnalogLowCutoff Specifies the lower cutoff frequency of the Rhd2164 analog (pre-ADC) bandpass filter. Fields Field & Value Description Low500Hz = 0 Specifies 500 Hz. Low300Hz = 1 Specifies 300 Hz. Low250Hz = 2 Specifies 250 Hz. Low200Hz = 3 Specifies 200 Hz. Low150Hz = 4 Specifies 150 Hz. Low100Hz = 5 Specifies 100 Hz. Low75Hz = 6 Specifies 75 Hz. Low50Hz = 7 Specifies 50 Hz. Low30Hz = 8 Specifies 30 Hz. Low25Hz = 9 Specifies 25 Hz. Low20Hz = 10 Specifies 20 Hz. Low15Hz = 11 Specifies 15 Hz. Low10Hz = 12 Specifies 10 Hz. Low7500mHz = 13 Specifies 7.5 Hz. Low5000mHz = 14 Specifies 5 Hz. Low3000mHz = 15 Specifies 3 Hz. Low2500mHz = 16 Specifies 2.5 Hz. Low2000mHz = 17 Specifies 2 Hz. Low1500mHz = 18 Specifies 1.5 Hz. Low1000mHz = 19 Specifies 1 Hz. Low750mHz = 20 Specifies 0.75 Hz. Low500mHz = 21 Specifies 0.5 Hz. Low300mHz = 22 Specifies 0.3 Hz. Low250mHz = 23 Specifies 0.25 Hz. Low100mHz = 24 Specifies 0.1 Hz."
  },
  "api/OpenEphys.Onix1.Rhd2164Data.html": {
    "href": "api/OpenEphys.Onix1.Rhd2164Data.html",
    "title": "Class Rhd2164Data",
    "keywords": "Rhd2164Data source Operator Produces a sequence of Rhd2164DataFrame objects with data from an Intan Rhd2164 bioacquisition chip. This data IO operator must be linked to an appropriate configuration, such as a ConfigureRhd2164, using a shared DeviceName. Inputs & Outputs Generates a sequence of Rhd2164DataFrame objects, each of which are a buffered set of multichannel samples an Rhd2164 device. A sequence of Rhd2164DataFrame objects. Properties Property Type Description BufferSize configuration int Gets or sets the number of samples collected for each channel that are used to create a single Rhd2164DataFrame. This property determines the number of samples that are buffered for each electrophysiology and auxiliary channel produced by the Rhd2164 chip before data is propagated. For instance, if this value is set to 30, then 30 samples, along with corresponding clock values, will be collected from each of the electrophysiology and auxiliary channels and packed into each Rhd2164DataFrame. Because channels are sampled at 30 kHz, this is equivalent to 1 millisecond of data from each channel. DeviceName configuration string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. For instance, it can be used to link configuration operators to data IO operators within a workflow. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for software communication."
  },
  "api/OpenEphys.Onix1.Rhd2164DataFrame.html": {
    "href": "api/OpenEphys.Onix1.Rhd2164DataFrame.html",
    "title": "Class Rhd2164DataFrame",
    "keywords": "Rhd2164DataFrame Electrophysiology data produced by an Rhd2164 bioamplifier chip. Properties Property Type Description AmplifierData Mat Gets the buffered electrophysiology data array. Each row corresponds to a channel. Each column corresponds to a sample whose time is indicated by the corresponding element Clock and HubClock. Samples are 16-bits each and are represented using unsigned 16-bit integers. To convert to micro-volts, the following equation can be used: V_electrode (uV) = 0.195 µV × (ADC result – 32768) AuxData Mat Gets the buffered auxiliary data array. Each row corresponds to a channel. Each column corresponds to a sample whose time is indicated by the corresponding element Clock and HubClock. Clock ulong[] Gets the buffered array of Clock values. HubClock ulong[] Gets the buffered array of HubClock values."
  },
  "api/OpenEphys.Onix1.Rhd2164DspCutoff.html": {
    "href": "api/OpenEphys.Onix1.Rhd2164DspCutoff.html",
    "title": "Enum Rhd2164DspCutoff",
    "keywords": "Rhd2164DspCutoff Specifies the cutoff frequency of the Rhd2164 digital (post-ADC) high-pass filter. Fields Field & Value Description Differential = 0 Specifies differences between adjacent samples of each channel (approximate first-order derivative). Dsp3309Hz = 1 Specifies 3309 Hz. Dsp1374Hz = 2 Specifies 1374 Hz. Dsp638Hz = 3 Specifies 638 Hz. Dsp308Hz = 4 Specifies 308 Hz. Dsp152Hz = 5 Specifies 152 Hz. Dsp75Hz = 6 Specifies 75.2 Hz. Dsp37Hz = 7 Specifies 37.4 Hz. Dsp19Hz = 8 Specifies 18.7 Hz. Dsp9336mHz = 9 Specifies 9.34 Hz. Dsp4665mHz = 10 Specifies 4.67 Hz. Dsp2332mHz = 11 Specifies 2.33 Hz. Dsp1166mHz = 12 Specifies 1.17 Hz. Dsp583mHz = 13 Specifies 0.583 Hz. Dsp291mHz = 14 Specifies 0.291 Hz. Dsp146mHz = 15 Specifies 0.146 Hz. Off = 16 Specifies that no digital high-pass filtering should be applied."
  },
  "api/OpenEphys.Onix1.Rhs2116AnalogHighCutoff.html": {
    "href": "api/OpenEphys.Onix1.Rhs2116AnalogHighCutoff.html",
    "title": "Enum Rhs2116AnalogHighCutoff",
    "keywords": "Rhs2116AnalogHighCutoff Specifies the upper cutoff frequency of the pre-ADC amplifiers. Fields Field & Value Description High20000Hz = 0 Specifies 20 kHz. High15000Hz = 1 Specifies 15 kHz. High10000Hz = 2 Specifies 10 kHz. High7500Hz = 3 Specifies 7.5 kHz. High5000Hz = 4 Specifies 5 kHz. High3000Hz = 5 Specifies 3 kHz. High2500Hz = 6 Specifies 2.5 kHz. High2000Hz = 7 Specifies 2 kHz. High1500Hz = 8 Specifies 1.5 kHz. High1000Hz = 9 Specifies 1 kHz. High750Hz = 10 Specifies 750 Hz. High500Hz = 11 Specifies 500 Hz. High300Hz = 12 Specifies 300 Hz. High250Hz = 13 Specifies 250 Hz. High200Hz = 14 Specifies 200 Hz. High150Hz = 15 Specifies 150 Hz. High100Hz = 16 Specifies 100 Hz."
  },
  "api/OpenEphys.Onix1.Rhs2116AnalogLowCutoff.html": {
    "href": "api/OpenEphys.Onix1.Rhs2116AnalogLowCutoff.html",
    "title": "Enum Rhs2116AnalogLowCutoff",
    "keywords": "Rhs2116AnalogLowCutoff Specifies the lower cutoff frequency of the pre-ADC amplifiers. Fields Field & Value Description Low1000Hz = 0 Specifies 1000 Hz. Low500Hz = 1 Specifies 500 Hz. Low300Hz = 2 Specifies 300 Hz. Low250Hz = 3 Specifies 250 Hz. Low200Hz = 4 Specifies 200 Hz. Low150Hz = 5 Specifies 150 Hz. Low100Hz = 6 Specifies 100 Hz. Low75Hz = 7 Specifies 75 Hz. Low50Hz = 8 Specifies 50 Hz. Low30Hz = 9 Specifies 30 Hz. Low25Hz = 10 Specifies 25 Hz. Low20Hz = 11 Specifies 20 Hz. Low15Hz = 12 Specifies 15 Hz. Low10Hz = 13 Specifies 10 Hz. Low7500mHz = 14 Specifies 7.5 Hz. Low5000mHz = 15 Specifies 5 Hz. Low3090mHz = 16 Specifies 3.09 Hz. Low2500mHz = 17 Specifies 2.5 Hz. Low2000mHz = 18 Specifies 2 Hz. Low1500mHz = 19 Specifies 1.5 Hz. Low1000mHz = 20 Specifies 1 Hz. Low750mHz = 21 Specifies 0.75 Hz. Low500mHz = 22 Specifies 0.5 Hz. Low300mHz = 23 Specifies 0.3 Hz. Low250mHz = 24 Specifies 0.25 Hz. Low100mHz = 25 Specifies 0.1 Hz."
  },
  "api/OpenEphys.Onix1.Rhs2116Data.html": {
    "href": "api/OpenEphys.Onix1.Rhs2116Data.html",
    "title": "Class Rhs2116Data",
    "keywords": "Rhs2116Data source Operator Produces a sequence of Rhs2116DataFrame objects with data from an Intan Rhs2116 bioacquisition chip. This data IO operator must be linked to an appropriate configuration, such as a ConfigureRhs2116, using a shared DeviceName. Inputs & Outputs Generates a sequence of Rhs2116DataFrames. A sequence of Rhs2116DataFrames. Properties Property Type Description BufferSize int Gets or sets the buffer size. This property determines the number of samples that are collected from each of the 16 ephys channels before data is propagated. For instance, if this value is set to 30, then 16x30 samples, along with 30 corresponding clock values, will be collected and packed into each Rhs2116DataFrame. Because channels are sampled at 30 kHz, this is equivalent to 1 millisecond of data from each channel. DeviceName string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. For instance, it can be used to link configuration operators to data IO operators within a workflow. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for software communication."
  },
  "api/OpenEphys.Onix1.Rhs2116DataFrame.html": {
    "href": "api/OpenEphys.Onix1.Rhs2116DataFrame.html",
    "title": "Class Rhs2116DataFrame",
    "keywords": "Rhs2116DataFrame Buffered data from an RHS2116 device. Properties Property Type Description AmplifierData Mat Gets the high-gain AC-coupled ephys amplifier data. Each row corresponds to a channel. Each column corresponds to a sample whose time is indicated by the corresponding element Clock and HubClock. Samples are 16-bits each and are represented using unsigned 16-bit integers. To convert to microvolts, the following equation can be used: V_electrode (µV) = 0.195 µV × (ADC result – 32768) DCData Mat Gets the DC-coupled low-gain amplifier data for monitoring stimulation waveforms. Each row corresponds to a channel. Each column corresponds to a sample whose time is indicated by the corresponding element Clock and HubClock. Samples are 10-bits each and are represented using unsigned 16-bit integers. To convert to millivolts, the following equation can be used: V_electrode (mV) = -19.23 mV × (ADC result – 512) Clock ulong[] Gets the buffered array of Clock values. HubClock ulong[] Gets the buffered array of HubClock values."
  },
  "api/OpenEphys.Onix1.Rhs2116DspCutoff.html": {
    "href": "api/OpenEphys.Onix1.Rhs2116DspCutoff.html",
    "title": "Enum Rhs2116DspCutoff",
    "keywords": "Rhs2116DspCutoff Specifies the cutoff frequency for the DSP high-pass filter used for amplifier offset removal. Fields Field & Value Description Differential = 0 Specifies out = samp[n] - samp[n-1]. Dsp3309Hz = 1 Specifies 3309 Hz. Dsp1374Hz = 2 Specifies 1374 Hz. Dsp638Hz = 3 Specifies 638 Hz. Dsp308Hz = 4 Specifies 308 Hz. Dsp152Hz = 5 Specifies 152 Hz. Dsp75Hz = 6 Specifies 75.2 Hz. Dsp37Hz = 7 Specifies 37.4 Hz. Dsp19Hz = 8 Specifies 18.7 Hz. Dsp9336mHz = 9 Specifies 9.34 Hz. Dsp4665mHz = 10 Specifies 4.67 Hz. Dsp2332mHz = 11 Specifies 2.33 Hz. Dsp1166mHz = 12 Specifies 1.17 Hz. Dsp583mHz = 13 Specifies 0.583 Hz. Dsp291mHz = 14 Specifies 0.291 Hz. Dsp146mHz = 15 Specifies 0.146 Hz. Off = 16 Specifies no cutoff."
  },
  "api/OpenEphys.Onix1.Rhs2116PairData.html": {
    "href": "api/OpenEphys.Onix1.Rhs2116PairData.html",
    "title": "Class Rhs2116PairData",
    "keywords": "Rhs2116PairData source Operator Produces a sequence of Rhs2116DataFrame objects from a Rhs2116Pair. This data IO operator must be linked to an appropriate configuration, such as a ConfigureRhs2116Pair, using a shared DeviceName. Inputs & Outputs Generates a sequence of Rhs2116DataFrames. A sequence of Rhs2116DataFrames. Properties Property Type Description BufferSize int Gets or sets the buffer size. This property determines the number of samples that are collected from each of the 16 ephys channels before data is propagated. For instance, if this value is set to 30, then 16x30 samples, along with 30 corresponding clock values, will be collected and packed into each Rhs2116DataFrame. Because channels are sampled at 30 kHz, this is equivalent to 1 millisecond of data from each channel. DeviceName string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. For instance, it can be used to link configuration operators to data IO operators within a workflow. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for software communication."
  },
  "api/OpenEphys.Onix1.Rhs2116ProbeGroup.html": {
    "href": "api/OpenEphys.Onix1.Rhs2116ProbeGroup.html",
    "title": "Class Rhs2116ProbeGroup",
    "keywords": "Rhs2116ProbeGroup A OpenEphys.ProbeInterface.NET.ProbeGroup class for RHS2116. Properties Property Type Description"
  },
  "api/OpenEphys.Onix1.Rhs2116StepSize.html": {
    "href": "api/OpenEphys.Onix1.Rhs2116StepSize.html",
    "title": "Enum Rhs2116StepSize",
    "keywords": "Rhs2116StepSize Specifies the size of the amplitude increase per step. Fields Field & Value Description Step10nA = 0 Specifies 0.01 µA per step. Step20nA = 1 Specifies 0.02 µA per step. Step50nA = 2 Specifies 0.05 µA per step. Step100nA = 3 Specifies 0.1 µA per step. Step200nA = 4 Specifies 0.2 µA per step. Step500nA = 5 Specifies 0.5 µA per step. Step1000nA = 6 Specifies 1 µA per step. Step2000nA = 7 Specifies 2 µA per step. Step5000nA = 8 Specifies 5 µA per step. Step10000nA = 9 Specifies 10 µA per step."
  },
  "api/OpenEphys.Onix1.Rhs2116Stimulus.html": {
    "href": "api/OpenEphys.Onix1.Rhs2116Stimulus.html",
    "title": "Class Rhs2116Stimulus",
    "keywords": "Rhs2116Stimulus Defines a single stimulus sequence for a channel on an RHS2116 device. Properties Property Type Description AnodicAmplitudeSteps byte Number of steps defining the amplitude of the anodic pulse. See Rhs2116StepSize to see the amplitude per step. AnodicFirst bool Send an anodic pulse first if true. AnodicWidthSamples uint Number of samples the anodic pulse is delivered. CathodicAmplitudeSteps byte Number of steps defining the amplitude of the cathodic pulse. See Rhs2116StepSize to see the amplitude per step. CathodicWidthSamples uint Number of samples the cathodic pulse is delivered. DelaySamples uint Number of samples to delay before sending the first pulse after a trigger is received. DwellSamples uint Number of samples between anodic and cathodic pulses (inter-pulse interval). InterStimulusIntervalSamples uint Number of samples between pairs of pulses. NumberOfStimuli uint Number of stimuli delivered for each trigger."
  },
  "api/OpenEphys.Onix1.Rhs2116StimulusSequence.html": {
    "href": "api/OpenEphys.Onix1.Rhs2116StimulusSequence.html",
    "title": "Class Rhs2116StimulusSequence",
    "keywords": "Rhs2116StimulusSequence A stimulus sequence for a Rhs2116 device. Properties Property Type Description CurrentStepSize Rhs2116StepSize Gets or sets the Rhs2116StepSize. Step10nA = 0 Step20nA = 1 Step50nA = 2 Step100nA = 3 Step200nA = 4 Step500nA = 5 Step1000nA = 6 Step2000nA = 7 Step5000nA = 8 Step10000nA = 9 CurrentStepSizeuA double Gets the current step size in µA. FitsInHardware bool Does the sequence fit in hardware. MaxMemorySlotsAvailable int The maximum number of memory slots available. MaxPossibleAmplitudePerPhaseMicroAmps double Gets the maximum possible amplitude for a single pulse, in µA. MaximumPeakToPeakAmplitudeSteps int Maximum peak to peak amplitude of the sequence across all channels. SequenceLengthSamples uint Maximum length of the sequence across all channels. Stimuli Rhs2116Stimulus[] Gets or sets the array of Rhs2116Stimulus sequences. StimulusSlotsRequired int Number of hardware memory slots required by the sequence. Valid bool Is the stimulus sequence well defined."
  },
  "api/OpenEphys.Onix1.Rhs2116StimulusSequencePair.html": {
    "href": "api/OpenEphys.Onix1.Rhs2116StimulusSequencePair.html",
    "title": "Class Rhs2116StimulusSequencePair",
    "keywords": "Rhs2116StimulusSequencePair A pair of stimulus sequences for two Rhs2116 devices. Properties Property Type Description CurrentStepSize Rhs2116StepSize Gets or sets the Rhs2116StepSize. Step10nA = 0 Step20nA = 1 Step50nA = 2 Step100nA = 3 Step200nA = 4 Step500nA = 5 Step1000nA = 6 Step2000nA = 7 Step5000nA = 8 Step10000nA = 9 CurrentStepSizeuA double Gets the current step size in µA. FitsInHardware bool Gets a boolean indicating if the sequence will fit in hardware. MaxMemorySlotsAvailable int Gets the the maximum number of hardware memory slots available. MaximumPeakToPeakAmplitudeSteps int Gets the maximum peak to peak amplitude of the sequence across all channels. SequenceLengthSamples uint Gets the maximum length of the sequence across all channels. Stimuli Rhs2116Stimulus[] Gets or sets the Rhs2116Stimulus array of stimuli. StimulusSlotsRequired int Gets the number of hardware memory slots required by the sequence. Valid bool Gets the boolean indicating if the stimulus sequence is well defined."
  },
  "api/OpenEphys.Onix1.Rhs2116StimulusTrigger.html": {
    "href": "api/OpenEphys.Onix1.Rhs2116StimulusTrigger.html",
    "title": "Class Rhs2116StimulusTrigger",
    "keywords": "Rhs2116StimulusTrigger sink Operator Controls an RHS2116 stimulus sequence. This operator must be linked to an appropriate configuration, such as a ConfigureHeadstageRhs2116, using a shared DeviceName. Inputs & Outputs Start an electrical stimulus sequence. A sequence of double values that start the stimulus sequence when received. A sequence of double values that is identical to source Properties Property Type Description DeviceName string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. For instance, it can be used to link configuration operators to data IO operators within a workflow. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for software communication."
  },
  "api/OpenEphys.Onix1.Rhs2116TriggerSource.html": {
    "href": "api/OpenEphys.Onix1.Rhs2116TriggerSource.html",
    "title": "Enum Rhs2116TriggerSource",
    "keywords": "Rhs2116TriggerSource Specifies the source for triggers. Fields Field & Value Description Local = 0 Respect local triggers (e.g. via GPIO or TRIGGER register) and broadcast via sync pin. External = 1 Receiver. Only respect triggers received from sync pin."
  },
  "api/OpenEphys.Onix1.SingleDeviceFactory.html": {
    "href": "api/OpenEphys.Onix1.SingleDeviceFactory.html",
    "title": "Class SingleDeviceFactory",
    "keywords": "SingleDeviceFactory Abstract base for configuration operators responsible for registering a single device within the internal device manager. ONI devices usually require a specific sequence of configuration and parameterization steps before they can be interacted with. The SingleDeviceFactory provides a modular abstraction allowing flexible assembly and sequencing of of all device-specific configuration code. Properties Property Type Description DeviceAddress configuration uint Gets or sets the device address. This is a fully-qualified numerical hardware address of a device within the device table produced by an Open Neuro Interface (ONI) compliant acquisition system. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for hardware communication. DeviceName configuration string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. For instance, it can be used to link configuration operators to data IO operators within a workflow. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for software communication."
  },
  "api/OpenEphys.Onix1.StartAcquisition.html": {
    "href": "api/OpenEphys.Onix1.StartAcquisition.html",
    "title": "Class StartAcquisition",
    "keywords": "StartAcquisition combinator Operator Starts data acquisition and frame distribution on a ContextTask. The Open Neuro Interface (ONI) hardware specification and API describe a general purpose acquisition system architecture and programming interface for communication with a host PC. One requirement of ONI is a sequence of events that must occur in order to start synchronized data acquisition. StartAcquisition performs these required actions on one or more ContextTasks provided in its input sequence. Once acquisition is started, devices managed by a particular ContextTask will start to produce data in a format called an ONI Data Frame. The output sequence of this operator is therefore a IGroupedObservable<TKey, TElement>, where Tkey Is the address of a particular hardware device within a single ContextTask. TElement Is a ONI Frame produced by the device with address Tkey. These pre-sorted frame sequences can be interpreted by downstream Data I/O operators (e.g. AnalogInput or Bno055Data) that convert ONI Data Frames into data types that are are more amenable to processing within Bonsai workflows. Inputs & Outputs Starts data acquisition and frame distribution on a ContextTask and returns the sequence of all received oni.Frame objects, grouped by device address. The sequence of ContextTask objects on which to start data acquisition and frame distribution. A sequence of data frames produced by each ContextTask in the input sequence and grouped by device address. Properties Property Type Description ReadSize configuration int Gets or sets the number of bytes read per cycle of the ContextTask's acquisition thread. This option allows control over a fundamental trade-off between closed-loop response time and available bandwidth. A minimal value, which is determined by MaxReadFrameSize, will provide the lowest response latency, so long as data can be cleared from hardware memory fast enough to prevent buffering. Larger values will both reduce system call frequency and reduce the number of function calls per unit time performed by Bonsai, and therefore, increase available bandwidth. Larger values may improve processing performance for high-bandwidth data sources. The optimal value depends on the host computer and hardware configuration and must be determined via testing (e.g. using MemoryMonitorData). WriteSize configuration int Gets or sets the number of bytes that are pre-allocated for writing data to hardware. This value determines the amount of memory that is pre-allocated for calls to Write(uint, IntPtr, int), Write<T>(uint, T), and Write<T>(uint, T[]). A larger size will reduce the frequency of dynamic memory allocation system calls but increase the expense of each of those calls. The minimum size of this option is determined by MaxWriteFrameSize. The effect on real-time performance is typically not as large as that of BlockReadSize because this parameter defines a readily-available pool of memory for the creation of output data frames, but does not determine when they are written to hardware. Data is written to hardware as soon as an output frame has been created. In contrast data is read from hardware whenever more than ReadSize bytes have accumulated in the input buffer."
  },
  "api/OpenEphys.Onix1.TS4231V1Data.html": {
    "href": "api/OpenEphys.Onix1.TS4231V1Data.html",
    "title": "Class TS4231V1Data",
    "keywords": "TS4231V1Data source Operator Produces a sequence of decoded optical signals produced one or more SteamVR V1 base station(s). This data IO operator must be linked to an appropriate configuration, such as a ConfigureTS4231V1, using a shared DeviceName. The data produced by this class contains individual base station pulse/sweep codes and timing information. These data provide rapid updates that constrain the possible position of a sensor and therefore can be combined with orientation information in a downstream predictive model (e.g. Kalman filter) for high-accuracy and robust position tracking. To produce naïve position estimates, use the TS4231V1PositionData operator instead of this one. Inputs & Outputs Generates a sequence of TS4231V1DataFrame objects, each of which contains information on a single lighthouse optical sweep or pulse. A sequence of TS4231V1DataFrame objects. Properties Property Type Description DeviceName configuration string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. For instance, it can be used to link configuration operators to data IO operators within a workflow. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for software communication."
  },
  "api/OpenEphys.Onix1.TS4231V1DataFrame.html": {
    "href": "api/OpenEphys.Onix1.TS4231V1DataFrame.html",
    "title": "Class TS4231V1DataFrame",
    "keywords": "TS4231V1DataFrame A single synchronization pulse or light sweep from a SteamVR V1 base station. Properties Property Type Description EnvelopeType TS4231V1Envelope Gets the pulse or sweep classification. Bad = -1 J0 = 0 K0 = 1 J1 = 2 K1 = 3 J2 = 4 K2 = 5 J3 = 6 K3 = 7 Sweep = 8 EnvelopeWidth double Gets the width of the envelope of the modulated optical pulse or sweep in microseconds. SensorIndex int Gets the index of the TS4231 sensor that produced this data. Clock ulong Gets the acquisition clock count. Acquisition clock count that is synchronous for all frames collected within an ONI context created using CreateContext. The acquisition clock rate is given by AcquisitionClockHz. This clock value provides a common, synchronized time base for all data collected with an single ONI context. HubClock ulong Gets the hub clock count. Local, potentially asynchronous, clock count. Aside from the synchronous Clock value, data frames also contain a local clock count produced within the oni.Hub that the data was actually produced within. For instance, a headstage may contain an onboard controller for controlling devices and arbitrating data stream that runs asynchronously from the AcquisitionClockHz. This value is therefore the most precise way to compare the sample time of data collected within a given oni.Hub. However, the delay between time of data collection and synchronous time stamping by Clock is very small (sub-microsecond) and this value can therefore be disregarded in most scenarios in favor of Clock."
  },
  "api/OpenEphys.Onix1.TS4231V1Envelope.html": {
    "href": "api/OpenEphys.Onix1.TS4231V1Envelope.html",
    "title": "Enum TS4231V1Envelope",
    "keywords": "TS4231V1Envelope Specifies the SteamVR V1 base station optical signal classification. Fields Field & Value Description Bad = -1 Specifies and invalid optical signal. J0 = 0 Specifies a synchronization pulse with 50.0 μS < width ≤ 62.5 μS K0 = 1 Specifies a synchronization pulse with 62.5 μS < width ≤ 72.9 μS J1 = 2 Specifies a synchronization pulse with 72.9 μS < width ≤ 83.3 μS K1 = 3 Specifies a synchronization pulse with 83.3 μS < width ≤ 93.8 μS J2 = 4 Specifies a synchronization pulse with 93.8 μS < width ≤ 104 μS K2 = 5 Specifies a synchronization pulse with 104 μS < width ≤ 115 μS J3 = 6 Specifies a synchronization pulse with 115 μS < width ≤ 125 μS K3 = 7 Specifies a synchronization pulse with 125 μS < width ≤ 135 μS Sweep = 8 Specifies a light sheet sweep (width ≤ 50 μS)"
  },
  "api/OpenEphys.Onix1.TS4231V1PositionData.html": {
    "href": "api/OpenEphys.Onix1.TS4231V1PositionData.html",
    "title": "Class TS4231V1PositionData",
    "keywords": "TS4231V1PositionData source Operator Produces a sequence of 3D positions from an array of Triad Semiconductor TS4231 receivers beneath a pair of SteamVR V1 base stations. This data IO operator must be linked to an appropriate configuration, such as a ConfigureTS4231V1, using a shared DeviceName. The data produced by this class contains naïve geometric estimates of positions of photodiodes attached to each TS4231 chip. This operator makes the following assumptions about the setup: Two SteamVR V1 base stations are used. The base stations have been synchronized with a patch cable and their modes set to ‘A’ and ‘b’, respectively. The base stations are pointed in the same direction. The Z-axis extends away the emitting face of lighthouses, X along the direction of the text on the back label, and Y from bottom to top text on the back label. This operator collects a sequence of oni.Frame objects from each TS3231 receiver that are used to determine the ray from each base station to the TS3231's photodiode. A simple geometric inversion is performed to determine the photodiodes 3D position from the values P and Q. It does not use a predictive model or integrate data from an IMU and is therefore quite sensitive to obstructions and will require post-hoc processing to correct systematic errors due to optical aberrations and nonlinearities. The the TS4231V1Data operator provides access to individual lighthouse signals that is useful for a creating more robust position estimates using downstream processing. Inputs & Outputs Generates a sequence of TS4231V1PositionDataFrame objects, each of which contains the 3D position of single photodiode. A sequence of TS4231V1PositionDataFrame objects. Properties Property Type Description DeviceName configuration string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. For instance, it can be used to link configuration operators to data IO operators within a workflow. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for software communication. P configuration Point3d Gets or sets the position of the first base station in arbitrary units. The units used will determine the units of Position and must match those used in Q. Typically this value is used to define the origin and remains at (0, 0, 0). Q configuration Point3d Gets or sets the position of the second base station in arbitrary units. The units used will determine the units of Position and must match those used in P."
  },
  "api/OpenEphys.Onix1.TS4231V1PositionDataFrame.html": {
    "href": "api/OpenEphys.Onix1.TS4231V1PositionDataFrame.html",
    "title": "Class TS4231V1PositionDataFrame",
    "keywords": "TS4231V1PositionDataFrame 3D position of a single photodiode within a TS4231 sensor array. A sequence of 12 oni.Frame objects produced by a single TS4231 sensor are required to geometrically calculate the position of the sensor's photodiode in 3D space. Properties Property Type Description Clock ulong Gets the acquisition clock count. Acquisition clock count that is synchronous for all frames collected within an ONI context created using CreateContext. The acquisition clock rate is given by AcquisitionClockHz. This clock value provides a common, synchronized time base for all data collected with an single ONI context. HubClock ulong Gets the acquisition clock count. Acquisition clock count that is synchronous for all frames collected within an ONI context created using CreateContext. The acquisition clock rate is given by AcquisitionClockHz. This clock value provides a common, synchronized time base for all data collected with an single ONI context. Position Vector3 Gets the 3D position of the photodiode connected to the TS4231 receiver with index SensorIndex in units determined by P and Q. SensorIndex int Gets the index of the TS4231 sensor that produced this data."
  },
  "api/OpenEphys.Onix1.UclaMiniscopeV4CameraData.UclaMiniscopeV4ImageDepth.html": {
    "href": "api/OpenEphys.Onix1.UclaMiniscopeV4CameraData.UclaMiniscopeV4ImageDepth.html",
    "title": "Enum UclaMiniscopeV4CameraData.UclaMiniscopeV4ImageDepth",
    "keywords": "UclaMiniscopeV4CameraData.UclaMiniscopeV4ImageDepth Specifies the bit-depth used to represent pixel intensity values. Fields Field & Value Description U8 = 0 8-bit pixel values encoded as bytes. U10 = 1 10-bit pixel values encoded as unsigned 16-bit integers"
  },
  "api/OpenEphys.Onix1.UclaMiniscopeV4CameraData.html": {
    "href": "api/OpenEphys.Onix1.UclaMiniscopeV4CameraData.html",
    "title": "Class UclaMiniscopeV4CameraData",
    "keywords": "UclaMiniscopeV4CameraData source Operator Produces a sequence of UclaMiniscopeV4CameraFrames from the Python-480 image sensor on a UCLA Miniscope V4. Inputs & Outputs Generates a sequence of UclaMiniscopeV4CameraFrames at a rate determined by FrameRate. A sequence of UclaMiniscopeV4CameraFrames Properties Property Type Description DataType configuration UclaMiniscopeV4CameraData.UclaMiniscopeV4ImageDepth Gets or sets the data type used to represent pixel intensity values. The UCLA Miniscope V4 uses a 10-bit image sensor. To capture images that use the full ADC resolution, this value can be set to U10. This comes at the cost of limited codec support and larger file sizes. If U8 is selected, the two least significant bits of each pixel sample will be discarded, which greatly increases codec options and reduces file sizes. Further, we have noticed that Bonsai introduces flickering in the real-time video visualizer when using 10-bit data. These artifacts are not present in the data itself, only in the real-time visualizer. U8 = 0 U10 = 1 DeviceName configuration string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. For instance, it can be used to link configuration operators to data IO operators within a workflow. This value is usually not set manually, but is assigned in a MultiDeviceFactory to correspond to a fixed address with a piece of hardware such as a headstage. This address is used for software communication."
  },
  "api/OpenEphys.Onix1.UclaMiniscopeV4CameraFrame.html": {
    "href": "api/OpenEphys.Onix1.UclaMiniscopeV4CameraFrame.html",
    "title": "Class UclaMiniscopeV4CameraFrame",
    "keywords": "UclaMiniscopeV4CameraFrame Image data produced by the Python-480 CMOS image sensor on a UCLA Miniscope V4. Properties Property Type Description Image IplImage Gets the 608x608 pixel, 10-bit, monochrome image. Clock ulong[] Gets the buffered array of Clock values. HubClock ulong[] Gets the buffered array of HubClock values."
  },
  "api/OpenEphys.Onix1.UclaMiniscopeV4FramesPerSecond.html": {
    "href": "api/OpenEphys.Onix1.UclaMiniscopeV4FramesPerSecond.html",
    "title": "Enum UclaMiniscopeV4FramesPerSecond",
    "keywords": "UclaMiniscopeV4FramesPerSecond Specifies the video frame rate of the Python-480 image sensor on a UCLA Miniscope V4. Fields Field & Value Description Fps10Hz = 0 Specifies 10 frames per second. Fps15Hz = 1 Specifies 15 frames per second. Fps20Hz = 2 Specifies 20 frames per second. Fps25Hz = 3 Specifies 25 frames per second. Fps30Hz = 4 Specifies 30 frames per second."
  },
  "api/OpenEphys.Onix1.UclaMiniscopeV4SensorGain.html": {
    "href": "api/OpenEphys.Onix1.UclaMiniscopeV4SensorGain.html",
    "title": "Enum UclaMiniscopeV4SensorGain",
    "keywords": "UclaMiniscopeV4SensorGain Specifies analog gain of the Python-480 image sensor on a UCLA Miniscope V4. Fields Field & Value Description Low = 225 Specifies low gain. Medium = 228 Specifies medium gain. High = 36 Specifies high gain."
  },
  "api/OpenEphys.Onix1.html": {
    "href": "api/OpenEphys.Onix1.html",
    "title": "OpenEphys.Onix1",
    "keywords": "OpenEphys.Onix1 OpenEphys.Onix1 is a Bonsai package containing interfaces for data acquisition and control of ONIX hardware. This section of the docs is dedicated to facilitate construction of workflows using the OpenEphys.Onix1 package. In Bonsai, press F1 while an OpenEphys.Onix1 node is selected in the workflow editor to quickly open this reference."
  },
  "api/configure.html": {
    "href": "api/configure.html",
    "title": "Configuration Operators",
    "keywords": "Configuration Operators Aggregate configuration operators belong in a top-level chain of operators between CreateContext and StartAcquisition to configure ONIX hardware hubs. These are known as aggregate configuration operators because they configure an aggregation of devices (also referred to as a hub) on a given headstage, miniscope, breakout board, etc.."
  },
  "api/constants.html": {
    "href": "api/constants.html",
    "title": "Constants",
    "keywords": "Constants These constants are used throughout the OpenEphys.Onix1 Bonsai package to assign names to numbered values."
  },
  "api/core.html": {
    "href": "api/core.html",
    "title": "Core Operators",
    "keywords": "Core Operators Core operators form a motif that serves as the basis of every workflow that interfaces with ONIX hardware. The motif involves CreateContext and StartAcquisition operators sandwiching one or multiple configuration operators."
  },
  "api/data-elements.html": {
    "href": "api/data-elements.html",
    "title": "Data Elements",
    "keywords": "Data Elements Data elements are produced by OpenEphys.Onix1 Bonsai operators."
  },
  "api/dataio.html": {
    "href": "api/dataio.html",
    "title": "Data I/O Operators",
    "keywords": "Data I/O Operators Data I/O operators stream data to and from ONIX hardware."
  },
  "api/device-configure.html": {
    "href": "api/device-configure.html",
    "title": "Device Configuration Operators",
    "keywords": "Device Configuration Operators Tip Device configuration operators are not recommended for using off-the-shelf Open Ephys hardware. Use aggregate configuration operators instead. Aggregate configuration operators confer the following benefits: The address and name properties of aggregate configuration operators undergo automatic configuration which reduces the risk of erroneous configuration. The workflow is less cluttered with configuration operators as one aggregate configuration operator corresponds to multiple device operators. This improves workflow legibility and expedites the workflow scripting process. Device configuration operators belong in a top-level chain of operators between CreateContext and StartAcquisition to configure devices contained by ONIX hardware hubs."
  },
  "articles/getting-started/bonsai-usage.html": {
    "href": "articles/getting-started/bonsai-usage.html",
    "title": "Bonsai Usage",
    "keywords": "Bonsai Usage To begin, the first thing to do is to open up the Bonsai editor. This can be done by starting Bonsai and clicking on the New File button on the left side. Alternatively, if you have previously opened or saved a file in Bonsai, there will be a list of recently opened files on the right side; any of those can be chosen and they will be opened in the editor automatically. From the editor, operators can be selected on the left side and placed into the workspace. Before going into details on how to place operators, we will instead go over the different types of operators, some examples of ONIX-specific operators in each category, and some common categories of properties that can be modified across operators."
  },
  "articles/getting-started/index.html": {
    "href": "articles/getting-started/index.html",
    "title": "Getting Started",
    "keywords": "Getting Started Welcome to the user guide! The next few pages are for users to learn how to use ONIX hardware using the OpenEphys.Onix1 Bonsai package. Browse the articles in the table of contents to learn more. This software documentation is intended to be used hand-in-hand with the Hardware documentation to learn about and start using their ONIX hardware. For those who are looking for user guides and example workflows for using a particular device or headstage in Bonsai, visit the Hardware Guides."
  },
  "articles/getting-started/initialize-oni-context.html": {
    "href": "articles/getting-started/initialize-oni-context.html",
    "title": "Initialize the ONI Context",
    "keywords": "Initialize the ONI Context The CreateContext operator initializes the acquisition context, and it should be the first operator you add to your workflow as it provides access to the hardware device table for all other configuration operators. There are several different ways to find this operator and add it to the workflow: From the Bonsai editor, navigate to the toolbox on the left side of the screen and expand the Source section. Next, expand the OpenEphys.Onix1 section, and find the CreateContext line. The operator can then be added by either double-clicking it, or dragging and dropping the operator into the workflow. Click on the textbox at the top of the toolbox on the left, or from Ctrl + E to focus on the textbox, and type CreateContext to search for the operator. Same as (1), the operator can be placed by double-clicking or dragging and dropping; additionally, if the CreateContext string is highlighted Enter can be pressed to place the operator immediately. Hover over the image of the CreateContext workflow below, and click on the clipboard icon in the top-right corner of the workflow image to copy the workflow to the clipboard. Navigate back to Bonsai, and paste the copied workflow into the active editor. Pasting can be done via Ctrl + V, or right-clicking in the editor and choosing Paste. CreateContext Workflow This is a nominally functional workflow that provides access to the ONI context, from which all operators can then be linked to and configured, while also demonstrating how a Breakout Board can be configured before finishing the configuration chain by placing a StartAcquisition operator:"
  },
  "articles/getting-started/install-configure-bonsai.html": {
    "href": "articles/getting-started/install-configure-bonsai.html",
    "title": "Installation",
    "keywords": "Installation Install Bonsai To download Bonsai, select between the portable download and the installer download here. The Portable download (.zip) installs a sandboxed version of Bonsai. Portable environments enable users to switch between different environments to prevent package conflicts or confusion between similar packages. To install from the Portable download, extract the downloaded file. You can start the portable Bonsai by running the Bonsai.exe that is inside the extracted folder. The Installer download (.exe) installs Bonsai and all its dependencies globally. To install from the Installer download, run the downloaded Bonsai-X.X.X.exe file and agree to the involved licenses. You can start the globally installed Bonsai by launching it from the Bonsai Setup window after installing or searching for it in your OS's search function, for example. Tip When using multiple environments, create and name shortcuts such that different Bonsai environments are easier to find and distinguish. Open Bonsai Package Manager The Bonsai package manager can be accessed from Bonsai's landing window or its workflow editor: or Install Packages in Bonsai The following packages required to run the workflows in this documentation are: Bonsai.StarterPack: the \"standard library\" for Bonsai that contains tools that are used in almost every workflow. OpenEphys.Commutator: Bonsai package for controlling Open Ephys commutators. OpenEphys.Onix1.Design: An extension of the OpenEphys.Onix1 library that includes graphical user interfaces (GUIs). Tip Additional packages will allow you to extend the functionality of ONIX hardware beyond the scope of this documentation. There are packages that allow ONIX be combined with visual psychophysics, markerless pose estimation, HARP behavioral devices, and much more. OpenEphys.Onix1 To install the OpenEphys.Onix1 package open the package manager and: Click the Browse tab. Set Package source to All or NuGet. Search OpenEphys.Onix1. Click Install. Click I Accept when the license agreement window appears. OpenEphys.Onix1.Design To install the OpenEphys.Onix1.Design package open the package manager and: Click the Browse tab. Set Package source to All or NuGet. Search OpenEphys.Onix1.Design. Click Install. Click I Accept when the license agreement window appears. Bonsai.StarterPack To install the Bonsai.StarterPack package open the package manager and: Click the Browse tab. Set Package source to Bonsai Packages. Search for Bonsai.StarterPack. Click Install. OpenEphys.Commutator To install the OpenEphys.Commutator package open the package manager and: Click the Browse tab. Set Package source to All or NuGet. Search for OpenEphys.Commutator. Click Install. Update Packages in Bonsai It is good practice to periodically check for package updates. To do this, open the package manager and: Click the Update tab. Set Package source to All. Leave the search bar blank if you want to check for updates for all packages. Alternatively, if you want to check for an update for a particular package, you may type that package's name in the search bar to expedite the update retrieval process. Click Update All if you want to perform all available updates. Alternatively, click on a package and click Update if you want to perform a subset of the available updates. Uninstall Packages in Bonsai Sometimes it is helpful to uninstall packages. Open the package manager and: Click the Installed tab. Set Package source to All. Leave the search bar blank if you want to see all installed packages. Alternatively, if you want to uninstall a particular package, you may type that package's name in the search bar. Click a package and click Uninstall to uninstall a packages. Next Steps Now that Bonsai has been installed and configured, it is time to start constructing a workflow to capture data from your ONIX system. The following sections give a high-level understanding of how Bonsai is organized, and some of the ONIX-specific concepts that will be useful for learning how to work with the operators."
  },
  "articles/getting-started/next-steps.html": {
    "href": "articles/getting-started/next-steps.html",
    "title": "Next Steps",
    "keywords": "Next Steps Continue browsing Getting Started and check out specific operators on the left to see how to configure each operator, as well as some ways to visualize data. Each page will have a fully functional workflow that can be copied into Bonsai to provide an easy starting point for generating data. For more technical information on each operator, head to the OpenEphys.Onix1 to see a more developer-focused view of each operator. More complex and in-depth tutorials for placing multiple operators and moving towards generating data in an experimental setting can be found in the Tutorials."
  },
  "articles/getting-started/operator-types.html": {
    "href": "articles/getting-started/operator-types.html",
    "title": "Operator Types",
    "keywords": "Operator Types In Bonsai, a \"workflow\" is composed of \"operators\" that are connected together to form a data processing graph. Each operator is classified into as a Source, Transform, Condition, Sink, or Combinator based upon how it behaves. ONIX operators fall in the following categories: Operator Type Description Example ONIX operators Source Generate acquisition state or hardware data CreateContext, Bno055Data, NeuropixelsV1eData Sink Configure and send data to hardware ConfigureHeadstage64, ConfigureNeuropixelsV1eHeadstage Combinator Manage control flow StartAcquisition"
  },
  "articles/getting-started/property-categories.html": {
    "href": "articles/getting-started/property-categories.html",
    "title": "Property Categories",
    "keywords": "Property Categories There are specific categories of properties that define when an operator's properties can be modified. configuration properties have an effect on hardware when a workflow is started and are used to initialize the hardware state. Even if they are changed while a workflow is running, they will not have an effect until the workflow is restarted. acquisition properties have an immediate effect on hardware when the workflow is running. For instance, stimulus waveform properties can be dynamically modified according to parameters in your workflow. Devices properties refer to the individual devices available within a particular aggregate operator. Aggregate operators include ConfigureHeadstage64, ConfigureBreakoutBoard, and more. Explore other available options under the aggregate configuration operators page."
  },
  "articles/getting-started/reference.html": {
    "href": "articles/getting-started/reference.html",
    "title": "Software Reference",
    "keywords": "Software Reference The following table provides information about which operators correspond to which hardware and the \"Offset\" and \"Scale\" values to convert the ADC value to μV. \"Offset\" refers to the value required to subtract from unsigned data to center its dynamic range around zero. It's typically \\(-2^{(bitDepth - 1)}\\) for unsigned data. \"Scale\" refers to the scalar required to multiply to your data to convert it from units of DAC/ADC step size to μV. Analog Device Bit Depth Offset Scale/Step Size (μV/bit) Relevant Data Operator Data Frame Relevant Hardware Configuration Operator(s) Intan Rhd2164 (amplifier & auxiliary) 16 -32768 0.195 Rhd2164Data Rhd2164DataFrame Headstage 64 ConfigureHeadstage64 Intan Rhs2116 (AC) 16 -32768 0.195 Rhs2116Data Rhs2116DataFrame Headstage Rhs2116 ConfigureHeadstageRhs2116 Intan Rhs2116 (DC) 10 -512 -19230 Rhs2116Data Rhs2116DataFrame Headstage Rhs2116 ConfigureHeadstageRhs2116 Imec Neuropixels 1.0 probe (AP & LFP) 10 -512 1.2e6/1024/gain1 NeuropixelsV1eData, NeuropixelsV1fData NeuropixelsV1DataFrame Headstage Neuropixels V1e, Headstage Neuropixels V1f ConfigureNeuropixelsV1eHeadstage Imec Neuropixels 2.0 probe 12 -2048 1e6/80/2^12 = 3.0517578125 NeuropixelsV2eData NeuropixelsV2eDataFrame Headstage Neuropixels V2e ConfigureNeuropixelsV2eHeadstage Imec Neuropixels 2.0 Beta probe 14 -8192 1e6/80/2^14 = 0.76293945312 NeuropixelsV2eBetaData NeuropixelsV2eBetaDataFrame Headstage Neuropixels V2e Beta ConfigureNeuropixelsV2eBetaHeadstage Imec Nric 1.0 384 (AP & LFP) 10 -512 1.2e6/1024/gain1 Nric1384Data Nric1384DataFrame Headstage Nric1384 ConfigureHeadstageNric1384 Breakout Board analog input 16 -32768 voltageRange/2^162 AnalogInput AnalogInputDataFrame Breakout Board ConfigureBreakoutBoard Breakout Board analog output 16 0 20e6/2^16 = 305.17578125 (in \"S16\" mode)3 AnalogOutput - Breakout Board ConfigureBreakoutBoard, AnalogOutput Tip If you are trying to insert the \"Offset\" value from this table into the \"Offset\" field of the Ephys Socket of the Open Ephys GUI, insert a positive value. The Ephys Socket multiplies the value in the \"Offset\" field by -1 so you must insert a positive value in the \"Offset\" field. If you are trying to insert the \"Offset\" and \"Scale\" values from this table into the \"Shift\" property and \"Scale\" property fields of a single ConvertScale operator in Bonsai, insert the \"Offset\" value multiplied by the \"Scale\" value into the \"Shift\" property field. The ConvertScale operator applies the shift transformation after the scale transformation so you must pre-scale the value in the \"Shift\" property field. You can also use two ConvertScales to apply the \"Shift\" transformation before the \"Scale\" transformation so that you don't have to pre-scale. The above table includes devices that expose unconverted DAC/ADC values to users. Devices excluded by the above table include: (Polled) Bno055 is an orientation sensor. Euler angles: degrees Quaternion: unitless Linear acceleration: m/s^2 Gravity: m/s^2 Temperature: Celsius Ts4231 is a position sensor. Position: arbitrary units (defined by the relative positions of the lighthouses and the P/Q property values set by the user in Bonsai) Python480 is a camera sensor. It technically exposes unconverted DAC/ADC values to users, but converting those values to photon count is less common so it is omitted from the table. The Neuropixels 1.0 probes and Imec Nric 1.0 384 amplifier have selectable gain. The appropriate \"Scale\" value depends on the chosen gain according to the following formula: 1.2e6/1024/gain. The gain is configured in the NeuropixelsV1e Headstage Configuration GUI, for example.↩↩ The Breakout Board analog input range can be configured to accept ±10 volts, ±5 volts, or ±2.5 volts input range. The appropriate \"Scale\" value depends on the chosen analog input voltage range according to the following formula: voltageRange/2^16. This voltage range is configured by editing ConfigureBreakoutBoard's AnalogIO InputRange properties and must be configured per analog input. The voltage ranges associated with the constants in the AnalogIOVoltageRange enum are: TwoPointFiveVolts: 5e6 FiveVolts: 10e6 TenVolts: 20e6 ↩ The Breakout Board analog output can be configured to accept units of volt or DAC step size (305.17578125 μV/bit). The appropriate \"Scale\" value is only relevant if you are outputting in units of volts depends on the chosen analog output datatype. This datatype is configured by editing AnalogOutput's DataType property. This operator accepts signed data, so no shift is necessary.↩"
  },
  "articles/getting-started/start-workflow.html": {
    "href": "articles/getting-started/start-workflow.html",
    "title": "Starting the Workflow",
    "keywords": "Starting the Workflow Once all operators have been placed and linked correctly, and all Configuration properties have been set, it is now possible to run a workflow. Note that some aspects of Bonsai are only available in specific contexts; for instance, the GUIs mentioned above can only be opened when a workflow is not running. Once a workflow is running, these GUIs are not accessible, but visualizers for certain operators can be opened to view the streaming data. Running a workflow can be done in one of two ways: (1) Press the Start button at the top of the Bonsai editor, and (2) Press F5. Upon starting a workflow, a context will be created, and all devices will be configured based on the Configuration properties. Any *Data operators will then begin streaming data, and can be visualized."
  },
  "articles/getting-started/tips-tricks.html": {
    "href": "articles/getting-started/tips-tricks.html",
    "title": "Tips and Tricks",
    "keywords": "Tips and Tricks Bonsai Operator Actions When running a workflow in Bonsai, operators are evaluated from left to right, and top to bottom. In a workflow, each node represents an operator defining an sequence of values. Nodes can be connected to other nodes, from left to right. Each connection indicates that the downstream operator on the right subscribes, or \"listens\", to the notifications of the upstream operator on the left. The table below provides some useful information to effectively use the workflow editor. It provides information on how to add connections between operators, remove connections, reordering operators horizontally and vertically, as well as some shortcuts to aid in placing operators more efficiently. Aside from determining the order of execution, the order of operators within a workflow determines which editing actions can be taken. In the table below, the \"first\" operator is always the one that is on the left side, or on the bottom for multiple rows of operators. If the first operator clicked is on the right side, or on the top, these actions will not work. Goal Clicks / Keystrokes Description Connect two operators Click and hold the first operator, drag the cursor to the second operator, and release While dragging the cursor, it will temporarily change to a red symbol until there is a valid target (e.g., the second operator), where it will change to an up arrow Connect two operators Right-click the first operator, and select Create Connection. Select the second operator While moving the cursor, it will change to an up arrow. A valid operator target will change color when hovering over it Connect two operators on placement Click on an operator in the editor to select it, then place an operator using either method (1) or (2) above If an operator is currently selected in the editor when a new operator is added, whether it is added by clicking and dragging, double-clicking, or pressing Enter, the newly placed operator will be connected to the first operator automatically Disconnect two operators Click the first operator to select it, hold Shift, click and hold the first operator, drag to the second operator, and release While dragging the cursor, it will temporarily change to a red symbol until there is a valid target (e.g., the second operator), where it will change to an up arrow Disconnect two operators Right-click the first operator, and select Remove Connection. Select the second operator While moving the cursor, it will change to an up arrow. A valid operator target will change color when hovering over it Move row of operators up Hold Alt, click and hold the first operator, drag upwards to an operator in another row, and release This action does not require that the operator be selected prior to performing the action. The second operator that is highlighted when the button / mouse are released will now be under the first operator Change order of operators in a row Hold Ctrl, click and hold the first operator, drag to the right to the second operator, and release This action does not require that the operator be selected prior to performing the action. This can change the order of any two operators that are a part of the same row; it is not constrained to adjacent operators. Note that if the new placement of the operators is not valid (such as giving a Source operator an input), it will knock the operator of the current row and remove any connections Note In the context of OpenEphys.Onix1, all workflows start with (top line) a CreateContext operator connected to an arbitrary number of Configure* operators, finished with a StartAcquisition operator. Subsequent rows will contain the corresponding *Data operators for capturing data from the hardware has been configured above. Accessing GUIs Some operators, specifically many of the Configure* operators, can have a GUI attached to the operator that allows for easy manipulation of Configuration properties in a graphical environment. These GUIs can be accessed by double-clicking on an operator; if there is a GUI assigned to it, then it will be opened up in a new window. Please note that not all operators have GUIs, but if you think that an operator would benefit from having this functionality added please reach out to us. Note GUIs are not part of the base OpenEphys.Onix1 library. To take advantage of this added functionality, you must install the accompanying OpenEphys.Onix1.Design library using the Bonsai package manager. A number of Bonsai operators also come with GUIs, but similar to OpenEphys.Onix1, the corresponding *.Design library must be installed before it can be leveraged."
  },
  "articles/getting-started/visualize-data.html": {
    "href": "articles/getting-started/visualize-data.html",
    "title": "Visualize Data",
    "keywords": "Visualize Data Bonsai has \"type visualizers\" that display data produced by an operator. They are opened by double-clicking the corresponding node while the workflow is running. Read below for more details about how to visualize data. Selecting operator data members for visualization Some operators, such as ONIX data I/O operators, require selecting members from their output to visualize their data: Right-click the node that corresponds to the data I/O operator you'd like to visualize. Hover the cursor over the \"Output\" option that appears in the context menu. Click the member you would like to visualize from the list of members. This populates the workflow with a MemberSelectorBuilder operator that selects the single member from the data frame produced by the data I/O operator. Note Member selection is required when an operator's output type doesn't have type visualizers that allow users to inspect the data in a meaningful capacity. This is true for ONIX data I/O operators which typically produce data frames. Selecting visualizers Select the visualizer you would like to use for visualizing data: Right-click the MemberSelector node labelled with the member you would like to visualize. Hover the cursor over the \"Select Visualizer\" option in the context menu. Click the visualizer you would like to use from the list of visualizers. Opening visualizers Open the visualizer and check: Start the workflow. If the desired visualizer is closed, double-click the MemberSelector node labelled with the member you would like to visualize. Visualize the data. Note Data will only be visualized if the operator is producing data. If you can't see any data, check that: The device from which you are trying to read is enabled. Events are occurring. Some devices are stream-based and some are event-based. Event-based devices only produce data upon certain events. For example, the DigitalInput operator only produces data when the digital port status changes state. Tip Visualizers can be selected while the workflow is running which is helpful for more quickly trying different visualizer options in succession if you are unsure about which one you want to use. Configuring visualizers Some visualizers, in particular those that involve plots, allow additional configuration. Right-click the visualizer window to gain access to configuration options. For example, the MatVisualizer allows configuration of: X and Y scale: click to toggle between \"auto\" and fixed values. Channel view: click the grid square to toggle between superimposed or separate History Length: click the arrow and configure the number of samples displayed in the plot. Display Previous: click the arrow and configure the amount of buffers displayed in the plot. Channel Offset: click the arrow and configure the Y offset. Channels per Page: click the arrow and configure the amount of channels displayed per visualizer page. The page number is displayed at the top of the visualizer. Move between pages by using the PageUp and PageDn keys on the keyboard. Tip For other data visualization options, additional visualizers are available as standalone operators and can be found in the Bonsai.Design.Visualizers package. These visualizer operators must be connected to an operator that produces a sequence of compatible data. The visualizer window can be opened by double-clicking the visualizer node instead of the preceding data node."
  },
  "articles/hardware/breakout/analog-io.html": {
    "href": "articles/hardware/breakout/analog-io.html",
    "title": "Breakout Board Analog IO",
    "keywords": "Breakout Board Analog IO The following excerpt from the Breakout Board example workflow demonstrates analog IO functionality by computing a ~1Hz sawtooth pattern, outputting it to the analog IO port, and reading it back from the analog IO port. It also saves analog input data. Analog outputs The RampGenerator operator generates a sequence of single precision floating point values which comprises ~1Hz sawtooth waveform from -10 to 10. The AnalogOutput updates the analog output port upon receiving a value in the upstream sequence. In the Breakout Board example workflow: The AnalogOutput's DeviceName property is set to \"BreakoutBoard/AnalogIO\". This links the AnalogOutput operator to the corresponding configuration operator. The AnalogOutput's DataType property is set to \"Volts\". The RampGenerator operator computes a sawtooth pattern that consists floats in units of volts, so AnalogOutput must be set to \"Volts\" to accept this input. Of course, the RampGenerator could be used to produce a sequence of signed 16-bit DAC codes. In that case, DataType property would be set to \"S16\". Although a voltage ramp is sent to all the channels, only channel 0 was selected to be a output, so this is the only channel that will be affected. If other channels are configured as output (see Breakout Board Configuration), they will also ramp their voltage. The RampGenerator is a GroupWorkflow that contains multiple Bonsai operators. Examine RampGenerator's internals by pressing Ctrl + Enter when the node is selected: Tip To understand how the RampGenerator works, double click each nodes in the workflow while its running to visualize how data is transformed as it flows through each operator. Additionally, the F1 key can be pressed while a node is selected ot bring up its documentation. This video shows how Bonsai how to examine the data flowing through different elements of workflow as it operates. The \"AnalogOutput\" window shows the values that are being used by the AnalogOutput operator to update the analog IO port. 12 signals are produced, one for each channel. However, only analog channel 0 is actually updated because it's the only channel configured as output by the BreakoutBoard operator. The \"AnalogData\" window shows the voltages at the various pins of the analog IO port. They are being read by the the ADCs on the breakout board and produced in Bonsai by the AnalogInput operator. This confirms that only analog channel 0 is outputting the sawtooth waveform. Analog inputs Analog input data is recorded from all analog IO channels, regardless of each channels' AnalogIO setting. Because analog inputs and outputs share pins on the breakout board, this enables a loopback of signals from the analog output through the analog input so that a copy of the output signal being sent to external hardware can be saved automatically. The example workflow does exactly this on analog IO channel 0. The AnalogInput operator receives a sequence of AnalogInputDataFrames with the following properties settings: BufferSize is set to 50. Therefore, each frame will contain a 50-element Clock vector and a 12-channel x 50-sample AnalogData matrix. The analog inputs are sampled at 100 kHz per channel so this corresponds to 500 µs of data. That's lower than the minimal latency introduced by the BlockReadSize setting. Therefore, the chosen value for BufferSize will not impose a significant effect on processing latency. The buffer will be filled essentially every time hardware is accessed and propagated instantly. DataType is set to Volts. This means that samples will be represented as units of units of voltage in a single-precision floating point type. DeviceName is set to \"BreakoutBoard/AnalogIO\". This links the AnalogInput operator to the corresponding configuration operator. The MemberSelector operators each select a member from the AnalogInputDataFrame, Clock and AnalogData which contain the AcquisitionClockHz-based sample times and sample values, respectively. The MatrixWriter operators saves the selected members to files with the following format: analog-clock_<filecount>.raw and analog-data_<filecount>.raw, respectively. Tip The easiest way to add a MemberSelector to the output of an operator is to right-click the node and hover over Output in the resulting context menu to examine the output type. A MemberSelector can be added by left-clicking the desired expanded property of the Output type."
  },
  "articles/hardware/breakout/clock-output.html": {
    "href": "articles/hardware/breakout/clock-output.html",
    "title": "Breakout Board Clock Output",
    "keywords": "Breakout Board Clock Output The output clock is useful for driving external hardware in sync with data acquisition (e.g. a camera that accepts a \"TTL\" input to trigger exposure). The output clock has the following physical properties: Real-time clock gate Frequency range: 0.1 Hz to 10 MHz Start delay: 0 to 3600 seconds Duty Cycle: 10 - 90% Output impedance: 50 Ohms Output current drive: 64mA Tip For performance at high frequencies (above ~100 kHz), a 50-Ohm coaxial cable should be used it the signal should be terminated into 50-Ohms to prevent reflections. The high output current drive makes this clock capable of driving long cables. These can all be configured using the ConfigureBreakoutBoard operator. In the example workflow, the output clock is configured to produce a 1 MHz, 50% duty cycle clock whose start time, phase, and frequency is hardware synchronized with with the ONIX Acquisition Clock. Because the clock is generated using a simple frequency divider, not all configuration settings can be exactly realized in hardware. For this reason, the following excerpt from the breakout board example workflow demonstrates how to save the hardware-realized clock parameters to a csv file."
  },
  "articles/hardware/breakout/configuration.html": {
    "href": "articles/hardware/breakout/configuration.html",
    "title": "Breakout Board Configuration",
    "keywords": "Breakout Board Configuration The following excerpt from the Breakout Board example workflow demonstrates how to configure your Breakout Board and Breakout Board in Bonsai. This process comprises of the following steps: Create an ONIX acquisition context using CreateContext Configure the Breakout Board and the Breakout Board using ConfigureBreakoutBoard and ConfigureBreakoutBoard Start acquisition using StartAcquisition. NOTE To learn more about the top-level configuration motif in every workflow involving ONIX hardware, visit the Configuration Chain Tutorial. Creating an Acquisition Context The CreateContext operator creates a ContextTask that defines the device driver and index where the hardware exists. The Driver property is set to \"riffa\" which is the name of the PCIe device used by ONIX. In this case, the Index property is set to 0 because there is only a single ONIX system. If a second system is used on the same computer, a second CreateContext operator would be required in its own configuration chain, with its Index property set to 1. Configuring the Breakout Board The ConfigureBreakoutBoard operator groups the properties for all the devices that the breakout board supports. Each device in the property pane can be expanded to expose individual properties that govern their behavior. Tip The Properties section of the ConfigureBreakoutBoard operator provides documentation on the effect of all of the breakout board's configuration settings. To examine and edit the breakout board's properties, click on the Breakout Board node to select it. The properties pane will appear immediately right of the workflow editor. Expanding each of the devices within the properties pane provides access to their configuration settings. The following video demonstrates how properties were edited for the example workflow: This video shows how the breakout board's properties are changed in Bonsai. Specifically, the AnalogIO Direction0 property is set to \"Output\", and the MemoryMonitor Enable property is set to \"True\". It's not necessary to repeat those steps if the workflow is copied/pasted into your editor because they are saved with the workflow. Namely, the following properties were changed form their default values in the breakout board example workflow: The BreakoutBoard's AnalogIO Direction0 property is set to Output. The BreakoutBoard's MemoryMonitor Enable property is set to True. The BreakoutBoard's OutputClock Gate property is set to True. When the workflow is started, the current time (based on Coordinated Universal Time) is saved, along with global hardware parameters governing data acquisition. This is accomplished using a TimeStamp operator to capture the computer's wall clock time. The timestamp is saved along with ContextTask's properties (e.g. AcquisitionClockHz, BlockReadSize, BlockWriteSize) to a csv file (start-time_<filecount>.csv) when the workflow is started. Starting Acquisition After starting a workflow, the StartAcquisition operator begins data acquisition with the hardware that has been configured. In the Breakout Board example workflow, most collected data is from the Breakout Board. The rate of data being produced by the hardware will be ~2.5 MB/s. The ReadSize property is set to 2048 bytes, meaning data collection will wait until 2048 bytes of data have been produced by the hardware. At 2.5 MB/s the hardware will produce 2048 bytes every ~800 μs. This is a hard bound on the latency of the system. If lower latencies were required, the hardware would need to produce data more quickly or the ReadSize property value would need to be reduced. The WriteSize property is set to 2048 bytes. This determines the amount of memory that is preallocated for temporarily holding data before it is sent to hardware. It is less critical to performance unless the rate that data be written to the hardware is comparable to the rate that the hardware produces data, which is not a common scenario. NOTE For an overview of the devices on the Breakout Board that can be configured through the ConfigureBreakoutBoard operator, visit the Breakout Board Overview."
  },
  "articles/hardware/breakout/digital-inputs.html": {
    "href": "articles/hardware/breakout/digital-inputs.html",
    "title": "Breakout Board Digital Inputs",
    "keywords": "Breakout Board Digital Inputs The following excerpt from the Breakout Board example workflow demonstrates digital inputs functionality by responding to button presses and saves digital inputs data. The DigitalInput operator generates a sequence of DigitalInputDataFrames. Although the digital inputs are sampled at 4 Mhz, these data frames are only emitted when the port status changes (i.e., when a pin, button, or switch is toggled). The digital input ports on the Breakout Board operate at a 3.3V logic levels but are also 5V tolerant. In the Breakout Board example workflow, the DigitalInput's DeviceName property is set to \"BreakoutBoard/DigitalInput\". This links the DigitalInput operator to the corresponding configuration operator. The CsvWriter operator writes the Clock, DigitalInputs, and Buttons members from the DigitalInputDataFrame to a file with the following name format: digital-input_<filecount>.csv. Because CsvWriter is a sink operator, its output sequence is equivalent to its input sequence. In other words, its output is equivalent to DigitalInput's output. Therefore, it's possible to use MemberSelector operators on the CsvWriter to select members from DigitalInputDataFrame. This is most easily performed by clicking the relevant members that appear by hovering over the \"Output\" option that appears in the context menu that appears after right-clicking the CsvWriter node. The members selected in the workflow, DigitalPortState and BreakoutButtonState, are enumerators with values that correspond to bit positions of the breakout board's digital ports. When DigitalPortState or OpenEphys.Onix1.BreakoutButtonState is connected to a HasFlags operator, the names that appear in the HasFlags's Value property's dropdown menu correspond to bit positions in the respective digital input port. In this workflow, the top HasFlags operator checks if Triangle or X are True."
  },
  "articles/hardware/breakout/digital-outputs.html": {
    "href": "articles/hardware/breakout/digital-outputs.html",
    "title": "Breakout Board Digital Outputs",
    "keywords": "Breakout Board Digital Outputs The following excerpt from the breakout board example workflow demonstrates digital outputs functionality by computing a ~10Hz binary digital counter and outputting that counter to the digital output port. The Timer operator generates a sequence of 64-bit signed integers in ~100ms intervals. The Int operator emits an integer (with a value of 1 in our case) when an item is received from the upstream sequence. The Accumulate operator increments a value by the values of items in its upstream sequence. The Accumulate operator emits this value when an item is received from the upstream sequence. The DigitalOutput operator updates the digital output part when sends data in the sequence computed by the upstream operators to update the digital output port. The digital outputs are updated when an item is received from the upstream sequence. Although Accumulate produces a 32-bit integer that counts from 0 to 2147483647, the DigitalOutput operator only uses the lower 8-bits to update the digital output state. In the Breakout Board example workflow, the DigitalOutput's DeviceName property to \"BreakoutBoard/DigitalOutput\". This links the DigitalOutput operator to the corresponding configuration operator."
  },
  "articles/hardware/breakout/harp-sync.html": {
    "href": "articles/hardware/breakout/harp-sync.html",
    "title": "Breakout Board Harp Sync",
    "keywords": "Breakout Board Harp Sync Harp is a standard for asynchronous real-time data acquisition and experimental control in neuroscience. It includes a clock synchronization protocol which allows Harp devices to be connected to a shared clock line and continuously self-synchronize their clocks to a precision of tens of microseconds. The Harp clock signal is transmitted over a serial line every second. Every time the Harp sync input device in the ONIX breakout board detects a full Harp synchronization packet, a new data frame is emitted pairing the current value of the Harp clock with the local ONIX acquisition clock. Harp is typically used in behavioral equipment such as audio generation devices, nose-poke loggers, servos, rotary encoders and cameras. The breakout board's harp input allows complete, hardware level synchronization of the Harp and Onix ecosystems. This means that all experimental events are timestamped on the same clock and no post-hoc alignment of timing is necessary. The following excerpt from the Breakout Board example workflow demonstrates saving data from the Harp input port on the breakout board."
  },
  "articles/hardware/breakout/heartbeat.html": {
    "href": "articles/hardware/breakout/heartbeat.html",
    "title": "Breakout Board Heartbeat",
    "keywords": "Breakout Board Heartbeat ONIX has a single special device, called a heartbeat, that produces data at regular intervals and is always enabled. When data is read from the hardware by software, the reading thread will block until enough data has been produced by the hardware. If no devices are enabled, the software would block forever. The heartbeat prevents this from happening since it is always enabled and always producing data. In practice, you can ignore the heartbeat functionality. In any case, the following excerpt from the Breakout Board example workflow demonstrates how to observe the heartbeat. The HeartbeatData operator generates a sequence of HeartbeatDataFrames. HeartbeatData emits HeartbeatDataFrames at a regular interval defined during Breakout Board Configuration using the ConfigureBreakoutBoard's Heartbeat BeatsPerSecond property (in our case 10 Hz). The HeartbeatData's DeviceName property is set to \"BreakoutBoard/Heartbeat\". This links the HeartbeatData operator to the corresponding configuration operator. The MemberSelector operator selects the Clock member from the HeartbeatDataFrame so the user can visualize the number of clock cycles that have passed for a given heartbeat pulse if they double-click the Clock node."
  },
  "articles/hardware/breakout/load-data.html": {
    "href": "articles/hardware/breakout/load-data.html",
    "title": "Load Data",
    "keywords": "Load Data The following python script can be used to load and plot the data produced by the Breakout Board example workflow. import numpy as np import matplotlib.pyplot as plt # Load data from breakout board tutorial workflow suffix = '2024-08-22T14_16_06'; # Change to match file names' suffix plt.close('all') #%% Metadata dt = {'names': ('time', 'acq_clk_hz', 'block_read_sz', 'block_write_sz'), 'formats': ('datetime64[us]', 'u4', 'u4', 'u4')} meta = np.genfromtxt('start-time_' + suffix + '.csv', delimiter=',', dtype=dt) print(f\"Recording was started at {meta['time']} GMT\") #%% Analog Inputs analog_input = {} analog_input['time'] = np.fromfile('analog-clock_' + suffix + '.raw', dtype=np.uint64) / meta['acq_clk_hz'] analog_input['data'] = np.reshape(np.fromfile('analog-data_' + suffix + '.raw', dtype=np.float32), (-1, 12)) plt.figure() plt.plot(analog_input['time'], analog_input['data']) plt.xlabel(\"time (sec)\") plt.ylabel(\"volts\") plt.legend(['Ch. 0', 'Ch. 1', 'Ch. 2', 'Ch. 3', 'Ch. 4', 'Ch. 5', 'Ch. 6', 'Ch. 7', 'Ch. 8', 'Ch. 9', 'Ch. 10', 'Ch. 11']) #%% Hardware FIFO buffer use dt = {'names': ('clock', 'bytes', 'percent'), 'formats': ('u8', 'u4', 'f8')} memory_use = np.genfromtxt('memory-use_' + suffix + '.csv', delimiter=',', dtype=dt) plt.figure() plt.plot(memory_use['clock'] / meta['acq_clk_hz'], memory_use['percent']) plt.xlabel(\"time (sec)\") plt.ylabel(\"FIFO used (%)\") Note This script will attempt to load entire files into arrays. For long recordings, data will need to be split into more manageable chunks by: Modifying this script to partially load files Modifying the workflow to cyclically create new files after a certain duration"
  },
  "articles/hardware/breakout/memory-monitor.html": {
    "href": "articles/hardware/breakout/memory-monitor.html",
    "title": "Memory Monitor",
    "keywords": "Memory Monitor The following excerpt from the Breakout Board example workflow demonstrates memory monitor functionality. MemoryMonitorData emits a MemoryMonitorDataFrame at a regular interval set by Breakout Board Configuration using the ConfigureBreakoutBoard's SamplesPerSecond property (in our case 10 Hz). In the Breakout Board example workflow, the MemoryMonitorData's DeviceName property is set to \"BreakoutBoard/MemoryMonitor\". This links the MemoryMonitorData operator to the Breakout Board's memory monitor. MemberSelector selects the PercentUsed member from MemoryMonitorDataFrame so the user can visualize the percentage of the breakout board's memory that is occupied. Note MemoryMonitorData generates a data stream that is most useful in the context of closed-loop performance. It tells the user if data is being consumed rapidly enough by the host PC to keep up with data production by the hardware. The hardware FIFO is a buffer that is required to deal with the fact that computers with normal operating systems cannot perform operations with strict regularity. When there are hiccups in acquisition, the hardware FIFO picks up the slack, but should then be cleared immediately. To get the lowest latencies, StartAcquisition's BlockReadSize property should be as small as possible while the memory use percentage remains around 0%. Warning If the hardware FIFO's PercentUsed is non-zero for long time periods, or is increasing, the value of StartAcquisition's BlockReadSize property is too small (see the breakout board configuration). A small BlockReadSize means that the host computer does not have to wait long for enough data to become available to propagate it forward, but will reduce overall bandwidth by increasing the frequency at which the host computer checks if data is available and performs hardware reads."
  },
  "articles/hardware/breakout/overview.html": {
    "href": "articles/hardware/breakout/overview.html",
    "title": "Breakout Board",
    "keywords": "Breakout Board The breakout board acts as the central interface for headstages, miniscopes, and auxiliary IO to communicate with the computer. It provides the following features: Headstage IO: 2x high-bandwidth, general-purpose headstage communication ports Digital Input: 8 bits GPI and button state, 5V tolerant, 4 MHz/channel. Digital Output: 8 bits of GPO updated at 4 MHz/channel. Analog IO 12 channels, 100 kHz per channel, independently configurable as input or output. Input: independently configurable as ±2.5V, ±5V, or ±10V input voltage range. Output: fixed ±10V output voltage range. Clock Output: A programmable-frequency clock that is hardware-synchronized to acquisition Allows breakout board to drive external hardware acquisition. Note: disabled by default. Harp Input: An input for a Harp behavioral synchronization signal. Heartbeat Periodic signal from host with adjustable beat frequency. Memory Monitor Diagnostic device for monitoring hardware first-in, first-out memory use. Used for tune real-time feedback loops for minimal latency. Note: disabled by default. The following pages in the Breakout Board Guide provide an example workflow, a breakdown of its components, and a Python script for loading data. Tip Visit the Breakout Board Hardware Guide to learn more about the hardware such as the LED indicators and various connectors."
  },
  "articles/hardware/breakout/workflow.html": {
    "href": "articles/hardware/breakout/workflow.html",
    "title": "Breakout Board Example Workflow",
    "keywords": "Breakout Board Example Workflow In the following example workflow, we will explore all of the breakout board's functionality. The workflow below can by copy/pasted into the Bonsai editor using the clipboard icon in the top right. This workflow: Captures data from the breakout board's analog and digital inputs and streams them to disk. Generates signals to drive the breakout board'ss analog and digital outputs. Receives synchronization messages from the integrated Harp input. Controls the clock output for driving synchronizing external hardware with data acquisition. Monitors and saves hardware memory buffer use information. Monitors the breakout board's heartbeat signal."
  },
  "articles/hardware/hs64/bno055.html": {
    "href": "articles/hardware/hs64/bno055.html",
    "title": "Headstage 64 Bno055",
    "keywords": "Headstage 64 Bno055 The following excerpt from the Headstage 64 example workflow visualizes Bno055 data, saves Bno055 data, and commutates the Headstage 64 if there is a proper commutator connection. The Bno055Data operator generates a sequence of Bno055DataFrames. Its DeviceName property is set to \"Headstage64/Bno055Data\" which links Bno055Data to the Bno055 on the Headstage 64. The CsvWriter operator writes the entire Bno055DataFrame to a file with the following format: bno055_<filecount>.csv. Because CsvWriter is a sink operator, its output sequence is equivalent to its input sequence. This means that the Quaternion member from Bno055DataFrame can be selected downstream of CsvWriter. This is most easily performed by right-clicking the operator, hovering over \"Output\", and clicking the corresponding member. Quaternion values are passed to AutoCommutator which automatically commutates the headstage's tether if there is a proper commutator connection. This operator comes from the OpenEphys.Commutator Bonsai package. Make sure it's installed and updated. You can enable/disable the commutator using the Enable property, enable/disable the LED on the commutator using the LedEnable property, and set the COM port using the PortName property. The correct COM port value varies from system to system. You must find and set the correct COM port to which your commutator is connected in your system. NOTE AutoCommutator is included in the workflow because a commutator is often combined with the Headstage 64 and the Breakout Board for freely-moving experiments. However, it is disabled by default so that users without a commutator can run the workflow without additional steps. To enable it, click on the node and press Ctrl + Shift + D or right-click the node and click \"Enable\"."
  },
  "articles/hardware/hs64/configuration.html": {
    "href": "articles/hardware/hs64/configuration.html",
    "title": "Headstage 64 Configuration",
    "keywords": "Headstage 64 Configuration The following excerpt from the Headstage 64 example workflow demonstrates how to configure your Headstage 64 and Breakout Board in Bonsai. This process comprises of the following steps: Create an ONIX acquisition context using CreateContext Configure the Headstage 64 and the Breakout Board using ConfigureHeadstage64 and ConfigureBreakoutBoard Start acquisition using StartAcquisition. NOTE To learn more about the top-level configuration motif in every workflow involving ONIX hardware, visit the Configuration Chain Tutorial. Creating an Acquisition Context The CreateContext operator creates a ContextTask that defines the device driver and index where the hardware exists. The Driver property is set to \"riffa\" which is the name of the PCIe device used by ONIX. In this case, the Index property is set to 0 because there is only a single ONIX system. If a second system is used on the same computer, a second CreateContext operator would be required in its own configuration chain, with its Index property set to 1. Configuring the Breakout Board and Headstage 64 The ConfigureBreakoutBoard operator configures the Onix Breakout Board. In the Headstage 64 example tutorial, it is configured to enable digital inputs to serve as a trigger for the Headstage 64's electrical and optical stimulation and to enable monitoring of the percentage of memory occupied. This is accomplished by leaving all of the ConfigureBreakoutBoard properties set to their default values except its Memory Monitor Enable property is set to True. The ConfigureHeadstage64 operator is used to configure the Headstage 64. In the Headstage 64 example tutorial, it is configured to enable streaming of electrophysiology data from a Rhd2164 amplifier, orientation data from the on-board Bno055 IMU, and position data from the Ts4231. This is accomplished in the Headstage 64 example workflow by leaving all of the ConfigureHeadstage64 properties set to their default values. When the workflow is started, the current time (based on Coordinated Universal Time) is saved, along with global hardware parameters governing data acquisition. This is accomplished using a TimeStamp operator to capture the computer's wall clock time. The timestamp is saved along with ContextTask's properties (e.g. AcquisitionClockHz, BlockReadSize, BlockWriteSize) to a csv file (start-time_<filecount>.csv) when the workflow is started. Starting Acquisition After starting a workflow, the StartAcquisition operator begins data acquisition with the hardware that has been configured. In the Headstage 64 example workflow, most collected data is from the Headstage 64. The rate of data being produced by the hardware will be ~4.1 MB/s. The ReadSize property is set to 4096 bytes, meaning data collection will wait until 4096 bytes of data have been produced by the hardware. At 4.1 MB/s the hardware will produce 4096 bytes every ~1000 μs. This is a hard bound on the latency of the system. If lower latencies were required, the hardware would need to produce data more quickly or the ReadSize property value would need to be reduced. The WriteSize property is set to 2048 bytes. This determines the amount of memory that is preallocated for temporarily holding data before it is sent to hardware. It is less critical to performance unless the rate that data be written to the hardware is comparable to the rate that the hardware produces data, which is not a common scenario. NOTE For an overview of the devices on the Headstage 64 that can be configured through the ConfigureHeadstage64 operator, visit the Headstage 64 Overview."
  },
  "articles/hardware/hs64/estim.html": {
    "href": "articles/hardware/hs64/estim.html",
    "title": "Headstage 64 Electrical Stimulation",
    "keywords": "Headstage 64 Electrical Stimulation The following excerpt from the Headstage 64 example workflow demonstrates electrical stimulation by triggering a train of pulses following a press of the △ key on the breakout board. The DigitalInput operator generates a sequence of DigitalInputDataFrames. Although the digital inputs are sampled at 4 Mhz, these data frames are only emitted when the port status changes (i.e., when a pin, button, or switch is toggled). In the Breakout Board example workflow, the DigitalInput's DeviceName property is set to \"BreakoutBoard/DigitalInput\". This links the DigitalInput operator to the corresponding configuration operator. BreakoutButtonState is selected from the DigitalInputDataFrame. It is an enumerator with values that correspond to bit positions of the breakout board's digital port. When this type is connected to a HasFlags operator, the enumerated values appear in the HasFlags's Value property's dropdown menu. Because HasFlags's Value is set to \"Triangle\", its output is \"True\" when the selected BreakoutButtonState bit field contains the \"Triangle\" flag. When the Headstage64ElectricalStimulatorTrigger operator receives a \"True\" value in its input sequence, a stimulus waveform is triggered. The waveform can be modified by editing the Headstage64ElectricalStimulatorTrig operator's properties."
  },
  "articles/hardware/hs64/load-data.html": {
    "href": "articles/hardware/hs64/load-data.html",
    "title": "Load Data",
    "keywords": "Load Data The following python script can be used to load and plot the data produced by the Headstage 64 example workflow. import os import numpy as np import matplotlib.pyplot as plt # Load data from headstage64 tutorial workflow suffix = '0'; # Change to match file names' suffix # Change this to the directory of your data. In this example, data's in the same directory as this data loading Python script data_directory = os.path.dirname(os.path.realpath(__file__)) start_t = 1.0 # when to start plotting data (seconds) dur = 1.0 # duration of data to plot plt.close('all') #%% Metadata dt = {'names': ('time', 'acq_clk_hz', 'block_read_sz', 'block_write_sz'), 'formats': ('datetime64[us]', 'u4', 'u4', 'u4')} meta = np.genfromtxt(os.path.join(data_directory, f'start-time_{suffix}.csv'), delimiter=',', dtype=dt, skip_header=1) print(f\"Recording was started at {meta['time']} GMT\") #%% RHD2164 ephys data start_t = 1.0 # when to start plotting data (seconds) dur = 1.0 # duration of data to plot plot_channel_offset_uV = 1000 # Vertical offset between each channel in the time series hs64 = {} hs64['time'] = np.fromfile(os.path.join(data_directory, f'rhd2164-clock_{suffix}.raw'), dtype=np.uint64) / meta['acq_clk_hz'] hs64['ephys'] = np.reshape(np.fromfile(os.path.join(data_directory, f'rhd2164-ephys_{suffix}.raw'), dtype=np.uint16), (-1, 64)) # Make arrays for plotting b = np.bitwise_and(hs64['time'] >= start_t, hs64['time'] < start_t + dur) time = hs64['time'][b] rhd2164_ephys = hs64['ephys'][b, :].astype(np.double) # Convert to uV and offset each channel by some plot_channel_offset_uV bit_depth = 16 scalar = 0.195 offset = (2 ** (bit_depth - 1)) * scalar rhd2164_ephys = rhd2164_ephys * scalar - offset + np.arange(rhd2164_ephys.shape[1])[None, :] * offset / 4 fig = plt.figure() plt.plot(time, rhd2164_ephys, 'k', linewidth=0.25) plt.tick_params(axis='y', which='both', left=False, right=False, labelleft=False) plt.xlabel(\"time (sec)\") plt.ylabel(\"channel\") plt.title('RHD2164 Ephys Data') fig.set_size_inches(5,8) plt.tight_layout() #%% RHD2164 aux data hs64['aux'] = np.reshape(np.fromfile(os.path.join(data_directory, f'rhd2164-aux_{suffix}.raw'), dtype=np.uint16), (-1, 3)) # Make arrays for plotting b = np.bitwise_and(hs64['time'] >= start_t, hs64['time'] < start_t + dur) time = hs64['time'][b] rhd2164_aux = hs64['aux'][b, :].astype(np.double) # Convert to uV and offset each channel by some plot_channel_offset_uV scalar = 37.4 rhd2164_aux_wave = (rhd2164_aux - 2 **(bit_depth - 1)) * scalar plt.figure() plt.plot(time, rhd2164_aux_wave) plt.xlabel(\"time (sec)\") plt.ylabel(\"channel\") plt.title('RHD2164 Auxiliary Data') #%% Bno055 dt = {'names': ('clock', 'euler', 'quat', 'is_quat_id', 'accel', 'grav', 'temp'), 'formats': ('u8', '(1,3)f8', '(1,4)f8', '?', '(1,3)f8', '(1,3)f8', 'f8')} bno055 = np.genfromtxt(os.path.join(data_directory, f'bno055_{suffix}.csv'), delimiter=',', dtype=dt) bno055_time = bno055['clock'] / meta['acq_clk_hz'] plt.figure() plt.subplot(231) plt.plot(bno055_time, bno055['euler'].squeeze()) plt.xlabel(\"time (sec)\") plt.ylabel(\"angle (deg.)\") plt.ylim(-185, 365) plt.legend(['yaw', 'pitch', 'roll']) plt.title('Euler') plt.subplot(232) plt.plot(bno055_time, bno055['quat'].squeeze()) plt.xlabel(\"time (sec)\") plt.ylim(-1.1, 1.1) plt.legend(['X', 'Y', 'Z', 'W']) plt.title('Quaternion') plt.subplot(233) plt.plot(bno055_time, bno055['accel'].squeeze()) plt.xlabel(\"time (sec)\") plt.ylabel(\"accel. (m/s^2)\") plt.legend(['X', 'Y', 'Z']) plt.title('Lin. Accel.') plt.subplot(234) plt.plot(bno055_time, bno055['grav'].squeeze()) plt.xlabel(\"time (sec)\") plt.ylabel(\"accel. (m/s^2)\") plt.legend(['X', 'Y', 'Z']) plt.title('Gravity Vec.') plt.subplot(235) plt.plot(bno055_time, bno055['temp'].squeeze()) plt.xlabel(\"time (sec)\") plt.ylabel(\"temp. (°C)\") plt.title('Headstage Temp.') plt.tight_layout() #%% TS4231 dt = {'names': ('clock', 'position'), 'formats': ('u8', '(1,3)f8')} ts4231 = np.genfromtxt(os.path.join(data_directory, f'ts4231_{suffix}.csv'), delimiter=',', dtype=dt) ts4231_time = ts4231['clock'] / meta['acq_clk_hz'] plt.figure() plt.plot(ts4231_time, ts4231['position'].squeeze()) plt.xlabel(\"time (sec)\") plt.ylabel(\"position (units)\") plt.legend(['x', 'y', 'z']) plt.title('Position Data') plt.show() Note This script will attempt to load entire files into arrays. For long recordings, data will need to be split into more manageable chunks by: Modifying this script to partially load files Modifying the workflow to cyclically create new files after a certain duration"
  },
  "articles/hardware/hs64/memory-monitor.html": {
    "href": "articles/hardware/hs64/memory-monitor.html",
    "title": "Memory Monitor",
    "keywords": "Memory Monitor The following excerpt from the Breakout Board example workflow demonstrates memory monitor functionality. MemoryMonitorData emits a MemoryMonitorDataFrame at a regular interval set by Breakout Board Configuration using the ConfigureBreakoutBoard's SamplesPerSecond property (in our case 10 Hz). In the Breakout Board example workflow, the MemoryMonitorData's DeviceName property is set to \"BreakoutBoard/MemoryMonitor\". This links the MemoryMonitorData operator to the Breakout Board's memory monitor. MemberSelector selects the PercentUsed member from MemoryMonitorDataFrame so the user can visualize the percentage of the breakout board's memory that is occupied. Note MemoryMonitorData generates a data stream that is most useful in the context of closed-loop performance. It tells the user if data is being consumed rapidly enough by the host PC to keep up with data production by the hardware. The hardware FIFO is a buffer that is required to deal with the fact that computers with normal operating systems cannot perform operations with strict regularity. When there are hiccups in acquisition, the hardware FIFO picks up the slack, but should then be cleared immediately. To get the lowest latencies, StartAcquisition's BlockReadSize property should be as small as possible while the memory use percentage remains around 0%. Warning If the hardware FIFO's PercentUsed is non-zero for long time periods, or is increasing, the value of StartAcquisition's BlockReadSize property is too small (see the breakout board configuration). A small BlockReadSize means that the host computer does not have to wait long for enough data to become available to propagate it forward, but will reduce overall bandwidth by increasing the frequency at which the host computer checks if data is available and performs hardware reads."
  },
  "articles/hardware/hs64/ostim.html": {
    "href": "articles/hardware/hs64/ostim.html",
    "title": "Headstage 64 Optical Stimulation",
    "keywords": "Headstage 64 Optical Stimulation The following excerpt from the Headstage64 example workflow demonstrates optical stimulation by triggering a train of pulses following a press of the ◯ key on the breakout board. The DigitalInput operator generates a sequence of DigitalInputDataFrames. Although the digital inputs are sampled at 4 Mhz, these data frames are only emitted when the port status changes (i.e., when a pin, button, or switch is toggled). In the Breakout Board example workflow, the DigitalInput's DeviceName property is set to \"BreakoutBoard/DigitalInput\". This links the DigitalInput operator to the corresponding configuration operator. BreakoutButtonState is selected from the DigitalInputDataFrame. It is an enumerator with values that correspond to bit positions of the breakout board's digital port. When this type is connected to a HasFlags operator, the enumerated values appear in the HasFlags's Value property's dropdown menu. Because HasFlags's Value is set to \"Circle\", its output is \"True\" when the selected BreakoutButtonState bit field contains the \"Circle\" flag. When the Headstage64OpticalStimulatorTrigger operator receives a \"True\" value in its input sequence, a stimulus waveform is triggered. The waveform can be modified by editing the Headstage64OpticalStimulatorTrig operator's properties."
  },
  "articles/hardware/hs64/overview.html": {
    "href": "articles/hardware/hs64/overview.html",
    "title": "Headstage 64",
    "keywords": "Headstage 64 These are the devices available on the Headstage 64: Rhd2164: 64 electrophysiology channels for recording from passive probes (e.g. tetrode, silicon probe, etc.) sampled at 30 kHz with 16 bit depth Adjustable analog band-pass filter: Lower cutoff configurable from 0.1 Hz to 500 Hz Upper cutoff configurable from 100 Hz to 20 kHz Optional adjustable digital high-pass filter with cutoff configurable from 0.146 Hz to 3.309 kHz Three auxiliary ADC channels sampled at 30 kHz with 16 bit depth Bno055: 9-axis IMU for real-time, 3D orientation tracking sampled up to ~100 Hz for easy automated commutation with Open Ephys commutators Ts4231: 3x HTC Vive Lighthouse receivers for real-time, 3D position tracking sampled at 30 Hz per receiver in ideal conditions Electrical Stimulation: Single current source with ±15V compliance voltage and automatic electrode discharge The stimulation waveform is highly configurable via the Headstage64ElectricalStimulatorTrigger's properties. Optical Stimulation: Two current sources with 800mA upper limit The stimulation waveform is highly configurable via the Headstage64OpticalStimulatorTrigger's properties. Tip Visit the Headstage 64 Hardware Guide to learn more about the hardware such as weight, dimensions, and proper power voltages. Tip Visit the Headstage 64 Hardware Guide to learn more about the hardware such as weight, dimensions, and proper power voltages. The following pages in the Headstage 64 Guide provide an example workflow and a breakdown of its components."
  },
  "articles/hardware/hs64/port-status.html": {
    "href": "articles/hardware/hs64/port-status.html",
    "title": "Headstage 64 Port Status",
    "keywords": "Headstage 64 Port Status The Onix system reports when a headstage/miniscope port connection enters or leaves an aberrant state. Such aberrant states include loss of communication lock, detection of parity or CRC error, reception of a badly formatted packet, etc. Knowing the time and type of an aberrant state can help track down its cause. The following excerpt from the Headstage 64 example workflow demonstrates port status functionality and saves timestamped port status data. PortStatus emits a PortStatusFrame when PortStatusCode changes value i.e. when the Headstage 64 port connection enters or leaves an aberrant state. Its DeviceName property is set to \"Headstage64/PortController\" which links the operator to the port controller where the Headstage 64 is connected. The TimeStamp operator generates a sequence of UTC timestamped items from its input sequence. The CsvWriter operator writes Timestamp as well as Clock and StatusCode members from PortStatusFrame to a file with the following name format: port-status_<filecount>.csv. NOTE The PortStatus datastream is always enabled. ConfigureHeadstage64 does not have an Enable property for streaming port status data."
  },
  "articles/hardware/hs64/rhd2164.html": {
    "href": "articles/hardware/hs64/rhd2164.html",
    "title": "Rhd2164",
    "keywords": "Rhd2164 The following excerpt from the Headstage 64 example workflow demonstrates the Rhd2164 functionality by streaming and saving data from the Rhd2164 device. The Rhd2164Data operator generates a sequence of Rhd2164DataFrames using the following properties settings: BufferSize is set to 30. Each Rhd2164DataFrame will contain a [1 x 30 sample] Clock vector, a [64 channel x 30 sample] AmplifierData matrix, and a [3 channel x 30 sample] AuxData matrix. This corresponds to 1 ms of data per data frame. DeviceName is set to \"Headstage64/Rhd2164\". This links the Rhd2164Data operator to the corresponding configuration operator. The relevant members are selected from the Rhd2164DataFrame by right-clicking the Rhd2164Data operator and choosing the following Output members: Clock, AmplifierData, and AuxData. The MatrixWriter operators saves the selected members to files with the following format: rhd2164-clock_<filecount>.raw, rhd2164-amplifier_<filecount>.raw, and rhd2164-aux_<filecount>.raw, respectively."
  },
  "articles/hardware/hs64/ts4231.html": {
    "href": "articles/hardware/hs64/ts4231.html",
    "title": "Headstage 64 Ts4231",
    "keywords": "Headstage 64 Ts4231 The following excerpt from the Headstage 64 example workflow demonstrates the Headstage 64's position tracking capabilities. The TS4231V1PositionData operator generates a sequence of TS4231V1PositionDataFrames. A TS4231V1PositionDataFrame is emitted when a receiver on the Headstage 64 captures a sequence of 12 optical signals from a pair of lighthouses which occurs at 30 Hz. Therefore, with no occlusions, the maximum achievable sample rate is 30 Hz per receiver. There are three receivers on the Headstage 64, so TS4231V1PositionData can emit up to 3 TS4231V1PositionDataFrames in a single 30 Hz sampling cycle. Of course, if occlusions cause receivers to miss optical signals, this rate will be reduced. The TS4231V1PositionData's DeviceName property is set to \"Headstage64/TS4231V1\". This links the TS4231V1PositionData operator to the corresponding configuration operator. The CsvWriter operator writes the Clock, and Position members from the TS4231V1PositionDataFrame to a file with the following name format: ts4231v1__<filecount>.csv. Because CsvWriter is a sink operator, its output sequence is equivalent to its input sequence. In other words, its output is equivalent to TS4231V1PositionData's output. Therefore, it's possible to use MemberSelector operators on the CsvWriter to select members from TS4231V1PositionDataFrame. This is most easily performed by clicking the relevant members that appear by hovering over the \"Output\" option that appears in the context menu that appears after right-clicking the CsvWriter node. The Position member is selected in the workflow to help visualize the position data by double-clicking the node when the workflow is running"
  },
  "articles/hardware/hs64/workflow.html": {
    "href": "articles/hardware/hs64/workflow.html",
    "title": "Headstage 64 Example Workflow",
    "keywords": "Headstage 64 Example Workflow The example workflow below can by copy/pasted into the Bonsai editor using the clipboard icon in the top right. This workflow: Captures electrophysiology data from passive probes via the RHD2164 amplifier and saves it to disk. Captures orientation data from the Bno055 IMU and saves it to disk. Monitors the Headstage 64 port status. Automatically commutates the tether if there is a proper commutator connection. Applies electrical stimulation triggered by pressing the breakout board's △ key. Applies optical stimulation triggered by pressing the breakout board's ◯ key. Monitors memory usage data."
  },
  "articles/hardware/index.html": {
    "href": "articles/hardware/index.html",
    "title": "Hardware Guides",
    "keywords": "Hardware Guides Here you will find user guides and example workflows for the ONIX breakout board, headstages, and other compatible hardware that are supported by the library."
  },
  "articles/hardware/np1e/bno055.html": {
    "href": "articles/hardware/np1e/bno055.html",
    "title": "NeuropixelsV1e Bno055",
    "keywords": "NeuropixelsV1e Bno055 The following excerpt from the NeuropixelsV1e Headstage example workflow visualizes Bno055 data, saves Bno055 data, and commutates the NeuropixelsV1e Headstage if there is a proper commutator connection. The PolledBno055Data operator generates a sequence of Bno055DataFrames. Its DeviceName property is set to \"NeuropixelsV1eHeadstage/PolledBno055Data\" which links PolledBno055Data to the Bno055 on the NeuropixelsV1e Headstage. The CsvWriter operator writes the entire Bno055DataFrame to a file with the following format: bno055_<filecount>.csv. Because CsvWriter is a sink operator, its output sequence is equivalent to its input sequence. This means that the Quaternion member from Bno055DataFrame can be selected downstream of CsvWriter. This is most easily performed by right-clicking the operator, hovering over \"Output\", and clicking the corresponding member. Quaternion values are passed to AutoCommutator which automatically commutates the headstage's tether if there is a proper commutator connection. This operator comes from the OpenEphys.Commutator Bonsai package. Make sure it's installed and updated. You can enable/disable the commutator using the Enable property, enable/disable the LED on the commutator using the LedEnable property, and set the COM port using the PortName property. The correct COM port value varies from system to system. You must find and set the correct COM port to which your commutator is connected in your system. NOTE AutoCommutator is included in the workflow because a commutator is often combined with the NeuropixelsV1e Headstage and the Breakout Board for freely-moving experiments. However, it is disabled by default so that users without a commutator can run the workflow without additional steps. To enable it, click on the node and press Ctrl + Shift + D or right-click the node and click \"Enable\"."
  },
  "articles/hardware/np1e/configuration.html": {
    "href": "articles/hardware/np1e/configuration.html",
    "title": "NeuropixelsV1e Headstage Configuration",
    "keywords": "NeuropixelsV1e Headstage Configuration The following excerpt from the NeuropixelsV1e Headstage example workflow demonstrates how to configure your NeuropixelsV1e Headstage and Breakout Board in Bonsai. This process comprises of the following steps: Create an ONIX acquisition context using CreateContext Configure the NeuropixelsV1e Headstage and the Breakout Board using ConfigureNeuropixelsV1eHeadstage and ConfigureBreakoutBoard Start acquisition using StartAcquisition. NOTE To learn more about the top-level configuration motif in every workflow involving ONIX hardware, visit the Configuration Chain Tutorial. Creating an Acquisition Context The CreateContext operator creates a ContextTask that defines the device driver and index where the hardware exists. The Driver property is set to \"riffa\" which is the name of the PCIe device used by ONIX. In this case, the Index property is set to 0 because there is only a single ONIX system. If a second system is used on the same computer, a second CreateContext operator would be required in its own configuration chain, with its Index property set to 1. Configuring the NeuropixelsV1e Headstage The NeuropixelsV1eHeadstage operator is used to configure the Neuropixels V1e Headstage; this can enable streaming of electrophysiology data from a Neuropixels 1.0 probe and orientation data from a Bno055 IMU. This is accomplished in the example workflow by leaving all of the NeuropixelsV1eHeadstage properties set to their default values. Default values for the headstage are: Enabling the first 384 electrodes for streaming (electrodes 0 through 383) This is also known as the Bank A Channel Preset Setting AP Gain to 1000x Setting LFP gain to 50x Enabling the Spike Filter Setting the Reference to External Important The workflow will not run unless gain calibration and ADC calibration files are provided. Click the NeuropixelsV1eHeadstage operator, expand NeuropixelsV1e in the properties pane, then choose the appropriate files by selecting either GainCalibrationFile or AdcCalibrationFile and clicking the ... button. Tip For additional details on how to manually configure the headstage, such as enabling specific electrodes for recording, or modify AP / LFP gain, check out the NeuropixelsV1e GUI page. When the workflow is started, the current time (based on Coordinated Universal Time) is saved, along with global hardware parameters governing data acquisition. This is accomplished using a TimeStamp operator to capture the computer's wall clock time. The timestamp is saved along with ContextTask's properties (e.g. AcquisitionClockHz, BlockReadSize, BlockWriteSize) to a csv file (start-time_<filecount>.csv) when the workflow is started. Starting Acquisition After starting a workflow, the StartAcquisition operator begins data acquisition with the hardware that has been configured. In the NeuropixelsV1e Headstage example workflow, most collected data is from the NeuropixelsV1e Headstage. The rate of data being produced by the hardware will be ~20.6 MB/s. The ReadSize property is set to 8192 bytes, meaning data collection will wait until 8192 bytes of data have been produced by the hardware. At 20.6 MB/s the hardware will produce 8192 bytes every ~400 μs. This is a hard bound on the latency of the system. If lower latencies were required, the hardware would need to produce data more quickly or the ReadSize property value would need to be reduced. The WriteSize property is set to 2048 bytes. This determines the amount of memory that is preallocated for temporarily holding data before it is sent to hardware. It is less critical to performance unless the rate that data be written to the hardware is comparable to the rate that the hardware produces data, which is not a common scenario. NOTE For an overview of the devices on the NeuropixelsV1e Headstage that can be configured through the ConfigureNeuropixelsV1eHeadstage operator, visit the NeuropixelsV1e Headstage Overview."
  },
  "articles/hardware/np1e/gui.html": {
    "href": "articles/hardware/np1e/gui.html",
    "title": "NeuropixelsV1e GUI",
    "keywords": "NeuropixelsV1e GUI The NeuropixelsV1e headstage has a graphical user interface when the OpenEphys.Onix1.Design package is downloaded. For more information on how to install that library, check out the Installation page. Overview For NeuropixelsV1eHeadstage, the GUI allows for an easy way to change settings and visualize the effect. From the GUI, you can: Configure the NeuropixelsV1ProbeConfiguration Choose the ADC calibration file Choose the gain calibration file Choose the AP and LFP gain values Enable or disable the AP-band spike filter Change the reference for all electrodes Choose pre-defined channel presets or manually define within a constrained set of possible combinations Easily visualize which electrodes are enabled Configure the Bno055 Enable and disable the PolledBno055Data stream The configuration dialog is accessible by double-clicking on the ConfigureNeuropixelsV1eHeadstage operator. Channel constraints For NeuropixelsV1e, there will always be 384 channels enabled across the entire probe. Therefore, when enabling electrodes (either manually or using channel presets), some previously enabled electrodes will be disabled. Additionally, if more than 384 electrodes are manually selected to be enabled, only the last 384 channels will end up being enabled. It is therefore recommended to always double-check that the correct electrodes are enabled. As an example, let us assume that electrodes 0 through 383 are initially enabled (this corresponds to 384 channels). Then, electrodes 384 and 385 are enabled. When these electrodes are enabled, electrodes 0 and 1 will be disabled. In this way, there will always be 384 channels enabled. In addition to the absolute number of channels, there are other restrictions in place regarding which combinations of electrodes can be enabled at any given time. Specifically, in the NeuropixelsV1Electrode there is a Channel property which defines the channel index of an electrode. Across the entire probe, no two electrodes that share the same Channel can be simultaneously enabled. Channel presets take this into account automatically and ensure that the rules are followed. When manually enabling electrodes, the indexing logic is applied in the order that electrodes are selected. If two (or more) electrodes are selected that share a Channel value, the highest indexed electrode is the only one that will be enabled. Note Due to these constraints, it is possible that a desired combination of electrodes is not feasible. Keeping or discarding configuration settings While the GUI is open, any changes to the configuration settings can be freely modified and will not affect the configuration unless Okay is pressed. This includes all aspects of the configuration, such as which electrodes are enabled, the chosen reference channel, and the probe calibration file. Note The hardware is not actually configured until the workflow starts. If the window is closed any other way (such as by pressing Cancel, or pressing the X to close the window), then any changes made will not be saved. ProbeInterface The NeuropixelsV1eHeadstage GUI uses ProbeInterface as the format to draw the probes and electrodes visually. For more information on ProbeInterface and the resulting JSON file, check out their format specifications page. When opening the GUI, there is a default probe configuration that is loaded and drawn, which can be saved to a JSON file. Conversely, an existing JSON file can be loaded to update the current channel configuration. If for any reason the default configuration is needed, it can be loaded again at any time. Open Headstage Configuration GUI To open the headstage configuration GUI, double-click the ConfigureNeuropixelsV1eHeadstage operator. Once opened, if the calibration files have not been selected the window should look like the image below. To view the probe, follow the steps below to choose calibration files. Choosing probe calibration files Upon opening the GUI for the first time, if no probe calibration files were set in the Bonsai editor, the window will be mostly blank. To populate the window with a drawing of the probe, both calibration files must be selected. First, click on the ... button to the right of the empty text box under \"ADC Calibration File\" (see below). This will open a file dialog, where the ADC calibration file can be searched for and selected. Once the file is selected, press Open or Enter. This will populate the text box with the filepath to the calibration file. This process is then repeated for the gain calibration file; click on the ... button to the right of the empty text box under Gain Calibration File (see below). This will open a file dialog, where the gain calibration file can be searched for and selected. Note Files are expected to be named XXXXXXXXXXX_ADCCalibration.csv and XXXXXXXXXXX_gainCalValues.csv, where \"XXXXXXXXXXX\" is the probe serial number. Once both files are selected, this will enable visualization of the electrodes. Below is a view of the configuration GUI that has been opened after both calibration files have been selected. Status strip Towards the bottom of the GUI, there is a status strip that reports the serial number found in the selected calibration files. Next to the reported serial numbers is a status symbol indicating if there any potential issues. Below is a list of possible states the status strip will display: Symbol Reason One or no files are selected One or more files are invalid Different serial numbers reported Files are valid, and serial numbers match View ADC correction values Once a valid ADC calibration file has been selected, the View ADC Correction Values button will be enabled. This button can be pressed to open a new dialog that displays the correction values for all ADCs. Refer to NeuropixelsV1Adc for more details on the specific calibration values. Selecting AP gain The gain for the AP-band can be selected from the dropdown menu next to AP Gain. For a list of possible gain values, check out NeuropixelsV1Gain. If a gain calibration file has been selected and is valid, the gain correction that will be applied is displayed in the textbox underneath the dropdown menu and is updated based on the current gain selected. Selecting LFP gain The gain for the LFP-band can be selected from the dropdown menu next to LFP Gain. For a list of possible gain values, check out NeuropixelsV1Gain. If a gain calibration file has been selected and is valid, the gain correction that will be applied is displayed in the textbox underneath the dropdown menu and is updated based on the current gain selected. Enabling spike filter A checkbox allows enabling or disabling of the spike-band filter. If enabled, the spike-band has a 300 Hz high-pass filter which will be activated. If set to false, the high-pass filter will not to be activated. Selecting channel reference Underneath the probe calibration filepath, there is a dropdown menu for choosing the reference for all channels. For possible values and a brief description of what they correspond to, check out the references page. Channel presets To save time, it is possible to select a preset channel combination from the Channel Presets dropdown. These presets are defined to work within the constraints of NeuropixelsV1e channel combinations defined above. Below is a list of available channel presets: Bank [A | B | C] Enables all electrodes in the chosen bank To learn more about banks, check out NeuropixelsV1Bank. Single Column Enables all even electrodes on Bank A, then all odd electrodes on Bank B Tetrodes Enables the first group of four electrodes for every eight electrodes (electrodes 0-3 but not 4-7) in Bank A, then enables the second group of four for every eight electrodes in Bank B (388-391, but not 384-387). If electrodes are manually enabled, the Channel Presets dropdown will change to None, indicating that a channel preset is no longer selected. Maneuvering along the probe Once a GUI has been opened and a probe calibration file has been selected, the main panel on the left will be populated with a NeuropixelsV1e probe. Below are the buttons used to navigate within this panel to view and choose electrodes. Mouse Controls Mouse wheel zooms in/out towards the cursor Left-click and drag will select electrodes within the drawn rectangle Left-click on an electrode will select that electrode Left-click in empty space will clear the selected electrodes Middle-click and drag will pan the electrodes Scroll bar On the right side of the main panel there is a scroll bar that can be used to move the probe up and down Panning the probe up or down will update the scroll bar once the movement has completed The scroll bar can be moved by: Grabbing the marker using the mouse and dragging it up or down Placing the cursor either above or below the marker and clicking Using the mouse wheel to scroll up or down while the cursor is over the scroll bar Zoom and pan limits When zooming in and out, note that there are limits in both directions. The probe can only be zoomed out to the point that the entire probe is visible within the panel and no more. Similarly, while zooming in the probe will not zoom in past a certain point. In addition to the absolute zoom limits, the panel will automatically shift the probe to ensure it is always in view. This is handled each time the probe is zoomed or panned. To reset the view at any time, click on the Reset Zoom button to fully zoom out the panel. Manually enabling electrodes Electrodes can be selected at any zoom level, but it is often preferable to zoom in to read the electrode indices. Consider maximizing the window to see those numbers more easily. To select, as described above, either click-and-drag the cursor over the desired electrodes, or select individual electrodes by clicking on them one-by-one. Once the electrodes to enable are selected, click on the Enable Selected Electrodes button in the right panel. At this point the selected electrodes should turn blue, indicating that they are now enabled. It is important to note that when electrodes are enabled, a number of previously enabled electrodes will be disabled due to channel constraints. For more information, read the Channel constraints section above. The short video below shows how to select, clear selection, enable selected electrodes, and translate using the scroll bar. Note that once electrodes are manually enabled, the Channel Presets drop-down changes from BankA to None. Then, once the selected electrodes match the preset, it is automatically changed back to BankA. Loading and saving channel configurations When the GUI is first opened and after a probe calibration file has been specified, the default ProbeInterface configuration is loaded and drawn in the main panel. In this case, the default configuration is for a single-shank NeuropixelsV1e probe, with the BankA channel preset selected. To load a new configuration, load the default configuration, or save the current configuration, go to the File drop-down menu (see below) and choose the relevant option. Save ProbeInterface file To save a ProbeInterface JSON file fully describing the probe, including which electrodes are currently enabled, go to the File drop-down menu, and select NeuropixelsV1e → Save Channel Configuration. This will open a file dialog window to save the new JSON file. Choose a folder location and a name for the file, then hit Save. This will export the current channel configuration. This is a useful way to save any manually enabled electrodes as a backup, or to easily switch between different configurations between recordings. Load ProbeInterface file To load a ProbeInterface JSON file, navigate to the File drop-down menu and select NeuropixelsV1e → Load Channel Configuration. This will open a file dialog window; browse to the existing JSON file, select it and press Open to load the channel configuration. The new probe shape will be loaded and drawn, with the enabled electrodes highlighted as usual. Note When loading a new configuration, the total number of electrodes must match the existing configuration, and the number of enabled electrodes must match. Load default configuration To load the default channel configuration at any time, navigate to the File drop-down menu and choose NeuropixelsV1e → Load Default Channel Configuration. This will load the default configuration, with the BankA channel preset selected. Configure Bno055 At the headstage level, there is another device tab listed for a Bno055. From this tab, the device can be enabled or disabled by selecting the appropriate value from the drop-down menu next to Enable. While other properties are displayed here, they have no affect on the underlying device configuration; only changes to the Enable property will be respected."
  },
  "articles/hardware/np1e/load-data.html": {
    "href": "articles/hardware/np1e/load-data.html",
    "title": "Load Data",
    "keywords": "Load Data The following python script can be used to load and plot the data produced by the NeuropixelsV1e Headstage example workflow. import os import numpy as np import matplotlib.pyplot as plt import matplotlib.patches as mpatches import spikeinterface.extractors as se import spikeinterface.widgets as sw import probeinterface import probeinterface.plotting ap_gain = 500 # Change to the ap band gain used lfp_gain = 500 # Change to the lfp band gain used suffix = 0 # Change to match file names' suffix num_channels = 384 # Decrease channels to expedite plotting and inspect fewer traces # Change this to the directory of your data. In this example, data's in the same directory as this data loading Python script data_directory = os.path.dirname(os.path.realpath(__file__)) mode = 'auto' # This uses colormap plot above 50 channels and line plot below 50 channels. Refer to the spikeinterface docs for more options # Change this to the name of your probeinterface file (should be in the same directory as the rest of your data for this example script to work as-is) probeinterface_filename = 'np1-config.json' plt.close('all') #%% Metadata dt = {'names': ('time', 'acq_clk_hz', 'block_read_sz', 'block_write_sz'), 'formats': ('datetime64[us]', 'u4', 'u4', 'u4')} meta = np.genfromtxt(os.path.join(data_directory, f'start-time_{suffix}.csv'), delimiter=',', dtype=dt, skip_header=1) print(f\"Recording was started at {meta['time']} GMT\") #%% Neuropixels 1.0 probeinterface fig, ax = plt.subplots() np1_config = probeinterface.io.read_probeinterface(os.path.join(data_directory, 'np1-config.json')) contacts_colors = ['cyan' if device_channel_index > -1 else 'red' for device_channel_index in np1_config.probes[0].device_channel_indices] probeinterface.plotting.plot_probegroup(np1_config, ax=ax, contacts_colors=contacts_colors, contacts_kargs={'alpha' : 1, 'zorder' : 10}, show_channel_on_click=True) fig.set_size_inches(2, 9) enabled = mpatches.Patch(color='cyan', label='Enabled') disabled = mpatches.Patch(color='red', label='Disabled') fig.legend(handles=[enabled, disabled], loc='outside upper center') plt.tight_layout() #%% Neuropixels 1.0 Data bit_depth = 10 fig, ax = plt.subplots(1,2) fig.suptitle('Neuropixels 1.0 Data') fig.set_size_inches(9, 9) plt.subplots_adjust(wspace=0.3) ap_scalar = 1.2e6 / (2 ** bit_depth) / ap_gain ap_offset = (2 ** (bit_depth - 1)) * ap_scalar ap_recording = se.read_binary(os.path.join(data_directory, f\"np1-spike_{suffix}.raw\"), 3e5, np.uint16, num_channels, gain_to_uV=ap_scalar, offset_to_uV=-ap_offset) ap_traces_plot = sw.plot_traces(ap_recording, backend='matplotlib', return_scaled=True, mode=mode, clim=(-ap_offset,ap_offset), ax=ax[0]) ax[0].set_xlabel(\"time (sec)\") ax[0].set_ylabel(\"AP (µV)\") lfp_scalar = 1.2e6 / (2 ** bit_depth) / lfp_gain lfp_offset = (2 ** (bit_depth - 1)) * lfp_scalar lfp_recording = se.read_binary(os.path.join(data_directory, f\"np1-lfp_{suffix}.raw\"), 3e5/12, np.uint16, num_channels, gain_to_uV=lfp_scalar, offset_to_uV=-lfp_offset) lfp_traces_plot = sw.plot_traces(lfp_recording, backend='matplotlib', return_scaled=True, mode=mode, clim=(-lfp_offset,lfp_offset), ax=ax[1]) ax[1].set_xlabel(\"time (sec)\") ax[1].set_ylabel(\"LFP (µV)\") #%% Bno055 dt = {'names': ('clock', 'euler', 'quat', 'is_quat_id', 'accel', 'grav', 'temp'), 'formats': ('u8', '(1,3)f8', '(1,4)f8', '?', '(1,3)f8', '(1,3)f8', 'f8', '?')} bno055 = np.genfromtxt(os.path.join(data_directory, f'bno055_{suffix}.csv'), delimiter=',', dtype=dt) bno055_time = bno055['clock'] / meta['acq_clk_hz'] plt.figure() plt.subplot(231) plt.plot(bno055_time, bno055['euler'].squeeze()) plt.xlabel(\"time (sec)\") plt.ylabel(\"angle (deg.)\") plt.ylim(-185, 365) plt.legend(['yaw', 'pitch', 'roll']) plt.title('Euler') plt.subplot(232) plt.plot(bno055_time, bno055['quat'].squeeze()) plt.xlabel(\"time (sec)\") plt.ylim(-1.1, 1.1) plt.legend(['X', 'Y', 'Z', 'W']) plt.title('Quaternion') plt.subplot(233) plt.plot(bno055_time, bno055['accel'].squeeze()) plt.xlabel(\"time (sec)\") plt.ylabel(\"accel. (m/s^2)\") plt.legend(['X', 'Y', 'Z']) plt.title('Lin. Accel.') plt.subplot(234) plt.plot(bno055_time, bno055['grav'].squeeze()) plt.xlabel(\"time (sec)\") plt.ylabel(\"accel. (m/s^2)\") plt.legend(['X', 'Y', 'Z']) plt.title('Gravity Vec.') plt.subplot(235) plt.plot(bno055_time, bno055['temp'].squeeze()) plt.xlabel(\"time (sec)\") plt.ylabel(\"temp. (°C)\") plt.title('Headstage Temp.') plt.tight_layout() plt.show() fig.suptitle('BNO055 Data') Note To plot probeinterface data, save the probe configuration file into the same directory of your data. Note This script will attempt to load entire files into arrays. For long recordings, data will need to be split into more manageable chunks by: Modifying this script to partially load files Modifying the workflow to cyclically create new files after a certain duration"
  },
  "articles/hardware/np1e/memory-monitor.html": {
    "href": "articles/hardware/np1e/memory-monitor.html",
    "title": "Memory Monitor",
    "keywords": "Memory Monitor The following excerpt from the Breakout Board example workflow demonstrates memory monitor functionality. MemoryMonitorData emits a MemoryMonitorDataFrame at a regular interval set by Breakout Board Configuration using the ConfigureBreakoutBoard's SamplesPerSecond property (in our case 10 Hz). In the Breakout Board example workflow, the MemoryMonitorData's DeviceName property is set to \"BreakoutBoard/MemoryMonitor\". This links the MemoryMonitorData operator to the Breakout Board's memory monitor. MemberSelector selects the PercentUsed member from MemoryMonitorDataFrame so the user can visualize the percentage of the breakout board's memory that is occupied. Note MemoryMonitorData generates a data stream that is most useful in the context of closed-loop performance. It tells the user if data is being consumed rapidly enough by the host PC to keep up with data production by the hardware. The hardware FIFO is a buffer that is required to deal with the fact that computers with normal operating systems cannot perform operations with strict regularity. When there are hiccups in acquisition, the hardware FIFO picks up the slack, but should then be cleared immediately. To get the lowest latencies, StartAcquisition's BlockReadSize property should be as small as possible while the memory use percentage remains around 0%. Warning If the hardware FIFO's PercentUsed is non-zero for long time periods, or is increasing, the value of StartAcquisition's BlockReadSize property is too small (see the breakout board configuration). A small BlockReadSize means that the host computer does not have to wait long for enough data to become available to propagate it forward, but will reduce overall bandwidth by increasing the frequency at which the host computer checks if data is available and performs hardware reads."
  },
  "articles/hardware/np1e/np1.html": {
    "href": "articles/hardware/np1e/np1.html",
    "title": "NeuropixelsV1e Headstage Neuropixels 1.0 Probe",
    "keywords": "NeuropixelsV1e Headstage Neuropixels 1.0 Probe The following excerpt from the NeuropixelsV1e Headstage example workflow demonstrates Neuropixels 1.0 probe functionality by streaming and saving probe data. The NeuropixelsV1eData operator generates a sequence of NeuropixelsV1DataFrames using the following properties settings: BufferSize is set to 36. Therefore, each frame will contain a [1 x 36 sample] Clock vector, a [384 channel x 36 sample] SpikeData matrix, and a [384 channel x 3 sample] LfpData matrix. The Neuropixels 1.0 probe samples AP data at 30 kHz per channel (LFP data is sampled at a rate of 1/12 of the rate AP data) so this corresponds to 1.2 ms of data. DeviceName is set to \"NeuropixelsV1eHeadstage/NeuropixelsV1e\". This links the NeuropixelsV1eData operator to the corresponding configuration operator. Given the settings above, each frame will contain a [1 x 36 sample] Clock vector, a [384 channel x 36 sample] SpikeData matrix, and a [384 channel x 3 sample] LfpData matrix. This corresponds to 1.2 ms of data per data frame. LfpData has less samples than Clock and SpikeData because LfpData is sampled at a lower rate; AP data is sampled at 30 kHz while LFP data is sampled at 2.5 kHz. The relevant members are selected from the NeuropixelsV1DataFrame by right-clicking the NeuropixelsV1eData operator and choosing the following Output members: Clock, SpikeData, and LfpData. The MatrixWriter operators save the selected members to files with the following format: np1-clock_<filecount>.raw, np1-spike_<filecount>.raw, and np1-lfp_<filecount>.raw, respectively."
  },
  "articles/hardware/np1e/overview.html": {
    "href": "articles/hardware/np1e/overview.html",
    "title": "NeuropixelsV1e Headstage",
    "keywords": "NeuropixelsV1e Headstage These are the devices available on the NeuropixelsV1e Headstage: Supports one NeuropixelsV1e: A single 1cm long shank probe with a 70 x 24 µm shank cross-section. 960-electrode low-impedance TiN electrodes total. 384 parallel, dual-band (AP, LFP), low-noise recording channels. AP band at 0.3-10 kHz, sampled at 30 kHz LFP band at 0.5-500 Hz, sampled at 2.5 kHz Bno055: 9-axis IMU for real-time, 3D orientation tracking sampled up to ~100 Hz for easy automated commutation with Open Ephys commutators. Tip Visit the NeuropixelsV1e Headstage Hardware Guide to learn more about the hardware such as weight, dimensions, and proper power voltages. The example workflow below can by copy/pasted into the Bonsai editor using the clipboard icon in the top right. This workflow: Captures electrophysiology data from the Neuropixels 1.0 probe and saves it to disk. Captures orientation data from the Bno055 IMU and saves it to disk. Monitors the NeuropixelsV1e Headstage port status. Automatically commutates the tether if there is a proper commutator connection. The following pages in the Neuropixels V1e Headstage Guide provide a breakdown of the above example workflow."
  },
  "articles/hardware/np1e/port-status.html": {
    "href": "articles/hardware/np1e/port-status.html",
    "title": "NeuropixelsV1e Headstage Port Status",
    "keywords": "NeuropixelsV1e Headstage Port Status The Onix system reports when a headstage/miniscope port connection enters or leaves an aberrant state. Such aberrant states include loss of communication lock, detection of parity or CRC error, reception of a badly formatted packet, etc. Knowing the time and type of an aberrant state can help track down its cause. The following excerpt from the NeuropixelsV1e Headstage example workflow demonstrates port status functionality and saves timestamped port status data. PortStatus emits a PortStatusFrame when PortStatusCode changes value i.e. when the NeuropixelsV1e Headstage port connection enters or leaves an aberrant state. Its DeviceName property is set to \"NeuropixelsV1eHeadstage/PortController\" which links the operator to the port controller where the NeuropixelsV1e Headstage is connected. The TimeStamp operator generates a sequence of UTC timestamped items from its input sequence. The CsvWriter operator writes Timestamp as well as Clock and StatusCode members from PortStatusFrame to a file with the following name format: port-status_<filecount>.csv. NOTE The PortStatus datastream is always enabled. ConfigureNeuropixelsV1eHeadstage does not have an Enable property for streaming port status data."
  },
  "articles/hardware/np2e/bno055.html": {
    "href": "articles/hardware/np2e/bno055.html",
    "title": "NeuropixelsV2e Bno055",
    "keywords": "NeuropixelsV2e Bno055 The following excerpt from the NeuropixelsV2e Headstage example workflow visualizes Bno055 data, saves Bno055 data, and commutates the NeuropixelsV2e Headstage if there is a proper commutator connection. The PolledBno055Data operator generates a sequence of Bno055DataFrames. Its DeviceName property is set to \"NeuropixelsV2eHeadstage/PolledBno055Data\" which links PolledBno055Data to the Bno055 on the NeuropixelsV2e Headstage. The CsvWriter operator writes the entire Bno055DataFrame to a file with the following format: bno055_<filecount>.csv. Because CsvWriter is a sink operator, its output sequence is equivalent to its input sequence. This means that the Quaternion member from Bno055DataFrame can be selected downstream of CsvWriter. This is most easily performed by right-clicking the operator, hovering over \"Output\", and clicking the corresponding member. Quaternion values are passed to AutoCommutator which automatically commutates the headstage's tether if there is a proper commutator connection. This operator comes from the OpenEphys.Commutator Bonsai package. Make sure it's installed and updated. You can enable/disable the commutator using the Enable property, enable/disable the LED on the commutator using the LedEnable property, and set the COM port using the PortName property. The correct COM port value varies from system to system. You must find and set the correct COM port to which your commutator is connected in your system. NOTE AutoCommutator is included in the workflow because a commutator is often combined with the NeuropixelsV2e Headstage and the Breakout Board for freely-moving experiments. However, it is disabled by default so that users without a commutator can run the workflow without additional steps. To enable it, click on the node and press Ctrl + Shift + D or right-click the node and click \"Enable\"."
  },
  "articles/hardware/np2e/configuration.html": {
    "href": "articles/hardware/np2e/configuration.html",
    "title": "NeuropixelsV2e Headstage Configuration",
    "keywords": "NeuropixelsV2e Headstage Configuration The following excerpt from the NeuropixelsV2e Headstage example workflow demonstrates how to configure your NeuropixelsV2e Headstage and Breakout Board in Bonsai. This process comprises of the following steps: Create an ONIX acquisition context using CreateContext Configure the NeuropixelsV2e Headstage and the Breakout Board using ConfigureNeuropixelsV2eHeadstage and ConfigureBreakoutBoard Start acquisition using StartAcquisition. NOTE To learn more about the top-level configuration motif in every workflow involving ONIX hardware, visit the Configuration Chain Tutorial. Creating an Acquisition Context The CreateContext operator creates a ContextTask that defines the device driver and index where the hardware exists. The Driver property is set to \"riffa\" which is the name of the PCIe device used by ONIX. In this case, the Index property is set to 0 because there is only a single ONIX system. If a second system is used on the same computer, a second CreateContext operator would be required in its own configuration chain, with its Index property set to 1. Note The NeuropixelsV2eBeta Headstage functions nearly identically to the NeuropixelsV2e Headstage. Simply replace ConfigureNeuropixelsV2eHeadstage with ConfigureNeuropixelsV2eBetaHeadstage. Configuring the NeuropixelsV2e headstage The NeuropixelsV2eHeadstage operator is set to configure the NeuropixelsV2e Headstage; this can enable streaming of electrophysiology data from a Neuropixels 2.0 probe and orientation data from a Bno055 IMU. This is accomplished in the NeuropixelsV2e Headstage example workflow by leaving all of the NeuropixelsV2eHeadstage properties set to their default values. Default values for the headstage are: Enabling the first 384 electrodes of the first shank for streaming (shank 0, electrodes 0 through 383) This is also known as the Shank 0 Bank A Channel Preset Setting the Reference to External Important The workflow will not run unless gain correction files are provided. Click the NeuropixelsV2eHeadstage operator, expand NeuropixelsV2e in the property pane, then choose the appropriate files by selecting either GainCalibrationFileA or GainCalibrationFileB and clicking the ... button. If only one probe is plugged in, only one file is required. Tip For additional details on how to manually configure the headstage, such as enabling specific electrodes for recording, or modify AP / LFP gain, check out the NeuropixelsV2e GUI page. When the workflow is started, the current time (based on Coordinated Universal Time) is saved, along with global hardware parameters governing data acquisition. This is accomplished using a TimeStamp operator to capture the computer's wall clock time. The timestamp is saved along with ContextTask's properties (e.g. AcquisitionClockHz, BlockReadSize, BlockWriteSize) to a csv file (start-time_<filecount>.csv) when the workflow is started. Starting Acquisition After starting a workflow, the StartAcquisition operator begins data acquisition with the hardware that has been configured. In the NeuropixelsV2e Headstage example workflow, most collected data is from the NeuropixelsV2e Headstage. The rate of data being produced by the hardware will be ~18.1 MB/s. The ReadSize property is set to 8192 bytes, meaning data collection will wait until 8192 bytes of data have been produced by the hardware. At 18.1 MB/s the hardware will produce 8192 bytes every ~440 μs. This is a hard bound on the latency of the system. If lower latencies were required, the hardware would need to produce data more quickly or the ReadSize property value would need to be reduced. The WriteSize property is set to 2048 bytes. This determines the amount of memory that is preallocated for temporarily holding data before it is sent to hardware. It is less critical to performance unless the rate that data be written to the hardware is comparable to the rate that the hardware produces data, which is not a common scenario. NOTE For an overview of the devices on the NeuropixelsV2e Headstage that can be configured through the ConfigureNeuropixelsV2eHeadstage operator, visit the NeuropixelsV2e Headstage Overview."
  },
  "articles/hardware/np2e/gui.html": {
    "href": "articles/hardware/np2e/gui.html",
    "title": "NeuropixelsV2e GUI",
    "keywords": "NeuropixelsV2e GUI Note The Neuropixels V2e Beta Headstage GUI functions identically to the Neuropixels V2e Headstage. The NeuropixelsV2e headstage has a graphical user interface when the OpenEphys.Onix1.Design package is downloaded. For more information on how to install that library, check out the Installation page. Overview For NeuropixelsV2eHeadstage, the GUI allows for an easy way to change settings and visualize the effect. From the GUI, you can: Configure Probe A and Probe B independently Choose the probe calibration file Change the reference for all electrodes Choose pre-defined channel presets or manually define within a constrained set of possible combinations Easily visualize which electrodes are enabled Enable and disable the Bno055 stream There are two ways to access configuration dialogs; 1) at the individual NeuropixelsV2eProbeConfiguration level where either Probe A or Probe B can be modified by itself, and 2) at the headstage level where both probes can be modified, as well as the NeuropixelsV2eBno055 device. Whether the GUI is opened at the probe configuration level, or the headstage level, the usage will be almost identical. There are some additional tabs present at the headstage level, but the Probe A and Probe B tabs will act exactly the same as opening a probe configuration GUI for that specific probe. Channel constraints For NeuropixelsV2e, there will always be 384 channels enabled across the entire probe. Therefore, when enabling electrodes (either manually or using channel presets), some previously enabled electrodes will be disabled. Additionally, if more than 384 electrodes are manually selected to be enabled, only the last 384 channels will end up being enabled. It is therefore recommended to always double-check that the correct electrodes are enabled. As an example, let us assume that electrodes 0 through 383 are initially enabled (this corresponds to 384 channels). Then, electrodes 384 and 385 are enabled. When these electrodes are enabled, electrodes 0 and 1 will be disabled. In this way, there will always be 384 channels enabled. In addition to the absolute number of channels, there are other restrictions in place regarding which combinations of electrodes can be enabled at any given time. Specifically, in the NeuropixelsV2QuadShankElectrode there is a Channel property which defines the channel index of an electrode. Across the entire probe, no two electrodes that share the same Channel can be simultaneously enabled. Channel presets take this into account automatically and ensure that the rules are followed. When manually enabling electrodes, the indexing logic is applied in the order that electrodes are selected. If two (or more) electrodes are selected that share a Channel value, the highest indexed electrode is the only one that will be enabled. Note Due to these constraints, it is possible that a desired combination of electrodes is not feasible. Keeping or discarding configuration settings While the GUI is open, any changes to the configuration settings can be freely modified and will not affect the configuration unless Ok is pressed. This includes all aspects of the configuration, such as which electrodes are enabled, the chosen reference channel, and the probe calibration file. Note The hardware is not actually configured until the workflow starts. If the window is closed any other way (such as by pressing Cancel, or pressing the X to close the window), then any changes made will not be saved. ProbeInterface The NeuropixelsV2eHeadstage GUI uses ProbeInterface as the format to draw the probes and electrodes visually. For more information on ProbeInterface and the resulting JSON file, check out their format specifications page. When opening the GUI, there is a default probe configuration that is loaded and drawn, which can be saved to a JSON file. Conversely, an existing JSON file can be loaded to update the current channel configuration. If for any reason the default configuration is needed, it can be loaded again at any time. Open Probe Configuration GUI Steps to open the Probe Configuration GUI: Select the ConfigureNeuropixelsV2eHeadstage node. Click on the NeuropixelsV2eProbeConfiguration to edit (either ProbeConfigurationA or ProbeConfigurationB). Select the ... button on the right-most part of the property pane (#1 above). Once opened, if no probe calibration file has been selected the window should look like the image below. To view the probe, follow the steps below. Tip The controls shown for this GUI are the same as the ones shown for the NeuropixelsV2e Headstage Configuration below. Choosing a probe calibration file Upon opening the GUI for the first time, if no probe calibration file was set in the Bonsai editor, the window will be mostly blank. To populate the window with a drawing of the probe, click on the ellipsis button to the right of the empty text box under \"Probe Calibration File:\" (see below). This will open a file dialog, where the calibration file can be searched for and selected. Note Files are expected to be named XXXXXXXXXXX_gainCalValues.csv, where \"XXXXXXXXXXX\" is the probe serial number. Once the file is selected, press Open or Enter. This will populate the text box with the filepath to the calibration file and enable visualization of the electrodes. Below is a view of the Probe Configuration GUI that has been opened for Probe A with a gain calibration file selected. Note that the Gain Correction textbox and the Gain Calibration SN: status strip are automatically filled in with values found in the calibration file. Selecting channel reference Underneath the probe calibration filepath, there is a dropdown menu for choosing the reference for all channels. For possible values and a brief description of what they correspond to, check out the references page. Channel presets To save time, it is possible to select a preset channel combination from the Channel Presets dropdown. These presets are defined to work within the constraints of NeuropixelsV2e channel combinations defined above. Channel presets follow one of these patterns: Shank N Bank [A | B | C | D] Enables all electrodes in the chosen bank on shank N To learn more about the banks along each shank, check out the NeuropixelsV2QuadShankBank page. All Shanks N_M Enables all electrodes starting at shank index N up to shank index M across all four shanks If electrodes are manually enabled, the Channel Presets dropdown will change to None, indicating that a channel preset is no longer selected. Maneuvering along the probe Once a GUI has been opened and a probe calibration file has been selected, the main panel on the left will be populated with a NeuropixelsV2e probe. Below are the buttons used to navigate within this panel to view and choose electrodes. Mouse Controls Mouse wheel zooms in/out towards the cursor Left-click and drag will select electrodes within the drawn rectangle Left-click on an electrode will select that electrode Left-click in empty space will clear the selected electrodes Middle-click and drag will pan the electrodes Scroll bar On the right side of the main panel there is a scroll bar that can be used to move the probe up and down Panning the probe up or down will update the scroll bar once the movement has completed The scroll bar can be moved by: Grabbing the marker using the mouse and dragging it up or down Placing the cursor either above or below the marker and clicking Using the mouse wheel to scroll up or down while the cursor is over the scroll bar Zoom and pan limits When zooming in and out, note that there are limits in both directions. The probe can only be zoomed out to the point that the entire probe is visible within the panel and no more. Similarly, while zooming in the probe will not zoom in past a certain point. In addition to the absolute zoom limits, the panel will automatically shift the probe to ensure it is always in view. This is handled each time the probe is zoomed or panned. To reset the view at any time, click on the Reset Zoom button to fully zoom out the panel. Manually enabling electrodes Electrodes can be selected at any zoom level, but it is often preferable to zoom in to read the electrode indices. Consider maximizing the screen to see those numbers more easily. To select, as described above, either click-and-drag the cursor over the desired electrodes, or select individual electrodes by clicking on them one-by-one. Once the electrodes to enable are selected, click on the Enable Selected Electrodes button in the right panel. At this point the selected electrodes should turn blue, indicating that they are now enabled. It is important to note that when electrodes are enabled, a number of previously enabled electrodes will be disabled due to channel constraints. For more information, read the Channel constraints section above. The short video below shows how to select, clear selection, enable selected electrodes, and translate using the scroll bar. Note that once electrodes are manually enabled, the Channel Presets drop-down changes from Shank0BankA to None. Then, once the selected electrodes match the preset, it is automatically changed back to Shank0BankA. Loading and saving channel configurations When the GUI is first opened and after a probe calibration file has been specified, the default ProbeInterface configuration is loaded and drawn in the main panel. In this case, the default configuration is for a quad-shank NeuropixelsV2e probe, with the Shank0BankA channel preset selected. To load a new configuration, load the default configuration, or save the current configuration, go to the File drop-down menu (see below) and choose the relevant option. Save ProbeInterface file To save a ProbeInterface JSON file fully describing the probe, including which electrodes are currently enabled, go to the File drop-down menu, and select Save Channel Configuration. This will open a file dialog window to save the new JSON file. Choose a folder location and a name for the file, then hit Save. This will export the current channel configuration. This is a useful way to save any manually enabled electrodes as a backup, or to easily switch between different configurations between recordings. Load ProbeInterface file To load a ProbeInterface JSON file, navigate to the File drop-down menu and select Load Channel Configuration. This will open a file dialog window; browse to the existing JSON file, select it and press Open to load the channel configuration. The new probe shape will be loaded and drawn, with the enabled electrodes highlighted as usual. Note When loading a new configuration, the total number of electrodes must match the existing configuration, and the number of enabled electrodes must match. Load default configuration To load the default channel configuration at any time, navigate to the File drop-down menu and choose Load Default Channel Configuration. This will load the default configuration, with the Shank0BankA channel preset selected. Open Headstage Configuration GUI Step to open the headstage configuration GUI Double-click the ConfigureNeuropixelsV2eHeadstage node (#2 above) Once opened, if no probe calibration is selected for either Probe A or Probe B, then both tabs will only show their controls on the right and no probes (see below). Configure Probe A Using the headstage configuration GUI is exactly the same as using the probe configuration GUI. After the GUI has been opened and a probe calibration file has been selected, Probe A will be drawn in the corresponding tab (see below). Configure Probe B Using the headstage configuration GUI is exactly the same as using the probe configuration GUI. After the GUI has been opened and a probe calibration file has been selected, Probe B will be drawn in the corresponding tab (see below). Configure Bno055 At the headstage level, there is another device tab listed for a Bno055. From this tab, the device can be enabled or disabled by selecting the appropriate value from the drop-down menu next to Enable. While the DeviceAddress and DeviceName values are modifiable here, they have no affect on the underlying device configuration; only changes to the Enable property will be respected."
  },
  "articles/hardware/np2e/load-data.html": {
    "href": "articles/hardware/np2e/load-data.html",
    "title": "Load Data",
    "keywords": "Load Data The following python script can be used to load and plot the data produced by the NeuropixelsV1e Headstage example workflow. import os import numpy as np import matplotlib.pyplot as plt import matplotlib.patches as mpatches import spikeinterface.extractors as se import spikeinterface.widgets as sw import probeinterface import probeinterface.plotting suffix = 0 # Change to match file names' suffix num_channels = 384 # Decrease channels to expedite plotting and inspect fewer traces # Change this to the directory of your data. In this example, data's in the same directory as this data loading Python script data_directory = os.path.dirname(os.path.realpath(__file__)) mode = 'auto' # This uses colormap plot above 50 channels and line plot below 50 channels. Refer to the spikeinterface docs for more options # Change this to the name of your probeinterface file (should be in the same directory as the rest of your data for this example script to work as-is) probeinterface_filename = 'np2-config.json' plt.close('all') #%% Metadata dt = {'names': ('time', 'acq_clk_hz', 'block_read_sz', 'block_write_sz'), 'formats': ('datetime64[us]', 'u4', 'u4', 'u4')} meta = np.genfromtxt(os.path.join(data_directory, f'start-time_{suffix}.csv'), delimiter=',', dtype=dt, skip_header=1) print(f\"Recording was started at {meta['time']} GMT\") #%% Neuropixels 1.0 probeinterface fig, ax = plt.subplots() np2_config = probeinterface.io.read_probeinterface(os.path.join(data_directory, probeinterface_filename)) contacts_colors = ['cyan' if device_channel_index > -1 else 'red' for device_channel_index in np2_config.probes[0].device_channel_indices] probeinterface.plotting.plot_probegroup(np2_config, ax=ax, contacts_colors=contacts_colors, contacts_kargs={'alpha' : 1, 'zorder' : 10}, show_channel_on_click=True) fig.set_size_inches(2, 9) enabled = mpatches.Patch(color='cyan', label='Enabled') disabled = mpatches.Patch(color='red', label='Disabled') fig.legend(handles=[enabled, disabled], loc='outside upper center') plt.tight_layout() #%% Neuropixels 2.0 Data bit_depth = 12 scalar = 2.44141 offset = -(2 ** (bit_depth - 1)) * scalar recording = se.read_binary(os.path.join(data_directory, f\"np2-a-ephys_{suffix}.raw\"), 3e5, np.uint16, num_channels, gain_to_uV=scalar, offset_to_uV=-offset) traces_plot = sw.plot_traces(recording, backend='matplotlib', return_scaled=True, mode=mode, clim=(-offset,offset), figsize=(6,9), figtitle='Neuropixels 2.0 Data') ax.set_xlabel(\"time (sec)\") ax.set_ylabel(\"Ephys (µV)\") #%% Bno055 dt = {'names': ('clock', 'euler', 'quat', 'is_quat_id', 'accel', 'grav', 'temp'), 'formats': ('u8', '(1,3)f8', '(1,4)f8', '?', '(1,3)f8', '(1,3)f8', 'f8')} bno055 = np.genfromtxt(os.path.join(data_directory, f'bno055_{suffix}.csv'), delimiter=',', dtype=dt) bno055_time = bno055['clock'] / meta['acq_clk_hz'] plt.figure() plt.subplot(231) plt.plot(bno055_time, bno055['euler'].squeeze()) plt.xlabel(\"time (sec)\") plt.ylabel(\"angle (deg.)\") plt.ylim(-185, 365) plt.legend(['yaw', 'pitch', 'roll']) plt.title('Euler') plt.subplot(232) plt.plot(bno055_time, bno055['quat'].squeeze()) plt.xlabel(\"time (sec)\") plt.ylim(-1.1, 1.1) plt.legend(['X', 'Y', 'Z', 'W']) plt.title('Quaternion') plt.subplot(233) plt.plot(bno055_time, bno055['accel'].squeeze()) plt.xlabel(\"time (sec)\") plt.ylabel(\"accel. (m/s^2)\") plt.legend(['X', 'Y', 'Z']) plt.title('Lin. Accel.') plt.subplot(234) plt.plot(bno055_time, bno055['grav'].squeeze()) plt.xlabel(\"time (sec)\") plt.ylabel(\"accel. (m/s^2)\") plt.legend(['X', 'Y', 'Z']) plt.title('Gravity Vec.') plt.subplot(235) plt.plot(bno055_time, bno055['temp'].squeeze()) plt.xlabel(\"time (sec)\") plt.ylabel(\"temp. (°C)\") plt.title('Headstage Temp.') plt.tight_layout() fig.suptitle('BNO055 Data') Note To plot probeinterface data, save the probe configuration file into the same directory of your data. Note This script will attempt to load entire files into arrays. For long recordings, data will need to be split into more manageable chunks by: Modifying this script to partially load files Modifying the workflow to cyclically create new files after a certain duration"
  },
  "articles/hardware/np2e/memory-monitor.html": {
    "href": "articles/hardware/np2e/memory-monitor.html",
    "title": "Memory Monitor",
    "keywords": "Memory Monitor The following excerpt from the Breakout Board example workflow demonstrates memory monitor functionality. MemoryMonitorData emits a MemoryMonitorDataFrame at a regular interval set by Breakout Board Configuration using the ConfigureBreakoutBoard's SamplesPerSecond property (in our case 10 Hz). In the Breakout Board example workflow, the MemoryMonitorData's DeviceName property is set to \"BreakoutBoard/MemoryMonitor\". This links the MemoryMonitorData operator to the Breakout Board's memory monitor. MemberSelector selects the PercentUsed member from MemoryMonitorDataFrame so the user can visualize the percentage of the breakout board's memory that is occupied. Note MemoryMonitorData generates a data stream that is most useful in the context of closed-loop performance. It tells the user if data is being consumed rapidly enough by the host PC to keep up with data production by the hardware. The hardware FIFO is a buffer that is required to deal with the fact that computers with normal operating systems cannot perform operations with strict regularity. When there are hiccups in acquisition, the hardware FIFO picks up the slack, but should then be cleared immediately. To get the lowest latencies, StartAcquisition's BlockReadSize property should be as small as possible while the memory use percentage remains around 0%. Warning If the hardware FIFO's PercentUsed is non-zero for long time periods, or is increasing, the value of StartAcquisition's BlockReadSize property is too small (see the breakout board configuration). A small BlockReadSize means that the host computer does not have to wait long for enough data to become available to propagate it forward, but will reduce overall bandwidth by increasing the frequency at which the host computer checks if data is available and performs hardware reads."
  },
  "articles/hardware/np2e/np2.html": {
    "href": "articles/hardware/np2e/np2.html",
    "title": "NeuropixelsV2e Headstage Neuropixels 2.0 Probe(s)",
    "keywords": "NeuropixelsV2e Headstage Neuropixels 2.0 Probe(s) Note The NeuropixelsV2eBeta Headstage functions nearly identically to the NeuropixelsV2e Headstage. Simply replace NeuropixelsV2eData with NeuropixelsV2eBetaData and set its DeviceName property to \"NeuropixelsV2eBetaHeadstage/NeuropixelsV2eBeta\". The following excerpt from the NeuropixelsV2e Headstage example workflow demonstrates Neuropixels 2.0 probe functionality by streaming data and saves Neuropixels 2.0 probe data. The second chain is disabled by default, assuming that only one probe is connected to the headstage. If two probes are connected, the second NeuropixelsV2eData chain can be enabled to stream data from both probes simultaneously. To enable, select all nodes in the disabled chain and press Ctrl+Shift+D, or click Enable right-clicking the selected nodes. The NeuropixelsV2eData operator generates a sequence of NeuropixelsV2eDataFrames using the following properties settings: BufferSize is set to 30. Therefore, each frame will contain a [1 x 30 sample] Clock vector and a [384 channel x 30 sample] AmplifierData matrix. The Neuropixels 2.0 probe samples at 30 kHz per channel so this corresponds to 1 ms of data. DeviceName is set to \"NeuropixelsV2eHeadstage/NeuropixelsV2e\". This links the NeuropixelsV2eData operator to the corresponding configuration operator. ProbeIndex is set to \"ProbeA\". This links the data generated by this probe to the probe in port A of the headstage. The relevant members are selected from the NeuropixelsV2eDataFrame by right-clicking the NeuropixelsV2eData operator and choosing the following Output members: Clock, and AmplifierData. The MatrixWriter operators save the selected members to files with the following format: np2-a-clock_<filecount>.raw and np2-a-amp<filecount>.raw, respectively."
  },
  "articles/hardware/np2e/overview.html": {
    "href": "articles/hardware/np2e/overview.html",
    "title": "NeuropixelsV2e Headstage",
    "keywords": "NeuropixelsV2e Headstage These are the devices available on the NeuropixelsV2e Headstage: Supports up to two IMEC Neuropixels 2.0 probes: Either 1x or 4x silicon shanks with a 70 x 24 µm cross-section. 1280 electrodes low-impedance TiN electrodes per shank (5120 total for quad-shank probes). 384 parallel, full-band (AP, LFP), low-noise recording channels. Bandwidth of 0.3-10 kHz, sampled at 30 kHz Bno055: 9-axis IMU for real-time, 3D orientation tracking sampled up to ~100 Hz for easy automated commutation with Open Ephys commutators. Tip Visit the NeuropixelsV2e Headstage Hardware Guide to learn more about the hardware such as weight, dimensions, and proper power voltages. The example workflow below can by copy/pasted into the Bonsai editor using the clipboard icon in the top right. This workflow: Captures electrophysiology data from the Neuropixels 2.0 probe(s) and saves it to disk. Captures orientation data from the Bno055 IMU and saves it to disk. Monitors the NeuropixelsV2e Headstage port status Automatically commutates the tether if there is a proper commutator connection. The following pages in the NeuropixelsV2e Headstage Guide provide a breakdown of the above example workflow. Note The NeuropixelsV2eBeta Headstage example workflow (download here) is nearly identical to the NeuropixelsV2e Headstage example workflow. Follow the pages in the NeuropixelsV2e Headstage Guide to learn how it works."
  },
  "articles/hardware/np2e/port-status.html": {
    "href": "articles/hardware/np2e/port-status.html",
    "title": "NeuropixelsV2e Headstage Port Status",
    "keywords": "NeuropixelsV2e Headstage Port Status The Onix system reports when a headstage/miniscope port connection enters or leaves an aberrant state. Such aberrant states include loss of communication lock, detection of parity or CRC error, reception of a badly formatted packet, etc. Knowing the time and type of an aberrant state can help track down its cause. The following excerpt from the NeuropixelsV2e Headstage example workflow demonstrates port status functionality and saves timestamped port status data. PortStatus emits a PortStatusFrame when PortStatusCode changes value i.e. when the NeuropixelsV2e Headstage port connection enters or leaves an aberrant state. Its DeviceName property is set to \"NeuropixelsV2eHeadstage/PortController\" which links the operator to the port controller where the NeuropixelsV2e Headstage is connected. The TimeStamp operator generates a sequence of UTC timestamped items from its input sequence. The CsvWriter operator writes Timestamp as well as Clock and StatusCode members from PortStatusFrame to a file with the following name format: port-status_<filecount>.csv. NOTE The PortStatus datastream is always enabled. ConfigureNeuropixelsV2eHeadstage does not have an Enable property for streaming port status data. Note The NeuropixelsV2eBeta Headstage functions nearly identically to the NeuropixelsV2e Headstage in Bonsai. Simply set PortStatus's DeviceName property to \"NeuropixelsV2eBetaHeadstage/PortController\"."
  },
  "articles/hardware/rhs2116/configuration.html": {
    "href": "articles/hardware/rhs2116/configuration.html",
    "title": "Headstage Rhs2116 Configuration",
    "keywords": "Headstage Rhs2116 Configuration The following excerpt from the Headstage Rhs2116 example workflow demonstrates how to configure your Headstage Rhs2116 and Breakout Board in Bonsai. This process comprises of the following steps: Create an ONIX acquisition context using CreateContext Configure the Headstage Rhs2116 and the Breakout Board using ConfigureHeadstageRhs2116 and ConfigureBreakoutBoard Start acquisition using StartAcquisition. NOTE To learn more about the top-level configuration motif in every workflow involving ONIX hardware, visit the Configuration Chain Tutorial. Creating an Acquisition Context The CreateContext operator creates a ContextTask that defines the device driver and index where the hardware exists. The Driver property is set to \"riffa\" which is the name of the PCIe device used by ONIX. In this case, the Index property is set to 0 because there is only a single ONIX system. If a second system is used on the same computer, a second CreateContext operator would be required in its own configuration chain, with its Index property set to 1. Configuring the Breakout Board and Headstage Rhs2116 The ConfigureBreakoutBoard operator configures the Onix Breakout Board. In the Headstage Rhs2116 example tutorial, it is configured to enable digital inputs to serve as a trigger for the Headstage Rhs2116's electrical and optical stimulation and to enable monitoring of the percentage of memory occupied. This is accomplished by leaving all of the ConfigureBreakoutBoard properties set to their default values except its Memory Monitor Enable property is set to \"True\". The ConfigureHeadstageRhs2116 operator is used to configure the Headstage Rhs2116. In the Headstage Rhs2116 example tutorial, it is configured to enable streaming of electrophysiology data from a Rhs2116 amplifier, orientation data from the on-board Bno055 IMU, and position data from the Ts4231. This is accomplished in the Headstage Rhs2116 example workflow by leaving all of the ConfigureHeadstageRhs2116 properties set to their default values. When the workflow is started, the current time (based on Coordinated Universal Time) is saved, along with global hardware parameters governing data acquisition. This is accomplished using a TimeStamp operator to capture the computer's wall clock time. The timestamp is saved along with ContextTask's properties (e.g. AcquisitionClockHz, BlockReadSize, BlockWriteSize) to a csv file (start-time_<filecount>.csv) when the workflow is started. Tip For additional details on how to configure the headstage, as well as how to set stimulus waveforms, check out the Rhs2116 GUI page. Starting Acquisition After starting a workflow, the StartAcquisition operator begins data acquisition with the hardware that has been configured. In the Headstage Rhs2116 example workflow, most collected data is from the Headstage Rhs2116. The rate of data being produced by the hardware will be ~2.1 MB/s. The ReadSize property is set to 4096 bytes, meaning data collection will wait until 4096 bytes of data have been produced by the hardware. At 2.1 MB/s the hardware will produce 4096 bytes every ~1 ms. This is a hard bound on the latency of the system. If lower latencies were required, the hardware would need to produce data more quickly or the ReadSize property value would need to be reduced. The WriteSize property is set to 2048 bytes. This determines the amount of memory that is preallocated for temporarily holding data before it is sent to hardware. It is less critical to performance unless the rate that data be written to the hardware is comparable to the rate that the hardware produces data, which is not a common scenario. NOTE For an overview of the devices on the Headstage Rhs2116 that can be configured through the ConfigureHeadstageRhs2116 operator, visit the Headstage Rhs2116 Overview."
  },
  "articles/hardware/rhs2116/gui.html": {
    "href": "articles/hardware/rhs2116/gui.html",
    "title": "Rhs2116 GUI",
    "keywords": "Rhs2116 GUI The Rhs2116 headstage has a graphical user interface when the OpenEphys.Onix1.Design package is downloaded. For more information on how to install that library, check out the Installation page. Overview The GUI for Rhs2116Headstage allows for an easy way to change settings, as well as the ability to set waveform parameters and visualize the effect. From the GUI, you can: Modify stimulus parameters for all 32 channels Visualize waveforms across all channels Select specific channels using a ProbeInterface representation of the hardware Remove or add stimulus waveform parameters to one or more channels at a time Save and load channel configuration Change filter settings for recording data See ConfigureHeadstageRhs2116 or the Rhs2116 datasheet for more information on filter settings This configuration GUI can be accessed by double-clicking on the ConfigureHeadstageRhs2116 operator. Stimulus parameters The GUI accepts values for stimulation waveform parameters in metric units (e.g., milliseconds and microamps). In the backend, the GUI converts metric units into units that can be written to the hardware. Because the conversion between metric values and converted values is not always exact, the GUI might automatically update the metric value initially input by the user to a metric value that more accurately represents the converted value that will be written to hardware. This update is visually displayed in the same text box where the user initially input their values and happens when the focus moves away from the active text box (e.g., the user presses Tab or clicks somewhere outside of the text box). Below is a table describing the various stimulus parameters that can be applied to each channel including the resolution and limits for each parameter. Parameter Name Minimum Value Maximum Value Resolution Remarks Biphasic Symmetric Unchecked Checked n/a If checked, the positive and negative segments of each pulse will be symmetric Anodic First Unchecked Checked n/a If checked, the anodic (positive) segment will be delivered first for every pulse Delay 0 ms n/a 0.03312 ms Time between a trigger being received and the first pulse is delivered Inter-Pulse 0 ms n/a 0.03312 ms Time between positive-to-negative (or negative-to-positive) stimulation for a single pulse Amplitude 0 µA 2550 µA Dependent on the step size Enter the requested amplitude, and the actual value that will be applied on hardware based on the current step size is displayed underneath in the Step Size text box Step Size 0.01 µA 25 µA Step Size Automatically calculated to optimize difference between requested and actually possible amplitude Pulse Width 0.03312 ms n/a 0.03312 ms Time between each pulse's rising edge and falling edge (or vice-versa) Inter-Stimulus 0.03312 ms n/a 0.03312 ms Time between successive pulses. Can be 0 if there is only one pulse Number of Pulses 1 n/a 1 Number of pulses that are sent per trigger received ProbeInterface The Rhs2116Headstage GUI uses the ProbeInterface format to draw the probes and electrodes visually. For more information on the ProbeInterface JSON format, check out their format specifications page. When opening the GUI, there is a default probe configuration that is loaded and drawn which can be saved to a JSON file. Conversely, an existing ProbeInterface JSON file can be loaded to update the current channel configuration. If the default configuration is needed, it can be loaded again at any time. Using the Channel Selection Window Upon first opening the GUI, the main window will be blank if no stimulus parameters have been defined. The window should look something like this: Selecting channels Once a GUI has been opened, the panel in the top right will be populated with a default Rhs2116 probe group, which is a graphical representation of the channels based on their location on the PCB. The probe group is oriented where the tether is located above the channels shown. Below are the controls used to navigate within this panel to view and choose electrodes. Mouse Controls Mouse wheel zooms in/out towards the cursor Left-click and drag will select electrodes within the drawn rectangle Left-click on an electrode will toggle selection for that electrode Left-click on empty space will clear the electrode selection Middle-click and drag will pan the electrodes When channels are selected, they will be highlighted by a green circle around the contact number, and the corresponding waveforms will be plotted in the main window; any channels that are not selected will not be plotted. Zoom and pan limits When zooming in and out, there are limits in both directions. The probe can only be zoomed out to the point that the entire probe is visible within the panel and no more. Similarly, while zooming in the probe will not zoom in past a certain point. In addition to the absolute zoom limits, the panel will automatically shift the probe to ensure it is always in view. This is handled each time the probe is zoomed or panned. Define Stimuli The following sections define how to apply parameters, read existing parameters, and clear parameters from channels. They also provide example stimulus parameters and descriptions of error codes that can appear in the status strip to facilitate troubleshooting. Applying parameters The first step is to select the channel(s) where the parameters will be applied. Note that the same set of parameters can be simultaneously applied to any or all channels without restriction. If any channel already has stimulation parameters, note that selecting channels will only plot the selected channels in the main window. In the example below, channels 7, 8, 23, and 24 are selected. Enter the stimulus parameters that you want to apply to the currently selected channel(s). Note that the value initially input by the user might update when the focus moves away from the current text box (e.g., the user presses Tab or clicks somewhere outside of the text box) to reflect the actual value that will be written based on the resolutions listed above. In the example below, we can see that the table listed below as well shows the typed values compared to the actual values list. Parameter Requested Value Listed Value Delay [ms] 5 5.00 Inter-Pulse [ms] 0 0.00 Anodic Amplitude [µA] 0.1 0.1 Anodic Pulse Width [ms] 23 22.99 Inter-Stimulus [ms] 100 99.99 Tip If a channel already has stimulus parameters applied to it, it is easy to change individual parameters by only writing in the applicable text box. Any boxes without input will not be applied. The selected settings can be applied to the selected channels by pressing Apply, and the waveforms will be plotted in the main window as shown below. To see the values that will be written to the hardware, click on the Table tab in the top left, next to the Stimulus Waveform tab. This will open up a table that displays all 32 channels, and the value in steps and samples that could be written to the hardware. Any changes made to the channels parameters will be reflected in this window. An example of what the empty table looks like when no parameters have been set is below. Reading current parameters To easily copy settings from one channel to another, or to see what the current settings are on a channel prior to updating then settings, click on a single channel in the channel selection window, or click-and-drag until a single channel is selected, and then press on the Read button in the bottom right. If more than one channel is selected, or no channels are selected, a window will pop up prompting the user to select a single channel. To test this, select a channel that has not been configured yet and press Read. The parameter fields will be populated with zeroes as shown in the image below: Now select a channel that has been configured and press Read to read that channel's current parameters. For example, if one of the channels that was configured in the Applying parameters section above is selected, the image below shows the result of the operation: Clearing current parameters To quickly remove the current stimulus parameter configuration from any given channel(s), select as many channels as are needed and then press the Clear button. This will reset the channel(s) to their default configuration, which removes all parameters. The waveforms will be updated to show that there are no pulses being delivered on the channel(s). Status strip The bottom left corner of the window shows the current status of the configuration settings. Below is a table showing the possible statuses, as well as additional information on what each message means and how invalid settings can be modified to allow the settings to be saved. In addition to the status message, there is an additional message in the status strip that keeps a tally of how complex the waveforms are. This is displayed as a total percentage of the number of slots used (or will be used) by the hardware. Increasing the number of pulses will use more slots, and introducing pulses across different channels that occur at different rates will use more slots. Image Status Label Remarks Valid Stimulus Sequence There are no issues with the current configuration, and the number of slots fits within the hardware boundaries. Settings can be saved. Invalid Sequence - Too many pulses defined The resulting waveform is too complex (for example, using the same settings as above but setting 350 pulses will give this error.). Reduce the complexity of the waveform before saving the configuration. Invalid Sequence - Contact XX, Reason: Y Some combination of stimulus parameter settings is invalid and must be fixed before changes can be saved. The first contact with an invalid parameter set will be listed here, along with the actual reason. Below is a list of possible reasons, but this is not an exhaustive list. Tip In the case that there is an error defined on a particular channel, but it is unclear why the error exists since it appears that nothing is configured on that channel, try selecting the channel and clear the configuration settings Reasons for invalid sequence status Reason Explanation Stimuli = 0, Cathodic Width > 0 The cathodic pulse width is greater than zero, but the number of pulses defined on the contact is zero. Stimuli = 0, Anodic Width > 0 The anodic pulse width is greater than zero, but the number of pulses defined on the contact is zero. Stimuli = 0, ISI > 0 The inter-stimulus interval is greater than zero, but the number of pulses defined on the contact is zero. Stimuli = 0, Anodic Steps > 0 The number of anodic amplitude steps is greater than zero, but the number of pulses defined on the contact is zero. Stimuli = 0, Cathodic Steps > 0 The number of cathodic amplitude steps is greater than zero, but the number of pulses defined on the contact is zero. Stimuli = 0, Delay > 0 The delay is greater than zero, but the number of pulses defined on the contact is zero. Stimuli = 0, Dwell (Inter-Pulse) > 0 The inter-pulse interval is greater than zero, but the number of pulses defined on the contact is zero. Anodic Width = 0, Anodic Steps > 0 The anodic amplitude is greater than zero, but the anodic pulse-width is set to zero on this contact. Cathodic Width = 0, Cathodic Steps > 0 The cathodic amplitude is greater than zero, but the cathodic pulse-width is set to zero on this contact. ISI = 0, Stimuli > 1 The inter-stimulus interval is equal to zero, but the number of stimuli is greater than one. Keeping or discarding settings While the GUI is open, any changes to the configuration settings can be freely modified and will not affect the configuration unless Ok is pressed. This includes all aspects of the configuration, such as filter settings and all stimulus waveform parameters. Note The hardware is not actually configured until the workflow starts. If the window is closed any other way (such as by pressing Cancel or pressing the X to close the window), any changes made will not be saved. If the current settings are considered invalid (see the table above for specific reasons why some settings are invalid), they also will not be saved even if Ok is pressed. A message box will pop up warning that the settings will not be saved, giving the opportunity to continue editing and correct any settings that need modification. Save ProbeInterface file To save a ProbeInterface JSON file fully describing the probe, including which electrodes are currently enabled, go to the File drop-down menu, and select Channel Configuration → Save Channel Configuration. This will open a file dialog window to save the new JSON file. Choose a folder location and a name for the file, then hit Save. This will export the current channel configuration. This is a useful way to save any manually enabled electrodes as a backup, or to easily switch between different configurations between recordings. Load ProbeInterface file To load a ProbeInterface JSON file, navigate to the File drop-down menu and select Channel Configuration → Load Channel Configuration. This will open a file dialog window; browse to the existing JSON file, select it and press Open to load the channel configuration. The new probe shape will be loaded and drawn, with the enabled electrodes highlighted as usual. Note When loading a new configuration, the total number of electrodes must match the existing configuration, and the number of enabled electrodes must match. Load default configuration To load the default channel configuration at any time, navigate to the File drop-down menu and choose Channel Configuration → Load Default Channel Configuration. This will load the default configuration, with the default orientation as described above."
  },
  "articles/hardware/rhs2116/load-data.html": {
    "href": "articles/hardware/rhs2116/load-data.html",
    "title": "Load Data",
    "keywords": "Load Data The following python script can be used to load and plot the data produced by the Headstage Rhs2116 example workflow. import os import numpy as np import matplotlib.pyplot as plt plt.close('all') #%% Set Parameters for Loading Data suffix = '0'; # Change to match file names' suffix # Change this to the directory of your data. In this example, data's in the same directory as this data loading Python script data_directory = os.path.dirname(os.path.realpath(__file__)) start_t = 1.0 # when to start plotting data (seconds) dur = 1.0 # duration of data to plot #%% Metadata dt = {'names': ('time', 'acq_clk_hz', 'block_read_sz', 'block_write_sz'), 'formats': ('datetime64[us]', 'u4', 'u4', 'u4')} meta = np.genfromtxt(os.path.join(data_directory, f'start-time_{suffix}.csv'), delimiter=',', dtype=dt) print(f\"Recording was started at {meta['time']} GMT\") #%% RHS2116 ephys data start_t = 1.0 # when to start plotting data (seconds) dur = 1.0 # duration of data to plot rhs2116 = {} rhs2116['time'] = np.fromfile(os.path.join(data_directory, f'rhs2116-clock_{suffix}.raw'), dtype=np.uint64) / meta['acq_clk_hz'] b = np.bitwise_and(rhs2116['time'] >= start_t, rhs2116['time'] < start_t + dur) time = rhs2116['time'][b] # AC data rhs2116['ac'] = np.reshape(np.fromfile(os.path.join(data_directory, f'rhs2116-ac_{suffix}.raw'), dtype=np.uint16), (-1, 32)) rhs2116_ac = rhs2116['ac'][b, :].astype(np.double) bit_depth = 16 scalar = 0.195 offset = (2 ** (bit_depth - 1)) * scalar rhs2116_ac_converted = rhs2116_ac * scalar - offset + np.arange(rhs2116_ac.shape[1])[None, :] * offset / 4 # DC data rhs2116['dc'] = np.reshape(np.fromfile(os.path.join(data_directory, f'rhs2116-dc_{suffix}.raw'), dtype=np.uint16), (-1, 32)) rhs2116_dc = rhs2116['dc'][b, :].astype(np.double) bit_depth = 10 scalar = -19.23 offset = (2 ** (bit_depth - 1)) * -scalar rhs2116_dc_converted = rhs2116_dc * scalar - offset + np.arange(rhs2116_dc.shape[1])[None, :] * offset / 4 def setup_subplot(ax): ax.set_yticks([]) ax.set_ylabel(\"channel\") ax.set_xlabel(\"time (s)\") fig, (ax_ac, ax_dc) = plt.subplots(nrows=1, ncols=2, figsize=(10,8)) ax_ac.plot(time, rhs2116_ac_converted, 'k', linewidth=0.25) ax_ac.set_title('RHS2116 AC Data') setup_subplot(ax_ac) ax_dc.plot(time, rhs2116_dc_converted, 'k', linewidth=0.25) ax_dc.set_title('RHS2116 DC Data') setup_subplot(ax_dc) fig.suptitle('RHS2116 Data') plt.tight_layout() plt.show() Note This script will attempt to load entire files into arrays. For long recordings, data will need to be split into more manageable chunks by: Modifying this script to partially load files Modifying the workflow to cyclically create new files after a certain duration"
  },
  "articles/hardware/rhs2116/memory-monitor.html": {
    "href": "articles/hardware/rhs2116/memory-monitor.html",
    "title": "Memory Monitor",
    "keywords": "Memory Monitor The following excerpt from the Breakout Board example workflow demonstrates memory monitor functionality. MemoryMonitorData emits a MemoryMonitorDataFrame at a regular interval set by Breakout Board Configuration using the ConfigureBreakoutBoard's SamplesPerSecond property (in our case 10 Hz). In the Breakout Board example workflow, the MemoryMonitorData's DeviceName property is set to \"BreakoutBoard/MemoryMonitor\". This links the MemoryMonitorData operator to the Breakout Board's memory monitor. MemberSelector selects the PercentUsed member from MemoryMonitorDataFrame so the user can visualize the percentage of the breakout board's memory that is occupied. Note MemoryMonitorData generates a data stream that is most useful in the context of closed-loop performance. It tells the user if data is being consumed rapidly enough by the host PC to keep up with data production by the hardware. The hardware FIFO is a buffer that is required to deal with the fact that computers with normal operating systems cannot perform operations with strict regularity. When there are hiccups in acquisition, the hardware FIFO picks up the slack, but should then be cleared immediately. To get the lowest latencies, StartAcquisition's BlockReadSize property should be as small as possible while the memory use percentage remains around 0%. Warning If the hardware FIFO's PercentUsed is non-zero for long time periods, or is increasing, the value of StartAcquisition's BlockReadSize property is too small (see the breakout board configuration). A small BlockReadSize means that the host computer does not have to wait long for enough data to become available to propagate it forward, but will reduce overall bandwidth by increasing the frequency at which the host computer checks if data is available and performs hardware reads."
  },
  "articles/hardware/rhs2116/overview.html": {
    "href": "articles/hardware/rhs2116/overview.html",
    "title": "Headstage Rhs2116",
    "keywords": "Headstage Rhs2116 These are the devices available on the Headstage Rhs2116: Rhs2116 Pair: 32 electrophysiology channels that are independently configurable to record electrophysiological signals from or deliver electrical stimuli to passive probes. 30193.2367 Hz sample rate with 16 bit depth Adjustable analog band-pass filter: Lower cutoff configurable from 0.1 Hz to 1 kHz Upper cutoff configurable from 100 Hz to 20 kHz Lower cutoff during recovery immediately after stimulus configurable from 0.1 Hz to 1 kHz Optional adjustable digital high-pass filter with cutoff configurable from 0.146 Hz to 3.309 kHz Electrical Stimulation: Single current source with ±15V compliance voltage and automatic electrode discharge The stimulation waveform is highly configurable via the Rhs2116StimulusTrigger's properties. Tip Visit the Headstage Rhs2116 Hardware Guide to learn more about the hardware such as weight, dimensions, and proper power voltages. The following pages in the Headstage Rhs2116 Guide provide a breakdown of the above example workflow."
  },
  "articles/hardware/rhs2116/port-status.html": {
    "href": "articles/hardware/rhs2116/port-status.html",
    "title": "Headstage Rhs2116 Port Status",
    "keywords": "Headstage Rhs2116 Port Status The Onix system reports when a headstage/miniscope port connection enters or leaves an aberrant state. Such aberrant states include loss of communication lock, detection of parity or CRC error, reception of a badly formatted packet, etc. Knowing the time and type of an aberrant state can help track down its cause. The following excerpt from the Headstage Rhs2116 example workflow demonstrates port status functionality and saves timestamped port status data. PortStatus emits a PortStatusFrame when PortStatusCode changes value i.e. when the Headstage Rhs2116 port connection enters or leaves an aberrant state. Its DeviceName property is set to \"HeadstageRhs2116/PortController\" which links the operator to the port controller where the Headstage Rhs2116 is connected. The TimeStamp operator generates a sequence of UTC timestamped items from its input sequence. The CsvWriter operator writes Timestamp as well as Clock and StatusCode members from PortStatusFrame to a file with the following name format: port-status_<filecount>.csv. NOTE The PortStatus datastream is always enabled. ConfigureHeadstageRhs2116 does not have an Enable property for streaming port status data."
  },
  "articles/hardware/rhs2116/rhs2116-record.html": {
    "href": "articles/hardware/rhs2116/rhs2116-record.html",
    "title": "Rhs2116 Recording",
    "keywords": "Rhs2116 Recording The following excerpt from the HeadstageRhs2116 example workflow demonstrates the Rhs2116 recording functionality by streaming and saving data from the Rhs2116 device. The Rhs2116Data operator generates a sequence of Rhs2116DataFrames using the following settings: The BufferSize property is set to 30. Each Rhs2116DataFrame will contain a [1 x 30 sample] Clock vector, a [32 channel x 30 sample] AmplifierData matrix, and a [32 channel x 30 sample] DcData matrix. This corresponds to 1 ms of data per data frame. The DeviceName property is set to \"HeadstageRhs2116/Rhs2116\". This links Rhs2116Data to the Rhs2116s on the Headstage Rhs2116. The relevant properties are extracted from the Rhs2116DataFrame by right-clicking the Rhs2116Data operator, and choosing the following Output members: Clock, AmplifierData, and DcData. The MatrixWriters save the selected members to files with the following formats: rhs2116pair-clock_<filecount>.raw, rhs2116pair-ac_<filecount>.raw, and rhs2116pair-dc_<filecount>.raw, respectively. Tip For more details about configuring the Rhs2116 and its data, read the datasheet."
  },
  "articles/hardware/rhs2116/rhs2116-stimulate.html": {
    "href": "articles/hardware/rhs2116/rhs2116-stimulate.html",
    "title": "Rhs2116 Stimulating",
    "keywords": "Rhs2116 Stimulating The following excerpt from the HeadstageRhs2116 example workflow demonstrates the Rhs2116 stimulation functionality by streaming and saving data from the Rhs2116 device. The DigitalInput operator generates a sequence of DigitalInputDataFrames. Although the digital inputs are sampled at 4 Mhz, these data frames are only emitted when the port status changes (i.e., when a pin, button, or switch is toggled). In the Breakout Board example workflow, the DigitalInput's DeviceName property is set to \"BreakoutBoard/DigitalInput\". This links the DigitalInput operator to the Breakout Board's digital inputs. BreakoutButtonState is selected from the DigitalInputDataFrame. It is an enumerator with values that correspond to bit positions of the breakout board's digital port. Buttons connects to Condition which is inspectable with the F12 hotkey. Condition contains a HasFlags operator. Because HasFlags's Value property is set to \"Triangle\", it outputs \"True\" when the △ button is pressed. Condition passes BreakoutButtonState to Double when the its internal conditional statement is evaluated is true. Double emits a value of type double to Rhs2116StimulusTrigger anytime it receives an item in its upstream sequence. When Rhs2116StimulusTrigger receives a double from the upstream sequence, a stimulus waveform is triggered. Its DeviceName property is set to \"HeadstageRhs2116/StimulusTrigger\" to link this operator to the Rhs2116s on the Headstage Rhs2116. Open the Headstage RHS2116 GUI to edit the stimulus waveform. Tip For more details about configuring the Rhs2116 and its stimulation capabilities, read the datasheet."
  },
  "articles/hardware/ucla-miniscope-v4/bno055.html": {
    "href": "articles/hardware/ucla-miniscope-v4/bno055.html",
    "title": "UCLA Miniscope v4 Bno055",
    "keywords": "UCLA Miniscope v4 Bno055 The following excerpt from the UCLA Miniscope v4 example workflow visualizes Bno055 data, saves Bno055 data, and commutates the UCLA Miniscope v4 if there is a proper commutator connection. The PolledBno055Data operator generates a sequence of Bno055DataFrames. Its DeviceName property is set to \"UclaMiniscopeV4/PolledBno055Data\" which links PolledBno055Data to the Bno055 on the UCLA Miniscope v4. The CsvWriter operator writes the entire Bno055DataFrame to a file with the following format: bno055_<filecount>.csv. Because CsvWriter is a sink operator, its output sequence is equivalent to its input sequence. This means that the Quaternion member from Bno055DataFrame can be selected downstream of CsvWriter. This is most easily performed by right-clicking the operator, hovering over \"Output\", and clicking the corresponding member. Quaternion values are passed to AutoCommutator which automatically commutates the headstage's tether if there is a proper commutator connection. This operator comes from the OpenEphys.Commutator Bonsai package. Make sure it's installed and updated. You can enable/disable the commutator using the Enable property, enable/disable the LED on the commutator using the LedEnable property, and set the COM port using the PortName property. The correct COM port value varies from system to system. You must find and set the correct COM port to which your commutator is connected in your system. NOTE AutoCommutator is included in the workflow because a commutator is often combined with the UCLA Miniscope v4 and the Breakout Board for freely-moving experiments. However, it is disabled by default so that users without a commutator can run the workflow without additional steps. To enable it, click on the node and press Ctrl + Shift + D or right-click the node and click \"Enable\"."
  },
  "articles/hardware/ucla-miniscope-v4/camera.html": {
    "href": "articles/hardware/ucla-miniscope-v4/camera.html",
    "title": "UCLA Miniscope v4 Camera Data",
    "keywords": "UCLA Miniscope v4 Camera Data The following excerpt from the UCLA Miniscope v4 example workflow demonstrates the UCLA Miniscope v4 camera-related functionality by streaming and saving data from the UCLA Miniscope v4 camera and allowing the user to dynamically modifying camera parameters. The UclaMiniscopeV4CameraData operator generates a sequence of UclaMiniscopeV4CameraFrames using the following properties settings: DataType is set to \"U8\". This sets the bit depth of each pixel in the image to eight (instead of ten if DataType is set to \"U10\") DeviceName is set to \"UclaMiniscopeV4/UclaMiniscopeV4\". This links the UclaMiniscopeV4CameraData operator to the corresponding configuration operator. The relevant members are selected from the UclaMiniscopeV4CameraFrame by right-clicking the UclaMiniscopeV4CameraData operator and choosing the following Output members: Camera, and Clock. The VideoWriter saves the Camera to a files with the following format: ucla-miniscope-v4-video_.avi with \"DIB \" FourCC. The MatrixWriter saves the Clock to a files with the following format: ucla-miniscope-v4-clock_.raw. Note If you edit the FourCC property yourself and want to use \"DIB \", take care to include a space as the fourth character. You can also use the \"FMP4\" FourCC which compresses the video data into smaller file sizes. However, \"FMP4\" can only be used with 8-bit data. Try adjusting the FrameRate, SensorGain, LEDBrightness, and LiquidLensVoltage properties while the workflow is running and observing the camera data. Follow our Visualize Data guide if you are not sure how to observe the camera data."
  },
  "articles/hardware/ucla-miniscope-v4/configuration.html": {
    "href": "articles/hardware/ucla-miniscope-v4/configuration.html",
    "title": "UCLA Miniscope v4 Configuration",
    "keywords": "UCLA Miniscope v4 Configuration The following excerpt from the UCLA Miniscope v4 example workflow demonstrates how to configure your UCLA Miniscope v4 and Breakout Board in Bonsai. This process comprises of the following steps: Create an ONIX acquisition context using CreateContext Configure the UCLA Miniscope v4 and the Breakout Board using ConfigureUclaMiniscopeV4 and ConfigureBreakoutBoard Start acquisition using StartAcquisition. NOTE To learn more about the top-level configuration motif in every workflow involving ONIX hardware, visit the Configuration Chain Tutorial. Creating an Acquisition Context The CreateContext operator creates a ContextTask that defines the device driver and index where the hardware exists. The Driver property is set to \"riffa\" which is the name of the PCIe device used by ONIX. In this case, the Index property is set to 0 because there is only a single ONIX system. If a second system is used on the same computer, a second CreateContext operator would be required in its own configuration chain, with its Index property set to 1. Configuring the UCLA Miniscope v4 The UclaMiniscopeV4 operator is set to configure the UCLA Miniscope v4; this can enable streaming of video data from a Python480 sensor and orientation data from a Bno055 IMU. This is accomplished in the UCLA Miniscope v4 example workflow by leaving all of the UclaMiniscopeV4 properties set to their default values. When the workflow is started, the current time (based on Coordinated Universal Time) is saved, along with global hardware parameters governing data acquisition. This is accomplished using a TimeStamp operator to capture the computer's wall clock time. The timestamp is saved along with ContextTask's properties (e.g. AcquisitionClockHz, BlockReadSize, BlockWriteSize) to a csv file (start-time_<filecount>.csv) when the workflow is started. Starting Acquisition After starting a workflow, the StartAcquisition operator begins data acquisition with the hardware that has been configured. In the UCLA Miniscope v4 example workflow, most collected data is from the UCLA Miniscope v4. The rate of data being produced by the hardware will be ~11.1 MB/s. The ReadSize property is set to 8192 bytes, meaning data collection will wait until 8192 bytes of data have been produced by the hardware. At 11.1 MB/s the hardware will produce 8192 bytes every ~740 μs. This is a hard bound on the latency of the system. If lower latencies were required, the hardware would need to produce data more quickly or the ReadSize property value would need to be reduced. The WriteSize property is set to 2048 bytes. This determines the amount of memory that is preallocated for temporarily holding data before it is sent to hardware. It is less critical to performance unless the rate that data be written to the hardware is comparable to the rate that the hardware produces data, which is not a common scenario. NOTE For an overview of the devices on the UCLA Miniscope v4 that can be configured through the ConfigureUclaMiniscopeV4 operator, visit the UCLA Miniscope v4 Overview."
  },
  "articles/hardware/ucla-miniscope-v4/memory-monitor.html": {
    "href": "articles/hardware/ucla-miniscope-v4/memory-monitor.html",
    "title": "Memory Monitor",
    "keywords": "Memory Monitor The following excerpt from the Breakout Board example workflow demonstrates memory monitor functionality. MemoryMonitorData emits a MemoryMonitorDataFrame at a regular interval set by Breakout Board Configuration using the ConfigureBreakoutBoard's SamplesPerSecond property (in our case 10 Hz). In the Breakout Board example workflow, the MemoryMonitorData's DeviceName property is set to \"BreakoutBoard/MemoryMonitor\". This links the MemoryMonitorData operator to the Breakout Board's memory monitor. MemberSelector selects the PercentUsed member from MemoryMonitorDataFrame so the user can visualize the percentage of the breakout board's memory that is occupied. Note MemoryMonitorData generates a data stream that is most useful in the context of closed-loop performance. It tells the user if data is being consumed rapidly enough by the host PC to keep up with data production by the hardware. The hardware FIFO is a buffer that is required to deal with the fact that computers with normal operating systems cannot perform operations with strict regularity. When there are hiccups in acquisition, the hardware FIFO picks up the slack, but should then be cleared immediately. To get the lowest latencies, StartAcquisition's BlockReadSize property should be as small as possible while the memory use percentage remains around 0%. Warning If the hardware FIFO's PercentUsed is non-zero for long time periods, or is increasing, the value of StartAcquisition's BlockReadSize property is too small (see the breakout board configuration). A small BlockReadSize means that the host computer does not have to wait long for enough data to become available to propagate it forward, but will reduce overall bandwidth by increasing the frequency at which the host computer checks if data is available and performs hardware reads."
  },
  "articles/hardware/ucla-miniscope-v4/overview.html": {
    "href": "articles/hardware/ucla-miniscope-v4/overview.html",
    "title": "UCLA Miniscope v4",
    "keywords": "UCLA Miniscope v4 These are the devices available on the UCLA Miniscope v4: UCLA Miniscope v4 Camera System camera sensor: 0.48 Megapixel CMOS 8-bit or 10-bit image sensor (608 x 608 pixels) data Python480 sensor for dynamic adjustment of frame rate in discrete increments: 10, 15, 20, 25 or 30 fps Python480 sensor for dynamic adjustment of exposure in three discrete levels ETL for dynamic and continuous ~500 µm adjustment of imaging depth with off-the-shelf lens configuration LED driver for dynamic and continuous adjustment of excitation light intensity Bno055: 9-axis IMU for real-time, 3D orientation tracking updated at the same frame rate as the camera Tip Visit the UCLA Miniscope v4 Hardware Guide to learn more about the hardware such as weight, dimensions, and proper power voltages. The example workflow below can by copy/pasted into the Bonsai editor using the clipboard icon in the top right. This workflow: Captures image data from the UCLA Miniscope v4 Camera System and saves it to disk. Captures orientation data from the Bno055 IMU and saves it to disk. Monitors the UCLA Miniscope v4 port status. Automatically commutates the tether if there is a proper commutator connection. The following pages in the UCLA Miniscope v4 Guide provide a breakdown of the above example workflow."
  },
  "articles/hardware/ucla-miniscope-v4/port-status.html": {
    "href": "articles/hardware/ucla-miniscope-v4/port-status.html",
    "title": "UCLA Miniscope v4 Port Status",
    "keywords": "UCLA Miniscope v4 Port Status The Onix system reports when a headstage/miniscope port connection enters or leaves an aberrant state. Such aberrant states include loss of communication lock, detection of parity or CRC error, reception of a badly formatted packet, etc. Knowing the time and type of an aberrant state can help track down its cause. The following excerpt from the UCLA Miniscope v4 example workflow demonstrates port status functionality and saves timestamped port status data. PortStatus emits a PortStatusFrame when PortStatusCode changes value i.e. when the UCLA Miniscope v4 port connection enters or leaves an aberrant state. Its DeviceName property is set to \"UclaMiniscopeV4/PortController\" which links the operator to the port controller where the UCLA Miniscope v4 is connected. The TimeStamp operator generates a sequence of UTC timestamped items from its input sequence. The CsvWriter operator writes Timestamp as well as Clock and StatusCode members from PortStatusFrame to a file with the following name format: port-status_<filecount>.csv. NOTE The PortStatus datastream is always enabled. ConfigureUclaMiniscopeV4 does not have an Enable property for streaming port status data."
  },
  "articles/tutorials/basic-ephys-processing.html": {
    "href": "articles/tutorials/basic-ephys-processing.html",
    "title": "Basic Ephys Data Processing in Bonsai",
    "keywords": "Basic Ephys Data Processing in Bonsai This tutorial shows how to use ONIX hardware and the OpenEphys.Onix1 Bonsai package to perform basic online signal processing on electrophysiology data in Bonsai such as channel selection and reordering, frequency filtering and event detection (in this example, spike detection using a fixed threshold crossing). This type of processing is helpful for visualizing data during acquisition and can be a starting point for more advanced workflows such as closed-loop experiments. For specialized data visualizations from very dense arrays like Neuropixels probes, for example, we recommend piping that data to the Open Ephys GUI. This tutorial guides you through building the following workflow: Note Although this tutorial uses headstage64 as an example, the process is similar for other ephys headstages. This tutorial assumes you are familiar with the hardware guide of the ONIX headstage you intend to use. Use this reference for which ephys Data I/O Operators and scaling you need to use for each headstage, and links to relevant documentation. Set up and get started in Bonsai Follow the Getting Started guide to set up and get familiarized with Bonsai. In particular: Download the necessary Bonsai packages or check for updates. This tutorial assumes you're using the latest software. Read about visualizing data since we recommend checking each step of the tutorial by visualizing the data produced but we don't cover it here. Configure the hardware Construct a top-level hardware configuration chain: Place the configuration operators that correspond to the hardware you intend to use between CreateContext and StartAcquisition. In this example, these are ConfigureHeadstage64 and ConfigureBreakoutBoard. Confirm that the device that streams electrophysiology data is enabled. The Rhd2164 device (an Intan amplifier) on the headstage64 is the only device used in this tutorial, so you could disable other devices on the headstage and on the breakout board to improve performance if you wanted to. Stream ephys data into Bonsai Place the relevant operators to stream electrophysiology data from your headstage: Because the device on headstage64 that streams electrophysiology data is the Rhd2164 Intan amplifier, we placed the Rhd2164Data node onto the workflow. Use this reference to find the ephys data operator that corresponds to each device. Select the relevant members from the data frames that the data operator produces. In this example, the relevant members are \"AmplifierData\" and \"Clock\". To select those members, right-click the Rhd2164 node, hover over the output option in the context menu, and select it from the list. Visualize the raw data to confirm that the ephys data operator is streaming data. Select and reorder channels Connect a SelectChannels operator to the electrophysiology data stream and edit its \"Channels\" property. Remember indexing in Bonsai starts at 0. Use commas to list multiple channels and brackets for ranges. Reorder channels by listing the channel numbers in the order in which you want to visualize the channels. Convert ephys data to microvolts Center the signal around zero Connect a ConvertScale operator to the SelectChannels operator and set its properties: Edit its \"Shift\" property to subtract 2bit depth - 1 from the signal. Use this reference to find the Shift necessary for each device. In this example, we \"Shift\" -32768 because the Rhd2164 device outputs unsigned 16-bit data. Set the \"Depth\" property to F32 because this bit depth is required to correctly represent scaled data from all devices. Scale the signal to microvolts Connect a second ConvertScale operator to the first ConvertScale operator and set its properties: Edit its \"Scale\" property to multiply the signal by a scalar in order to get microvolt values. This scalar is determined by the gain of the amplifier and resolution the ADC contained in the amplifier device. Use this reference to find the \"Scale\" necessary for each device. In this example, we \"Scale\" by 0.195 because the Rhd2164 device on headstage64 has a step size of 0.195 μV/bit Keep the \"Depth\" property at F32. Visualize the transformed data to confirm the output of the shifting and scaling operations worked as expected, i.e. that the signal is centered around zero and that the values make sense in microvolts. Note Although both the Shift and Scale calculation can be done in one ConvertScale operator, the calculations are more straightforward using two operators connected in series because the ConvertScale operator applies the \"Shift\" offset after applying the \"Scale\" scalar so if we used a single operator, we would have to scale the Shift parameter. Apply a filter Connect a FrequencyFilter operator to the second ConvertScale operator and set its properties. Set its \"SampleRate\" property to 30000. Ephys data in all devices is 30 kHz. Set the \"FilterType\" property to an adequate type. In this example, we use a high pass filter to look at spikes. Set the \"Cutoff1\" and \"Cutoff2\" properties to an adequate value. In this example, we use 300 Hz as the lower cutoff frequency. Visualize the filtered data. Tip If you choose to save data, we recommend you place the MatrixWriter operator before filtering and scaling to save raw data instead of scaled or filtered data. Filtering with the FrequencyFilter operator before recording could remove signals from a bandwidth of interest and converting to microvolts with the second ConvertScale operator could increase the size of your data without increasing meaningful information. Detect events Based on the amplitude of the signal on the selected channel, set a fixed threshold for detecting spikes. Visualize the spike data. Tip You can test the spike detection using a pre-recorded data known to have spikes: recreate the workflow from this example without the hardware configuration chain in a new workflow and replace the ephys data node (in the case of the headstage64, replace the Rhd2164 node) with a MatrixReader that reads from the file containing spiking ephys data in unsigned 16-bit format."
  },
  "articles/tutorials/buffers-memory-usage.html": {
    "href": "articles/tutorials/buffers-memory-usage.html",
    "title": "Buffers & Memory Usage Tutorial",
    "keywords": "Buffers & Memory Usage Tutorial"
  },
  "articles/tutorials/index.html": {
    "href": "articles/tutorials/index.html",
    "title": "Tutorials",
    "keywords": "Tutorials This section contains tutorials that demonstrate how to make the most of the Bonsai library by combining ONIX with third party software tools"
  },
  "index.html": {
    "href": "index.html",
    "title": "OpenEphys.Onix1",
    "keywords": "OpenEphys.Onix1 OpenEphys.Onix1 is a Bonsai library that can be used to control the ONIX PCIe Acquisition System. It provides: Support for a variety of tools such as Neuropixels (all variants), Miniscopes, Intan-based headstages, and more Automatic hardware synchronization of all data streams. Torque-free commutation of ultra-thin (down to ~0.2mm diameter) tethers High performance closed-loop performance (100 usec feedback loop times) User Guide Operator Reference Tutorials Hardware Guide Start here for usage instructions. Detailed information on library components. How to make the most of ONIX in Bonsai. Go to the hardware documentation site. Why Bonsai? ONIX is built on the ONI standard, which is software agnostic. Bonsai is the first software target pursued by the Open Ephys team for ONIX hardware. There are three major reasons for this: Performance. ONIX is a universal interface for neural recording instruments. It can capture data produced by neural probes, cameras, high-speed ADCs, etc. In general terms, ONIX can capture data from arbitrary mixtures of asynchronous1 data sources. Bonsai provides an extremely powerful, open-source software platform for elegantly collecting, combining, and processing data from essentially any data source regardless of its sample rate, sample regularity, packet size, and bandwidth. Bonsai accomplishes this task in a fundamental manner: it explicitly models each data source as an ordered temporal sequence with a start and end called an Observable. This is analogous to how, for instance, Numpy explicitly models fixed-size multi-dimensional arrays as ndarrays. And, just like Numpy offers an extensive linear algebra toolkit to operate on these arrays, Bonsai offers an analogous toolkit for operating on temporal sequences of data. Because Bonsai was created around this core data model and operator library, it makes capturing, processing, and combining data sequences from different hardware sources natural in Bonsai, whereas it is bug prone and difficult in other software options. Code quality. Open Ephys has been developing open source hardware and software for the Neuroscience community for over a decade. In terms of code quality, Bonsai is excellent. Bonsai uses a modern language and build system, has integrated package management, and an extremely clean, featureful, and well maintained API. Given that Bonsai's development model perfectly aligns with our values, we are very proud to be able to contribute to its growth in the Neuroscience community. Third party integration. Bonsai provides support for hundreds of pieces of open- and closed-source hardware and software that are used extensively in neuroscience research. For instance: The classic Open Ephys acquisition system Ucla Miniscope ecosystem National Instruments acquisition boards Virtually every machine-vision and sCMOS camera2 Sanworks Bpod Harp Deeplabcut & Sleap And much more By targeting Bonsai, ONIX can be used seamlessly with these third party tools. Note We put a lot of effort into making these docs useful for everyone. If you have suggestions for making them even better, please contribute by either raising an issue or following the links saying Edit this page. We welcome all constructive feedback. As always, our goals are better performing tools, less redundant development, and more reproducible science. In addition to this library, we are currently developing ONIX support for the Open Ephys GUI. Although physical data sources are asynchronous (e.g. a Neuropixels probe runs on a distinct clock and produces data at a distinct rate compared to the camera sensor on a Miniscope), all data is hardware-timestamped on a common clock. No post-hoc data alignment is required.↩ Flir, Allied Vision, Ximea, Basler, Excelitas, etc.↩"
  }
}